[
{"url": "http://flask.pocoo.org/docs/1.0/genindex/", "text": "\n   \n     \n     \n   \n     Index \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n\n Index \n\n \n  _ \n |  A \n |  B \n |  C \n |  D \n |  E \n |  F \n |  G \n |  H \n |  I \n |  J \n |  K \n |  L \n |  M \n |  N \n |  O \n |  P \n |  Q \n |  R \n |  S \n |  T \n |  U \n |  V \n |  W \n |  Y \n \n \n _ \n \n   \n       _app_ctx_stack (in module flask) \n \n   \n   \n       _AppCtxGlobals (class in flask.ctx) \n \n       _request_ctx_stack (in module flask) \n \n   \n \n\n A \n \n   \n       abort() (in module flask) \n \n       accept_charsets (flask.Request attribute) \n \n       accept_encodings (flask.Request attribute) \n \n       accept_languages (flask.Request attribute) \n \n       accept_mimetypes (flask.Request attribute) \n \n       access_route (flask.Request attribute) \n \n       accessed (flask.sessions.SecureCookieSession attribute) \n\n       \n         (flask.sessions.SessionMixin attribute) \n \n       \n       add_app_template_filter() (flask.Blueprint method) \n \n       add_app_template_global() (flask.Blueprint method) \n \n       add_app_template_test() (flask.Blueprint method) \n \n       add_template_filter() (flask.Flask method) \n \n       add_template_global() (flask.Flask method) \n \n       add_template_test() (flask.Flask method) \n \n       add_url_rule() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n         (flask.blueprints.BlueprintSetupState method) \n \n       \n       after_app_request() (flask.Blueprint method) \n \n       after_request() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       after_request_funcs (flask.Flask attribute) \n \n       after_this_request() (in module flask) \n \n   \n   \n       app (flask.blueprints.BlueprintSetupState attribute) \n \n       app_context() (flask.Flask method) \n \n       app_context_processor() (flask.Blueprint method) \n \n       app_ctx_globals_class (flask.Flask attribute) \n \n       app_errorhandler() (flask.Blueprint method) \n \n       app_import_path (flask.cli.ScriptInfo attribute) \n \n       app_template_filter() (flask.Blueprint method) \n \n       app_template_global() (flask.Blueprint method) \n \n       app_template_test() (flask.Blueprint method) \n \n       app_url_defaults() (flask.Blueprint method) \n \n       app_url_value_preprocessor() (flask.Blueprint method) \n \n       AppContext (class in flask.ctx) \n \n       appcontext_popped (in module flask) \n \n       appcontext_pushed (in module flask) \n \n       appcontext_tearing_down (in module flask) \n \n       AppGroup (class in flask.cli) \n \n       application() (flask.Request class method) \n \n       APPLICATION_ROOT (built-in variable) \n \n       args (flask.Request attribute) \n \n       as_view() (flask.views.View class method) \n \n       authorization (flask.Request attribute) \n \n       auto_find_instance_path() (flask.Flask method) \n \n   \n \n\n B \n \n   \n       base_url (flask.Request attribute) ,  [1] \n \n       before_app_first_request() (flask.Blueprint method) \n \n       before_app_request() (flask.Blueprint method) \n \n       before_first_request() (flask.Flask method) \n \n       before_first_request_funcs (flask.Flask attribute) \n \n       before_request() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n   \n   \n       before_request_funcs (flask.Flask attribute) \n \n       Blueprint (class in flask) \n \n       blueprint (flask.blueprints.BlueprintSetupState attribute) \n\n       \n         (flask.Request attribute) \n \n       \n       blueprints (flask.Flask attribute) \n \n       BlueprintSetupState (class in flask.blueprints) \n \n   \n \n\n C \n \n   \n       cache_control (flask.Request attribute) \n \n       check() (flask.json.tag.JSONTag method) \n \n       cli (flask.Flask attribute) \n \n       close() (flask.Request method) \n \n       command() (flask.cli.AppGroup method) \n \n       Config (class in flask) \n \n       config (flask.Flask attribute) \n \n       config_class (flask.Flask attribute) \n \n       content_encoding (flask.Request attribute) \n \n       content_length (flask.Request attribute) \n \n       content_md5 (flask.Request attribute) \n \n   \n   \n       content_type (flask.Request attribute) \n \n       context_processor() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       cookies (flask.Request attribute) \n \n       copy() (flask.ctx.RequestContext method) \n \n       copy_current_request_context() (in module flask) \n \n       create_app (flask.cli.ScriptInfo attribute) \n \n       create_global_jinja_loader() (flask.Flask method) \n \n       create_jinja_environment() (flask.Flask method) \n \n       create_url_adapter() (flask.Flask method) \n \n       current_app (in module flask) \n \n   \n \n\n D \n \n   \n       data (flask.cli.ScriptInfo attribute) \n\n       \n         (flask.Request attribute) \n \n         (flask.Response attribute) \n \n       \n       date (flask.Request attribute) \n \n       DEBUG (built-in variable) \n \n       debug (flask.Flask attribute) \n \n       decorators (flask.views.View attribute) \n \n       default() (flask.json.JSONEncoder method) \n \n       default_config (flask.Flask attribute) \n \n       default_tags (flask.json.tag.TaggedJSONSerializer attribute) \n \n   \n   \n       dict_storage_class (flask.Request attribute) \n \n       digest_method() (flask.sessions.SecureCookieSessionInterface static method) \n \n       dispatch_request() (flask.Flask method) \n\n       \n         (flask.views.MethodView method) \n \n         (flask.views.View method) \n \n       \n       do_teardown_appcontext() (flask.Flask method) \n \n       do_teardown_request() (flask.Flask method) \n \n       dump() (in module flask.json) \n \n       dumps() (flask.json.tag.TaggedJSONSerializer method) \n\n       \n         (in module flask.json) \n \n       \n   \n \n\n E \n \n   \n       endpoint (flask.Request attribute) \n \n       endpoint() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       ENV (built-in variable) \n \n       env (flask.Flask attribute) \n \n       environ (flask.Request attribute) \n \n       \n    environment variable\n\n       \n         FLASK_DEBUG ,  [1] ,  [2] \n \n         FLASK_ENV ,  [1] ,  [2] ,  [3] ,  [4] ,  [5] ,  [6] ,  [7] ,  [8] ,  [9] ,  [10] \n \n         YOURAPPLICATION_SETTINGS \n \n       \n   \n   \n       error_handler_spec (flask.Flask attribute) \n \n       errorhandler() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       escape() (flask.Markup class method) \n\n       \n         (in module flask) \n \n       \n       EXPLAIN_TEMPLATE_LOADING (built-in variable) \n \n       extensions (flask.Flask attribute) \n \n   \n \n\n F \n \n   \n       files (flask.Request attribute) \n \n       first_registration (flask.blueprints.BlueprintSetupState attribute) \n \n       flash() (in module flask) \n \n       Flask (class in flask) \n \n       flask (module) \n \n       flask.json (module) \n \n       flask.json.tag (module) \n \n       FLASK_DEBUG ,  [1] ,  [2] \n \n       FLASK_ENV ,  [1] ,  [2] ,  [3] ,  [4] ,  [5] ,  [6] ,  [7] ,  [8] ,  [9] ,  [10] \n \n       FlaskClient (class in flask.testing) \n \n       FlaskCliRunner (class in flask.testing) \n \n   \n   \n       FlaskGroup (class in flask.cli) \n \n       form (flask.Request attribute) \n \n       form_data_parser_class (flask.Request attribute) \n \n       from_envvar() (flask.Config method) \n \n       from_json() (flask.Config method) \n \n       from_mapping() (flask.Config method) \n \n       from_object() (flask.Config method) \n \n       from_pyfile() (flask.Config method) \n \n       from_values() (flask.Request class method) \n \n       full_dispatch_request() (flask.Flask method) \n \n       full_path (flask.Request attribute) ,  [1] \n \n   \n \n\n G \n \n   \n       g (in module flask) \n \n       get() (flask.ctx._AppCtxGlobals method) \n\n       \n         (flask.sessions.SecureCookieSession method) \n \n       \n       get_command() (flask.cli.FlaskGroup method) \n \n       get_cookie_domain() (flask.sessions.SessionInterface method) \n \n       get_cookie_httponly() (flask.sessions.SessionInterface method) \n \n       get_cookie_path() (flask.sessions.SessionInterface method) \n \n       get_cookie_samesite() (flask.sessions.SessionInterface method) \n \n       get_cookie_secure() (flask.sessions.SessionInterface method) \n \n       get_data() (flask.Request method) \n \n   \n   \n       get_expiration_time() (flask.sessions.SessionInterface method) \n \n       get_flashed_messages() (in module flask) \n \n       get_json() (flask.Request method) \n\n       \n         (flask.Response method) \n \n       \n       get_namespace() (flask.Config method) \n \n       get_send_file_max_age() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       get_template_attribute() (in module flask) \n \n       got_first_request (flask.Flask attribute) \n \n       got_request_exception (in module flask) \n \n       group() (flask.cli.AppGroup method) \n \n   \n \n\n H \n \n   \n       handle_exception() (flask.Flask method) \n \n       handle_http_exception() (flask.Flask method) \n \n       handle_url_build_error() (flask.Flask method) \n \n       handle_user_exception() (flask.Flask method) \n \n       has_app_context() (in module flask) \n \n       has_request_context() (in module flask) \n \n   \n   \n       has_static_folder (flask.Blueprint attribute) \n\n       \n         (flask.Flask attribute) \n \n       \n       headers (flask.Request attribute) \n\n       \n         (flask.Response attribute) \n \n       \n       host (flask.Request attribute) \n \n       host_url (flask.Request attribute) \n \n   \n \n\n I \n \n   \n       if_match (flask.Request attribute) \n \n       if_modified_since (flask.Request attribute) \n \n       if_none_match (flask.Request attribute) \n \n       if_range (flask.Request attribute) \n \n       if_unmodified_since (flask.Request attribute) \n \n       import_name (flask.Blueprint attribute) \n\n       \n         (flask.Flask attribute) \n \n       \n       inject_url_defaults() (flask.Flask method) \n \n       instance_path (flask.Flask attribute) \n \n   \n   \n       invoke() (flask.testing.FlaskCliRunner method) \n \n       is_json (flask.Request attribute) \n\n       \n         (flask.Response attribute) \n \n       \n       is_multiprocess (flask.Request attribute) \n \n       is_multithread (flask.Request attribute) \n \n       is_null_session() (flask.sessions.SessionInterface method) \n \n       is_run_once (flask.Request attribute) \n \n       is_secure (flask.Request attribute) \n \n       is_xhr (flask.Request attribute) \n \n       iter_blueprints() (flask.Flask method) \n \n   \n \n\n J \n \n   \n       jinja_env (flask.Flask attribute) \n \n       jinja_environment (flask.Flask attribute) \n \n       jinja_loader (flask.Blueprint attribute) \n\n       \n         (flask.Flask attribute) \n \n       \n       jinja_options (flask.Flask attribute) \n \n       json (flask.Request attribute) \n \n       JSON_AS_ASCII (built-in variable) \n \n       json_decoder (flask.Blueprint attribute) \n\n       \n         (flask.Flask attribute) \n \n       \n   \n   \n       json_encoder (flask.Blueprint attribute) \n\n       \n         (flask.Flask attribute) \n \n       \n       JSON_SORT_KEYS (built-in variable) \n \n       JSONDecoder (class in flask.json) \n \n       JSONEncoder (class in flask.json) \n \n       jsonify() (in module flask.json) \n \n       JSONIFY_MIMETYPE (built-in variable) \n \n       JSONIFY_PRETTYPRINT_REGULAR (built-in variable) \n \n       JSONTag (class in flask.json.tag) \n \n   \n \n\n K \n \n   \n       key (flask.json.tag.JSONTag attribute) \n \n   \n   \n       key_derivation (flask.sessions.SecureCookieSessionInterface attribute) \n \n   \n \n\n L \n \n   \n       list_commands() (flask.cli.FlaskGroup method) \n \n       list_storage_class (flask.Request attribute) \n \n       load() (in module flask.json) \n \n       load_app() (flask.cli.ScriptInfo method) \n \n   \n   \n       load_dotenv() (in module flask.cli) \n \n       loads() (flask.json.tag.TaggedJSONSerializer method) \n\n       \n         (in module flask.json) \n \n       \n       log_exception() (flask.Flask method) \n \n       logger (flask.Flask attribute) \n \n   \n \n\n M \n \n   \n       main() (flask.cli.FlaskGroup method) \n \n       make_config() (flask.Flask method) \n \n       make_default_options_response() (flask.Flask method) \n \n       make_form_data_parser() (flask.Request method) \n \n       make_null_session() (flask.Flask method) \n\n       \n         (flask.sessions.SessionInterface method) \n \n       \n       make_response() (flask.Flask method) \n\n       \n         (in module flask) \n \n       \n       make_setup_state() (flask.Blueprint method) \n \n       make_shell_context() (flask.Flask method) \n \n       Markup (class in flask) \n \n       match_request() (flask.ctx.RequestContext method) \n \n       MAX_CONTENT_LENGTH (built-in variable) \n \n   \n   \n       max_content_length (flask.Request attribute) \n \n       MAX_COOKIE_SIZE (built-in variable) \n \n       max_cookie_size (flask.Response attribute) \n \n       max_forwards (flask.Request attribute) \n \n       message_flashed (in module flask) \n \n       method (flask.Request attribute) \n \n       methods (flask.views.View attribute) \n \n       MethodView (class in flask.views) \n \n       mimetype (flask.Request attribute) \n\n       \n         (flask.Response attribute) \n \n       \n       mimetype_params (flask.Request attribute) \n \n       modified (flask.session attribute) \n\n       \n         (flask.sessions.SecureCookieSession attribute) \n \n         (flask.sessions.SessionMixin attribute) \n \n       \n   \n \n\n N \n \n   \n       name (flask.Flask attribute) \n \n       new (flask.session attribute) \n \n   \n   \n       null_session_class (flask.sessions.SessionInterface attribute) \n \n       NullSession (class in flask.sessions) \n \n   \n \n\n O \n \n   \n       on_json_loading_failed() (flask.Request method) \n \n       open() (flask.testing.FlaskClient method) \n \n       open_instance_resource() (flask.Flask method) \n \n       open_resource() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n   \n   \n       open_session() (flask.Flask method) \n\n       \n         (flask.sessions.SecureCookieSessionInterface method) \n \n         (flask.sessions.SessionInterface method) \n \n       \n       options (flask.blueprints.BlueprintSetupState attribute) \n \n   \n \n\n P \n \n   \n       parameter_storage_class (flask.Request attribute) \n \n       pass_script_info() (in module flask.cli) \n \n       path (flask.Request attribute) ,  [1] \n \n       permanent (flask.session attribute) \n\n       \n         (flask.sessions.SessionMixin attribute) \n \n       \n       PERMANENT_SESSION_LIFETIME (built-in variable) \n \n       permanent_session_lifetime (flask.Flask attribute) \n \n       pickle_based (flask.sessions.SessionInterface attribute) \n \n       pop() (flask.ctx._AppCtxGlobals method) \n\n       \n         (flask.ctx.AppContext method) \n \n         (flask.ctx.RequestContext method) \n \n       \n       pragma (flask.Request attribute) \n \n   \n   \n       PREFERRED_URL_SCHEME (built-in variable) \n \n       preprocess_request() (flask.Flask method) \n \n       PRESERVE_CONTEXT_ON_EXCEPTION (built-in variable) \n \n       preserve_context_on_exception (flask.Flask attribute) \n \n       process_response() (flask.Flask method) \n \n       PROPAGATE_EXCEPTIONS (built-in variable) \n \n       propagate_exceptions (flask.Flask attribute) \n \n       provide_automatic_options (flask.views.View attribute) \n \n       push() (flask.ctx.AppContext method) \n\n       \n         (flask.ctx.RequestContext method) \n \n       \n       \n    Python Enhancement Proposals\n\n       \n         PEP 8 \n \n       \n   \n \n\n Q \n \n   \n       query_string (flask.Request attribute) \n \n   \n \n\n R \n \n   \n       range (flask.Request attribute) \n \n       record() (flask.Blueprint method) \n \n       record_once() (flask.Blueprint method) \n \n       redirect() (in module flask) \n \n       referrer (flask.Request attribute) \n \n       register() (flask.Blueprint method) \n\n       \n         (flask.json.tag.TaggedJSONSerializer method) \n \n       \n       register_blueprint() (flask.Flask method) \n \n       register_error_handler() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       remote_addr (flask.Request attribute) \n \n       remote_user (flask.Request attribute) \n \n       render_template() (in module flask) \n \n       render_template_string() (in module flask) \n \n       Request (class in flask) \n \n       request (in module flask) \n \n       request_class (flask.Flask attribute) \n \n   \n   \n       request_context() (flask.Flask method) \n \n       request_finished (in module flask) \n \n       request_started (in module flask) \n \n       request_tearing_down (in module flask) \n \n       RequestContext (class in flask.ctx) \n \n       Response (class in flask) \n \n       response_class (flask.Flask attribute) \n \n       \n    RFC\n\n       \n         RFC 822 \n \n         RFC 8259 ,  [1] \n \n       \n       root_path (flask.Blueprint attribute) \n\n       \n         (flask.Flask attribute) \n \n       \n       route() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       routing_exception (flask.Request attribute) \n \n       run() (flask.Flask method) \n \n       run_command (in module flask.cli) \n \n   \n \n\n S \n \n   \n       safe_join() (in module flask) \n \n       salt (flask.sessions.SecureCookieSessionInterface attribute) \n \n       save_session() (flask.Flask method) \n\n       \n         (flask.sessions.SecureCookieSessionInterface method) \n \n         (flask.sessions.SessionInterface method) \n \n       \n       scheme (flask.Request attribute) \n \n       script_root (flask.Request attribute) ,  [1] \n \n       ScriptInfo (class in flask.cli) \n \n       SECRET_KEY (built-in variable) \n \n       secret_key (flask.Flask attribute) \n \n       SecureCookieSession (class in flask.sessions) \n \n       SecureCookieSessionInterface (class in flask.sessions) \n \n       select_jinja_autoescape() (flask.Flask method) \n \n       send_file() (in module flask) \n \n       SEND_FILE_MAX_AGE_DEFAULT (built-in variable) \n \n       send_file_max_age_default (flask.Flask attribute) \n \n       send_from_directory() (in module flask) \n \n       send_static_file() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       serializer (flask.sessions.SecureCookieSessionInterface attribute) \n \n       SERVER_NAME (built-in variable) \n \n       session (class in flask) \n \n       session_class (flask.sessions.SecureCookieSessionInterface attribute) \n \n       SESSION_COOKIE_DOMAIN (built-in variable) \n \n       SESSION_COOKIE_HTTPONLY (built-in variable) \n \n       SESSION_COOKIE_NAME (built-in variable) \n \n       session_cookie_name (flask.Flask attribute) \n \n       SESSION_COOKIE_PATH (built-in variable) \n \n   \n   \n       SESSION_COOKIE_SAMESITE (built-in variable) \n \n       SESSION_COOKIE_SECURE (built-in variable) \n \n       session_interface (flask.Flask attribute) \n \n       SESSION_REFRESH_EACH_REQUEST (built-in variable) \n \n       session_transaction() (flask.testing.FlaskClient method) \n \n       SessionInterface (class in flask.sessions) \n \n       SessionMixin (class in flask.sessions) \n \n       set_cookie() (flask.Response method) \n \n       setdefault() (flask.ctx._AppCtxGlobals method) \n\n       \n         (flask.sessions.SecureCookieSession method) \n \n       \n       shell_command (in module flask.cli) \n \n       shell_context_processor() (flask.Flask method) \n \n       shell_context_processors (flask.Flask attribute) \n \n       should_ignore_error() (flask.Flask method) \n \n       should_set_cookie() (flask.sessions.SessionInterface method) \n \n       signal() (flask.signals.Namespace method) \n \n       signals.Namespace (class in flask) \n \n       signals.signals_available (in module flask) \n \n       static_folder (flask.Blueprint attribute) \n\n       \n         (flask.Flask attribute) \n \n       \n       static_url_path (flask.Blueprint attribute) \n\n       \n         (flask.Flask attribute) \n \n       \n       status (flask.Response attribute) \n \n       status_code (flask.Response attribute) \n \n       stream (flask.Request attribute) \n \n       stream_with_context() (in module flask) \n \n       striptags() (flask.Markup method) \n \n       subdomain (flask.blueprints.BlueprintSetupState attribute) \n \n   \n \n\n T \n \n   \n       tag() (flask.json.tag.JSONTag method) \n\n       \n         (flask.json.tag.TaggedJSONSerializer method) \n \n       \n       TaggedJSONSerializer (class in flask.json.tag) \n \n       teardown_app_request() (flask.Blueprint method) \n \n       teardown_appcontext() (flask.Flask method) \n \n       teardown_appcontext_funcs (flask.Flask attribute) \n \n       teardown_request() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       teardown_request_funcs (flask.Flask attribute) \n \n       template_context_processors (flask.Flask attribute) \n \n       template_filter() (flask.Flask method) \n \n       template_folder (flask.Blueprint attribute) \n\n       \n         (flask.Flask attribute) \n \n       \n       template_global() (flask.Flask method) \n \n       template_rendered (in module flask) \n \n   \n   \n       template_test() (flask.Flask method) \n \n       TEMPLATES_AUTO_RELOAD (built-in variable) \n \n       templates_auto_reload (flask.Flask attribute) \n \n       test_cli_runner() (flask.Flask method) \n \n       test_cli_runner_class (flask.Flask attribute) \n \n       test_client() (flask.Flask method) \n \n       test_client_class (flask.Flask attribute) \n \n       test_request_context() (flask.Flask method) \n \n       TESTING (built-in variable) \n \n       testing (flask.Flask attribute) \n \n       to_json() (flask.json.tag.JSONTag method) \n \n       to_python() (flask.json.tag.JSONTag method) \n \n       TRAP_BAD_REQUEST_ERRORS (built-in variable) \n \n       trap_http_exception() (flask.Flask method) \n \n       TRAP_HTTP_EXCEPTIONS (built-in variable) \n \n   \n \n\n U \n \n   \n       unescape() (flask.Markup method) \n \n       untag() (flask.json.tag.TaggedJSONSerializer method) \n \n       update_template_context() (flask.Flask method) \n \n       url (flask.Request attribute) ,  [1] \n \n       url_build_error_handlers (flask.Flask attribute) \n \n       url_charset (flask.Request attribute) \n \n       url_default_functions (flask.Flask attribute) \n \n       url_defaults (flask.blueprints.BlueprintSetupState attribute) \n \n       url_defaults() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       url_for() (in module flask) \n \n   \n   \n       url_map (flask.Flask attribute) \n \n       url_prefix (flask.blueprints.BlueprintSetupState attribute) \n \n       url_root (flask.Request attribute) ,  [1] \n \n       url_rule (flask.Request attribute) \n \n       url_rule_class (flask.Flask attribute) \n \n       url_value_preprocessor() (flask.Blueprint method) \n\n       \n         (flask.Flask method) \n \n       \n       url_value_preprocessors (flask.Flask attribute) \n \n       USE_X_SENDFILE (built-in variable) \n \n       use_x_sendfile (flask.Flask attribute) \n \n       user_agent (flask.Request attribute) \n \n   \n \n\n V \n \n   \n       values (flask.Request attribute) \n \n       View (class in flask.views) \n \n   \n   \n       view_args (flask.Request attribute) \n \n       view_functions (flask.Flask attribute) \n \n   \n \n\n W \n \n   \n       want_form_data_parsed (flask.Request attribute) \n \n   \n   \n       with_appcontext() (in module flask.cli) \n \n       wsgi_app() (flask.Flask method) \n \n   \n \n\n Y \n \n   \n       YOURAPPLICATION_SETTINGS \n \n   \n \n\n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             Navigation \n \n   Overview \n    \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/tutorial/templates/", "text": "\n   \n     \n     \n   \n     Templates \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Templates \u00b6 \n You\u2019ve written the authentication views for your application, but if\nyou\u2019re running the server and try to go to any of the URLs, you\u2019ll see a\n TemplateNotFound  error. That\u2019s because the views are calling\n render_template() , but you haven\u2019t written the templates yet.\nThe template files will be stored in the  templates  directory inside\nthe  flaskr  package. \n Templates are files that contain static data as well as placeholders\nfor dynamic data. A template is rendered with specific data to produce a\nfinal document. Flask uses the  Jinja  template library to render\ntemplates. \n In your application, you will use templates to render  HTML  which\nwill display in the user\u2019s browser. In Flask, Jinja is configured to\n autoescape  any data that is rendered in HTML templates. This means\nthat it\u2019s safe to render user input; any characters they\u2019ve entered that\ncould mess with the HTML, such as  <  and  >  will be  escaped  with\n safe  values that look the same in the browser but don\u2019t cause unwanted\neffects. \n Jinja looks and behaves mostly like Python. Special delimiters are used\nto distinguish Jinja syntax from the static data in the template.\nAnything between  {{  and  }}  is an expression that will be output\nto the final document.  {%  and  %}  denotes a control flow\nstatement like  if  and  for . Unlike Python, blocks are denoted\nby start and end tags rather than indentation since static text within\na block could change indentation. \n \n The Base Layout \u00b6 \n Each page in the application will have the same basic layout around a\ndifferent body. Instead of writing the entire HTML structure in each\ntemplate, each template will  extend  a base template and override\nspecific sections. \n \n flaskr/templates/base.html \u00b6 \n <!doctype html> \n < title > {%   block   title   %}{%   endblock   %}  - Flaskr </ title > \n < link   rel = \"stylesheet\"   href = \" {{   url_for ( 'static' ,   filename = 'style.css' )   }} \" > \n < nav > \n   < h1 > Flaskr </ h1 > \n   < ul > \n     {%   if   g.user   %} \n       < li >< span > {{   g.user [ 'username' ]   }} </ span > \n       < li >< a   href = \" {{   url_for ( 'auth.logout' )   }} \" > Log Out </ a > \n     {%   else   %} \n       < li >< a   href = \" {{   url_for ( 'auth.register' )   }} \" > Register </ a > \n       < li >< a   href = \" {{   url_for ( 'auth.login' )   }} \" > Log In </ a > \n     {%   endif   %} \n   </ ul > \n </ nav > \n < section   class = \"content\" > \n   < header > \n     {%   block   header   %}{%   endblock   %} \n   </ header > \n   {%   for   message   in   get_flashed_messages ()   %} \n     < div   class = \"flash\" > {{   message   }} </ div > \n   {%   endfor   %} \n   {%   block   content   %}{%   endblock   %} \n </ section > \n \n \n \n g  is automatically available in templates. Based on if\n g.user  is set (from  load_logged_in_user ), either the username\nand a log out link are displayed, otherwise links to register and log in\nare displayed.  url_for()  is also automatically available, and is\nused to generate URLs to views instead of writing them out manually. \n After the page title, and before the content, the template loops over\neach message returned by  get_flashed_messages() . You used\n flash()  in the views to show error messages, and this is the code\nthat will display them. \n There are three blocks defined here that will be overridden in the other\ntemplates: \n \n {%   block   title   %}  will change the title displayed in the\nbrowser\u2019s tab and window title. \n {%   block   header   %}  is similar to  title  but will change the\ntitle displayed on the page. \n {%   block   content   %}  is where the content of each page goes, such\nas the login form or a blog post. \n \n The base template is directly in the  templates  directory. To keep\nthe others organized, the templates for a blueprint will be placed in a\ndirectory with the same name as the blueprint. \n \n \n Register \u00b6 \n \n flaskr/templates/auth/register.html \u00b6 \n {%   extends   'base.html'   %} \n\n {%   block   header   %} \n   < h1 > {%   block   title   %} Register {%   endblock   %} </ h1 > \n {%   endblock   %} \n\n {%   block   content   %} \n   < form   method = \"post\" > \n     < label   for = \"username\" > Username </ label > \n     < input   name = \"username\"   id = \"username\"   required > \n     < label   for = \"password\" > Password </ label > \n     < input   type = \"password\"   name = \"password\"   id = \"password\"   required > \n     < input   type = \"submit\"   value = \"Register\" > \n   </ form > \n {%   endblock   %} \n \n \n \n {%   extends   'base.html'   %}  tells Jinja that this template should\nreplace the blocks from the base template. All the rendered content must\nappear inside  {%   block   %}  tags that override blocks from the base\ntemplate. \n A useful pattern used here is to place  {%   block   title   %}  inside\n {%   block   header   %} . This will set the title block and then output\nthe value of it into the header block, so that both the window and page\nshare the same title without writing it twice. \n The  input  tags are using the  required  attribute here. This tells\nthe browser not to submit the form until those fields are filled in. If\nthe user is using an older browser that doesn\u2019t support that attribute,\nor if they are using something besides a browser to make requests, you\nstill want to validate the data in the Flask view. It\u2019s important to\nalways fully validate the data on the server, even if the client does\nsome validation as well. \n \n \n Log In \u00b6 \n This is identical to the register template except for the title and\nsubmit button. \n \n flaskr/templates/auth/login.html \u00b6 \n {%   extends   'base.html'   %} \n\n {%   block   header   %} \n   < h1 > {%   block   title   %} Log In {%   endblock   %} </ h1 > \n {%   endblock   %} \n\n {%   block   content   %} \n   < form   method = \"post\" > \n     < label   for = \"username\" > Username </ label > \n     < input   name = \"username\"   id = \"username\"   required > \n     < label   for = \"password\" > Password </ label > \n     < input   type = \"password\"   name = \"password\"   id = \"password\"   required > \n     < input   type = \"submit\"   value = \"Log In\" > \n   </ form > \n {%   endblock   %} \n \n \n \n \n \n Register A User \u00b6 \n Now that the authentication templates are written, you can register a\nuser. Make sure the server is still running ( flask   run  if it\u2019s not),\nthen go to  http://127.0.0.1:5000/auth/register . \n Try clicking the \u201cRegister\u201d button without filling out the form and see\nthat the browser shows an error message. Try removing the  required \nattributes from the  register.html  template and click \u201cRegister\u201d\nagain. Instead of the browser showing an error, the page will reload and\nthe error from  flash()  in the view will be shown. \n Fill out a username and password and you\u2019ll be redirected to the login\npage. Try entering an incorrect username, or the correct username and\nincorrect password. If you log in you\u2019ll get an error because there\u2019s\nno  index  view to redirect to yet. \n Continue to  Static Files . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Templates \n The Base Layout \n Register \n Log In \n Register A User \n \n \n \n Navigation \n \n   Overview \n     \n       Tutorial \n         \n           Previous:  Blueprints and Views \n           Next:  Static Files \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/tutorial/install/", "text": "\n   \n     \n     \n   \n     Make the Project Installable \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Make the Project Installable \u00b6 \n Making your project installable means that you can build a\n distribution  file and install that in another environment, just like\nyou installed Flask in your project\u2019s environment. This makes deploying\nyour project the same as installing any other library, so you\u2019re using\nall the standard Python tools to manage everything. \n Installing also comes with other benefits that might not be obvious from\nthe tutorial or as a new Python user, including: \n \n Currently, Python and Flask understand how to use the  flaskr \npackage only because you\u2019re running from your project\u2019s directory.\nInstalling means you can import it no matter where you run from. \n You can manage your project\u2019s dependencies just like other packages\ndo, so  pip   install   yourproject.whl  installs them. \n Test tools can isolate your test environment from your development\nenvironment. \n \n \n Note \n This is being introduced late in the tutorial, but in your future\nprojects you should always start with this. \n \n \n Describe the Project \u00b6 \n The  setup.py  file describes your project and the files that belong\nto it. \n \n setup.py \u00b6 \n from   setuptools   import   find_packages ,   setup \n\n setup ( \n     name = 'flaskr' , \n     version = '1.0.0' , \n     packages = find_packages (), \n     include_package_data = True , \n     zip_safe = False , \n     install_requires = [ \n         'flask' , \n     ], \n ) \n \n \n \n packages  tells Python what package directories (and the Python files\nthey contain) to include.  find_packages()  finds these directories\nautomatically so you don\u2019t have to type them out. To include other\nfiles, such as the static and templates directories,\n include_package_data  is set. Python needs another file named\n MANIFEST.in  to tell what this other data is. \n \n MANIFEST.in \u00b6 \n include flaskr/schema.sql\ngraft flaskr/static\ngraft flaskr/templates\nglobal-exclude *.pyc\n \n \n \n This tells Python to copy everything in the  static  and  templates \ndirectories, and the  schema.sql  file, but to exclude all bytecode\nfiles. \n See the  official packaging guide  for another explanation of the files\nand options used. \n \n \n Install the Project \u00b6 \n Use  pip  to install your project in the virtual environment. \n pip install -e .\n \n \n This tells pip to find  setup.py  in the current directory and install\nit in  editable  or  development  mode. Editable mode means that as you\nmake changes to your local code, you\u2019ll only need to re-install if you\nchange the metadata about the project, such as its dependencies. \n You can observe that the project is now installed with  pip   list . \n pip list\n\nPackage        Version   Location\n-------------- --------- ----------------------------------\nclick          6.7\nFlask          1.0\nflaskr         1.0.0     /home/user/Projects/flask-tutorial\nitsdangerous   0.24\nJinja2         2.10\nMarkupSafe     1.0\npip            9.0.3\nsetuptools     39.0.1\nWerkzeug       0.14.1\nwheel          0.30.0\n \n \n Nothing changes from how you\u2019ve been running your project so far.\n FLASK_APP  is still set to  flaskr  and  flask   run  still runs\nthe application. \n Continue to  Test Coverage . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Make the Project Installable \n Describe the Project \n Install the Project \n \n \n \n Navigation \n \n   Overview \n     \n       Tutorial \n         \n           Previous:  Blog Blueprint \n           Next:  Test Coverage \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/tutorial/blog/", "text": "\n   \n     \n     \n   \n     Blog Blueprint \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Blog Blueprint \u00b6 \n You\u2019ll use the same techniques you learned about when writing the\nauthentication blueprint to write the blog blueprint. The blog should\nlist all posts, allow logged in users to create posts, and allow the\nauthor of a post to edit or delete it. \n As you implement each view, keep the development server running. As you\nsave your changes, try going to the URL in your browser and testing them\nout. \n \n The Blueprint \u00b6 \n Define the blueprint and register it in the application factory. \n \n flaskr/blog.py \u00b6 \n from   flask   import   ( \n     Blueprint ,   flash ,   g ,   redirect ,   render_template ,   request ,   url_for \n ) \n from   werkzeug.exceptions   import   abort \n\n from   flaskr.auth   import   login_required \n from   flaskr.db   import   get_db \n\n bp   =   Blueprint ( 'blog' ,   __name__ ) \n \n \n \n Import and register the blueprint from the factory using\n app.register_blueprint() . Place the\nnew code at the end of the factory function before returning the app. \n \n flaskr/__init__.py \u00b6 \n def   create_app (): \n     app   =   ... \n     # existing code omitted \n\n     from   .   import   blog \n     app . register_blueprint ( blog . bp ) \n     app . add_url_rule ( '/' ,   endpoint = 'index' ) \n\n     return   app \n \n \n \n Unlike the auth blueprint, the blog blueprint does not have a\n url_prefix . So the  index  view will be at  / , the  create \nview at  /create , and so on. The blog is the main feature of Flaskr,\nso it makes sense that the blog index will be the main index. \n However, the endpoint for the  index  view defined below will be\n blog.index . Some of the authentication views referred to a plain\n index  endpoint.  app.add_url_rule() \nassociates the endpoint name  'index'  with the  /  url so that\n url_for('index')  or  url_for('blog.index')  will both work,\ngenerating the same  /  URL either way. \n In another application you might give the blog blueprint a\n url_prefix  and define a separate  index  view in the application\nfactory, similar to the  hello  view. Then the  index  and\n blog.index  endpoints and URLs would be different. \n \n \n Index \u00b6 \n The index will show all of the posts, most recent first. A  JOIN  is\nused so that the author information from the  user  table is\navailable in the result. \n \n flaskr/blog.py \u00b6 \n @bp.route ( '/' ) \n def   index (): \n     db   =   get_db () \n     posts   =   db . execute ( \n         'SELECT p.id, title, body, created, author_id, username' \n         ' FROM post p JOIN user u ON p.author_id = u.id' \n         ' ORDER BY created DESC' \n     ) . fetchall () \n     return   render_template ( 'blog/index.html' ,   posts = posts ) \n \n \n \n \n flaskr/templates/blog/index.html \u00b6 \n {%   extends   'base.html'   %} \n\n {%   block   header   %} \n   < h1 > {%   block   title   %} Posts {%   endblock   %} </ h1 > \n   {%   if   g.user   %} \n     < a   class = \"action\"   href = \" {{   url_for ( 'blog.create' )   }} \" > New </ a > \n   {%   endif   %} \n {%   endblock   %} \n\n {%   block   content   %} \n   {%   for   post   in   posts   %} \n     < article   class = \"post\" > \n       < header > \n         < div > \n           < h1 > {{   post [ 'title' ]   }} </ h1 > \n           < div   class = \"about\" > by  {{   post [ 'username' ]   }}  on  {{   post [ 'created' ] .strftime ( '%Y-%m-%d' )   }} </ div > \n         </ div > \n         {%   if   g.user [ 'id' ]   ==   post [ 'author_id' ]   %} \n           < a   class = \"action\"   href = \" {{   url_for ( 'blog.update' ,   id = post [ 'id' ])   }} \" > Edit </ a > \n         {%   endif   %} \n       </ header > \n       < p   class = \"body\" > {{   post [ 'body' ]   }} </ p > \n     </ article > \n     {%   if   not   loop .last   %} \n       < hr > \n     {%   endif   %} \n   {%   endfor   %} \n {%   endblock   %} \n \n \n \n When a user is logged in, the  header  block adds a link to the\n create  view. When the user is the author of a post, they\u2019ll see an\n\u201cEdit\u201d link to the  update  view for that post.  loop.last  is a\nspecial variable available inside  Jinja for loops . It\u2019s used to\ndisplay a line after each post except the last one, to visually separate\nthem. \n \n \n Create \u00b6 \n The  create  view works the same as the auth  register  view. Either\nthe form is displayed, or the posted data is validated and the post is\nadded to the database or an error is shown. \n The  login_required  decorator you wrote earlier is used on the blog\nviews. A user must be logged in to visit these views, otherwise they\nwill be redirected to the login page. \n \n flaskr/blog.py \u00b6 \n @bp.route ( '/create' ,   methods = ( 'GET' ,   'POST' )) \n @login_required \n def   create (): \n     if   request . method   ==   'POST' : \n         title   =   request . form [ 'title' ] \n         body   =   request . form [ 'body' ] \n         error   =   None \n\n         if   not   title : \n             error   =   'Title is required.' \n\n         if   error   is   not   None : \n             flash ( error ) \n         else : \n             db   =   get_db () \n             db . execute ( \n                 'INSERT INTO post (title, body, author_id)' \n                 ' VALUES (?, ?, ?)' , \n                 ( title ,   body ,   g . user [ 'id' ]) \n             ) \n             db . commit () \n             return   redirect ( url_for ( 'blog.index' )) \n\n     return   render_template ( 'blog/create.html' ) \n \n \n \n \n flaskr/templates/blog/create.html \u00b6 \n {%   extends   'base.html'   %} \n\n {%   block   header   %} \n   < h1 > {%   block   title   %} New Post {%   endblock   %} </ h1 > \n {%   endblock   %} \n\n {%   block   content   %} \n   < form   method = \"post\" > \n     < label   for = \"title\" > Title </ label > \n     < input   name = \"title\"   id = \"title\"   value = \" {{   request.form [ 'title' ]   }} \"   required > \n     < label   for = \"body\" > Body </ label > \n     < textarea   name = \"body\"   id = \"body\" > {{   request.form [ 'body' ]   }} </ textarea > \n     < input   type = \"submit\"   value = \"Save\" > \n   </ form > \n {%   endblock   %} \n \n \n \n \n \n Update \u00b6 \n Both the  update  and  delete  views will need to fetch a  post \nby  id  and check if the author matches the logged in user. To avoid\nduplicating code, you can write a function to get the  post  and call\nit from each view. \n \n flaskr/blog.py \u00b6 \n def   get_post ( id ,   check_author = True ): \n     post   =   get_db () . execute ( \n         'SELECT p.id, title, body, created, author_id, username' \n         ' FROM post p JOIN user u ON p.author_id = u.id' \n         ' WHERE p.id = ?' , \n         ( id ,) \n     ) . fetchone () \n\n     if   post   is   None : \n         abort ( 404 ,   \"Post id {0} doesn't exist.\" . format ( id )) \n\n     if   check_author   and   post [ 'author_id' ]   !=   g . user [ 'id' ]: \n         abort ( 403 ) \n\n     return   post \n \n \n \n abort()  will raise a special exception that returns an HTTP status\ncode. It takes an optional message to show with the error, otherwise a\ndefault message is used.  404  means \u201cNot Found\u201d, and  403  means\n\u201cForbidden\u201d. ( 401  means \u201cUnauthorized\u201d, but you redirect to the\nlogin page instead of returning that status.) \n The  check_author  argument is defined so that the function can be\nused to get a  post  without checking the author. This would be useful\nif you wrote a view to show an individual post on a page, where the user\ndoesn\u2019t matter because they\u2019re not modifying the post. \n \n flaskr/blog.py \u00b6 \n @bp.route ( '/<int:id>/update' ,   methods = ( 'GET' ,   'POST' )) \n @login_required \n def   update ( id ): \n     post   =   get_post ( id ) \n\n     if   request . method   ==   'POST' : \n         title   =   request . form [ 'title' ] \n         body   =   request . form [ 'body' ] \n         error   =   None \n\n         if   not   title : \n             error   =   'Title is required.' \n\n         if   error   is   not   None : \n             flash ( error ) \n         else : \n             db   =   get_db () \n             db . execute ( \n                 'UPDATE post SET title = ?, body = ?' \n                 ' WHERE id = ?' , \n                 ( title ,   body ,   id ) \n             ) \n             db . commit () \n             return   redirect ( url_for ( 'blog.index' )) \n\n     return   render_template ( 'blog/update.html' ,   post = post ) \n \n \n \n Unlike the views you\u2019ve written so far, the  update  function takes\nan argument,  id . That corresponds to the  <int:id>  in the route.\nA real URL will look like  /1/update . Flask will capture the  1 ,\nensure it\u2019s an  int , and pass it as the  id  argument. If you\ndon\u2019t specify  int:  and instead do  <id> , it will be a string.\nTo generate a URL to the update page,  url_for()  needs to be passed\nthe  id  so it knows what to fill in:\n url_for('blog.update',   id=post['id']) . This is also in the\n index.html  file above. \n The  create  and  update  views look very similar. The main\ndifference is that the  update  view uses a  post  object and an\n UPDATE  query instead of an  INSERT . With some clever refactoring,\nyou could use one view and template for both actions, but for the\ntutorial it\u2019s clearer to keep them separate. \n \n flaskr/templates/blog/update.html \u00b6 \n {%   extends   'base.html'   %} \n\n {%   block   header   %} \n   < h1 > {%   block   title   %} Edit \" {{   post [ 'title' ]   }} \" {%   endblock   %} </ h1 > \n {%   endblock   %} \n\n {%   block   content   %} \n   < form   method = \"post\" > \n     < label   for = \"title\" > Title </ label > \n     < input   name = \"title\"   id = \"title\" \n       value = \" {{   request.form [ 'title' ]   or   post [ 'title' ]   }} \"   required > \n     < label   for = \"body\" > Body </ label > \n     < textarea   name = \"body\"   id = \"body\" > {{   request.form [ 'body' ]   or   post [ 'body' ]   }} </ textarea > \n     < input   type = \"submit\"   value = \"Save\" > \n   </ form > \n   < hr > \n   < form   action = \" {{   url_for ( 'blog.delete' ,   id = post [ 'id' ])   }} \"   method = \"post\" > \n     < input   class = \"danger\"   type = \"submit\"   value = \"Delete\"   onclick = \"return confirm('Are you sure?');\" > \n   </ form > \n {%   endblock   %} \n \n \n \n This template has two forms. The first posts the edited data to the\ncurrent page ( /<id>/update ). The other form contains only a button\nand specifies an  action  attribute that posts to the delete view\ninstead. The button uses some JavaScript to show a confirmation dialog\nbefore submitting. \n The pattern  {{   request.form['title']   or   post['title']   }}  is used to\nchoose what data appears in the form. When the form hasn\u2019t been\nsubmitted, the original  post  data appears, but if invalid form data\nwas posted you want to display that so the user can fix the error, so\n request.form  is used instead.  request  is another variable\nthat\u2019s automatically available in templates. \n \n \n Delete \u00b6 \n The delete view doesn\u2019t have its own template, the delete button is part\nof  update.html  and posts to the  /<id>/delete  URL. Since there\nis no template, it will only handle the  POST  method then redirect\nto the  index  view. \n \n flaskr/blog.py \u00b6 \n @bp.route ( '/<int:id>/delete' ,   methods = ( 'POST' ,)) \n @login_required \n def   delete ( id ): \n     get_post ( id ) \n     db   =   get_db () \n     db . execute ( 'DELETE FROM post WHERE id = ?' ,   ( id ,)) \n     db . commit () \n     return   redirect ( url_for ( 'blog.index' )) \n \n \n \n Congratulations, you\u2019ve now finished writing your application! Take some\ntime to try out everything in the browser. However, there\u2019s still more\nto do before the project is complete. \n Continue to  Make the Project Installable . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Blog Blueprint \n The Blueprint \n Index \n Create \n Update \n Delete \n \n \n \n Navigation \n \n   Overview \n     \n       Tutorial \n         \n           Previous:  Static Files \n           Next:  Make the Project Installable \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/templating/", "text": "\n   \n     \n     \n   \n     Templates \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Templates \u00b6 \n Flask leverages Jinja2 as template engine.  You are obviously free to use\na different template engine, but you still have to install Jinja2 to run\nFlask itself.  This requirement is necessary to enable rich extensions.\nAn extension can depend on Jinja2 being present. \n This section only gives a very quick introduction into how Jinja2\nis integrated into Flask.  If you want information on the template\nengine\u2019s syntax itself, head over to the official  Jinja2 Template\nDocumentation  for\nmore information. \n \n Jinja Setup \u00b6 \n Unless customized, Jinja2 is configured by Flask as follows: \n \n autoescaping is enabled for all templates ending in  .html ,\n .htm ,  .xml  as well as  .xhtml  when using\n render_template() . \n autoescaping is enabled for all strings when using\n render_template_string() . \n a template has the ability to opt in/out autoescaping with the\n {%   autoescape   %}  tag. \n Flask inserts a couple of global functions and helpers into the\nJinja2 context, additionally to the values that are present by\ndefault. \n \n \n \n Standard Context \u00b6 \n The following global variables are available within Jinja2 templates\nby default: \n \n \n config \n The current configuration object ( flask.config ) \n \n Changelog \n Changed in version 0.10:  This is now always available, even in imported templates. \n \n \n New in version 0.6. \n \n \n\n \n \n request \n The current request object ( flask.request ).  This variable is\nunavailable if the template was rendered without an active request\ncontext. \n \n\n \n \n session \n The current session object ( flask.session ).  This variable\nis unavailable if the template was rendered without an active request\ncontext. \n \n\n \n \n g \n The request-bound object for global variables ( flask.g ).  This\nvariable is unavailable if the template was rendered without an active\nrequest context. \n \n\n \n \n url_for ( ) \n The  flask.url_for()  function. \n \n\n \n \n get_flashed_messages ( ) \n The  flask.get_flashed_messages()  function. \n \n\n \n The Jinja Context Behavior \n These variables are added to the context of variables, they are not\nglobal variables.  The difference is that by default these will not\nshow up in the context of imported templates.  This is partially caused\nby performance considerations, partially to keep things explicit. \n What does this mean for you?  If you have a macro you want to import,\nthat needs to access the request object you have two possibilities: \n \n you explicitly pass the request to the macro as parameter, or\nthe attribute of the request object you are interested in. \n you import the macro \u201cwith context\u201d. \n \n Importing with context looks like this: \n {%   from   '_helpers.html'   import   my_macro   with context   %} \n \n \n \n \n \n Standard Filters \u00b6 \n These filters are available in Jinja2 additionally to the filters provided\nby Jinja2 itself: \n \n \n tojson ( ) \n This function converts the given object into JSON representation.  This\nis for example very helpful if you try to generate JavaScript on the\nfly. \n Note that inside  script  tags no escaping must take place, so make\nsure to disable escaping with  |safe  before Flask 0.10 if you intend\nto use it inside  script  tags: \n < script   type = text/javascript > \n     doSomethingWith ( {{   user.username | tojson | safe   }} ); \n </ script > \n \n \n \n\n \n \n Controlling Autoescaping \u00b6 \n Autoescaping is the concept of automatically escaping special characters\nfor you.  Special characters in the sense of HTML (or XML, and thus XHTML)\nare  & ,  > ,  < ,  \"  as well as  ' .  Because these characters\ncarry specific meanings in documents on their own you have to replace them\nby so called \u201centities\u201d if you want to use them for text.  Not doing so\nwould not only cause user frustration by the inability to use these\ncharacters in text, but can also lead to security problems.  (see\n Cross-Site Scripting (XSS) ) \n Sometimes however you will need to disable autoescaping in templates.\nThis can be the case if you want to explicitly inject HTML into pages, for\nexample if they come from a system that generates secure HTML like a\nmarkdown to HTML converter. \n There are three ways to accomplish that: \n \n In the Python code, wrap the HTML string in a  Markup \nobject before passing it to the template.  This is in general the\nrecommended way. \n Inside the template, use the  |safe  filter to explicitly mark a\nstring as safe HTML ( {{   myvariable|safe   }} ) \n Temporarily disable the autoescape system altogether. \n \n To disable the autoescape system in templates, you can use the  {% \n autoescape   %}  block: \n {%   autoescape   false   %} \n     < p > autoescaping is disabled here\n     < p > {{   will_not_be_escaped   }} \n {%   endautoescape   %} \n \n \n Whenever you do this, please be very cautious about the variables you are\nusing in this block. \n \n \n Registering Filters \u00b6 \n If you want to register your own filters in Jinja2 you have two ways to do\nthat.  You can either put them by hand into the\n jinja_env  of the application or use the\n template_filter()  decorator. \n The two following examples work the same and both reverse an object: \n @app . template_filter ( 'reverse' ) \n def   reverse_filter ( s ): \n     return   s [:: - 1 ] \n\n def   reverse_filter ( s ): \n     return   s [:: - 1 ] \n app . jinja_env . filters [ 'reverse' ]   =   reverse_filter \n \n \n In case of the decorator the argument is optional if you want to use the\nfunction name as name of the filter.  Once registered, you can use the filter\nin your templates in the same way as Jinja2\u2019s builtin filters, for example if\nyou have a Python list in context called  mylist : \n { %   for   x   in   mylist   |   reverse   % } \n { %   endfor   % } \n \n \n \n \n Context Processors \u00b6 \n To inject new variables automatically into the context of a template,\ncontext processors exist in Flask.  Context processors run before the\ntemplate is rendered and have the ability to inject new values into the\ntemplate context.  A context processor is a function that returns a\ndictionary.  The keys and values of this dictionary are then merged with\nthe template context, for all templates in the app: \n @app . context_processor \n def   inject_user (): \n     return   dict ( user = g . user ) \n \n \n The context processor above makes a variable called  user  available in\nthe template with the value of  g.user .  This example is not very\ninteresting because  g  is available in templates anyways, but it gives an\nidea how this works. \n Variables are not limited to values; a context processor can also make\nfunctions available to templates (since Python allows passing around\nfunctions): \n @app . context_processor \n def   utility_processor (): \n     def   format_price ( amount ,   currency = u '\u20ac' ): \n         return   u ' {0:.2f}{1} ' . format ( amount ,   currency ) \n     return   dict ( format_price = format_price ) \n \n \n The context processor above makes the  format_price  function available to all\ntemplates: \n {{   format_price ( 0.33 )   }} \n \n \n You could also build  format_price  as a template filter (see\n Registering Filters ), but this demonstrates how to pass functions in a\ncontext processor. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Templates \n Jinja Setup \n Standard Context \n Standard Filters \n Controlling Autoescaping \n Registering Filters \n Context Processors \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Keep Developing! \n           Next:  Testing Flask Applications \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/tutorial/tests/", "text": "\n   \n     \n     \n   \n     Test Coverage \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Test Coverage \u00b6 \n Writing unit tests for your application lets you check that the code\nyou wrote works the way you expect. Flask provides a test client that\nsimulates requests to the application and returns the response data. \n You should test as much of your code as possible. Code in functions only\nruns when the function is called, and code in branches, such as  if \nblocks, only runs when the condition is met. You want to make sure that\neach function is tested with data that covers each branch. \n The closer you get to 100% coverage, the more comfortable you can be\nthat making a change won\u2019t unexpectedly change other behavior. However,\n100% coverage doesn\u2019t guarantee that your application doesn\u2019t have bugs.\nIn particular, it doesn\u2019t test how the user interacts with the\napplication in the browser. Despite this, test coverage is an important\ntool to use during development. \n \n Note \n This is being introduced late in the tutorial, but in your future\nprojects you should test as you develop. \n \n You\u2019ll use  pytest  and  coverage  to test and measure your code.\nInstall them both: \n pip install pytest coverage\n \n \n \n Setup and Fixtures \u00b6 \n The test code is located in the  tests  directory. This directory is\n next to  the  flaskr  package, not inside it. The\n tests/conftest.py  file contains setup functions called  fixtures \nthat each test will use. Tests are in Python modules that start with\n test_ , and each test function in those modules also starts with\n test_ . \n Each test will create a new temporary database file and populate some\ndata that will be used in the tests. Write a SQL file to insert that\ndata. \n \n tests/data.sql \u00b6 \n INSERT   INTO   user   ( username ,   password ) \n VALUES \n   ( 'test' ,   'pbkdf2:sha256:50000$TCI4GzcX$0de171a4f4dac32e3364c7ddc7c14f3e2fa61f2d17574483f7ffbb431b4acb2f' ), \n   ( 'other' ,   'pbkdf2:sha256:50000$kJPKsz6N$d2d4784f1b030a9761f5ccaeeaca413f27f2ecb76d6168407af962ddce849f79' ); \n\n INSERT   INTO   post   ( title ,   body ,   author_id ,   created ) \n VALUES \n   ( 'test title' ,   'test'   ||   x '0a'   ||   'body' ,   1 ,   '2018-01-01 00:00:00' ); \n \n \n \n The  app  fixture will call the factory and pass  test_config  to\nconfigure the application and database for testing instead of using your\nlocal development configuration. \n \n tests/conftest.py \u00b6 \n import   os \n import   tempfile \n\n import   pytest \n from   flaskr   import   create_app \n from   flaskr.db   import   get_db ,   init_db \n\n with   open ( os . path . join ( os . path . dirname ( __file__ ),   'data.sql' ),   'rb' )   as   f : \n     _data_sql   =   f . read () . decode ( 'utf8' ) \n\n\n @pytest.fixture \n def   app (): \n     db_fd ,   db_path   =   tempfile . mkstemp () \n\n     app   =   create_app ({ \n         'TESTING' :   True , \n         'DATABASE' :   db_path , \n     }) \n\n     with   app . app_context (): \n         init_db () \n         get_db () . executescript ( _data_sql ) \n\n     yield   app \n\n     os . close ( db_fd ) \n     os . unlink ( db_path ) \n\n\n @pytest.fixture \n def   client ( app ): \n     return   app . test_client () \n\n\n @pytest.fixture \n def   runner ( app ): \n     return   app . test_cli_runner () \n \n \n \n tempfile.mkstemp()  creates and opens a temporary file, returning\nthe file object and the path to it. The  DATABASE  path is\noverridden so it points to this temporary path instead of the instance\nfolder. After setting the path, the database tables are created and the\ntest data is inserted. After the test is over, the temporary file is\nclosed and removed. \n TESTING  tells Flask that the app is in test mode. Flask changes\nsome internal behavior so it\u2019s easier to test, and other extensions can\nalso use the flag to make testing them easier. \n The  client  fixture calls\n app.test_client()  with the application\nobject created by the  app  fixture. Tests will use the client to make\nrequests to the application without running the server. \n The  runner  fixture is similar to  client .\n app.test_cli_runner()  creates a runner\nthat can call the Click commands registered with the application. \n Pytest uses fixtures by matching their function names with the names\nof arguments in the test functions. For example, the  test_hello \nfunction you\u2019ll write next takes a  client  argument. Pytest matches\nthat with the  client  fixture function, calls it, and passes the\nreturned value to the test function. \n \n \n Factory \u00b6 \n There\u2019s not much to test about the factory itself. Most of the code will\nbe executed for each test already, so if something fails the other tests\nwill notice. \n The only behavior that can change is passing test config. If config is\nnot passed, there should be some default configuration, otherwise the\nconfiguration should be overridden. \n \n tests/test_factory.py \u00b6 \n from   flaskr   import   create_app \n\n\n def   test_config (): \n     assert   not   create_app () . testing \n     assert   create_app ({ 'TESTING' :   True }) . testing \n\n\n def   test_hello ( client ): \n     response   =   client . get ( '/hello' ) \n     assert   response . data   ==   b 'Hello, World!' \n \n \n \n You added the  hello  route as an example when writing the factory at\nthe beginning of the tutorial. It returns \u201cHello, World!\u201d, so the test\nchecks that the response data matches. \n \n \n Database \u00b6 \n Within an application context,  get_db  should return the same\nconnection each time it\u2019s called. After the context, the connection\nshould be closed. \n \n tests/test_db.py \u00b6 \n import   sqlite3 \n\n import   pytest \n from   flaskr.db   import   get_db \n\n\n def   test_get_close_db ( app ): \n     with   app . app_context (): \n         db   =   get_db () \n         assert   db   is   get_db () \n\n     with   pytest . raises ( sqlite3 . ProgrammingError )   as   e : \n         db . execute ( 'SELECT 1' ) \n\n     assert   'closed'   in   str ( e ) \n \n \n \n The  init-db  command should call the  init_db  function and output\na message. \n \n tests/test_db.py \u00b6 \n def   test_init_db_command ( runner ,   monkeypatch ): \n     class   Recorder ( object ): \n         called   =   False \n\n     def   fake_init_db (): \n         Recorder . called   =   True \n\n     monkeypatch . setattr ( 'flaskr.db.init_db' ,   fake_init_db ) \n     result   =   runner . invoke ( args = [ 'init-db' ]) \n     assert   'Initialized'   in   result . output \n     assert   Recorder . called \n \n \n \n This test uses Pytest\u2019s  monkeypatch  fixture to replace the\n init_db  function with one that records that it\u2019s been called. The\n runner  fixture you wrote above is used to call the  init-db \ncommand by name. \n \n \n Authentication \u00b6 \n For most of the views, a user needs to be logged in. The easiest way to\ndo this in tests is to make a  POST  request to the  login  view\nwith the client. Rather than writing that out every time, you can write\na class with methods to do that, and use a fixture to pass it the client\nfor each test. \n \n tests/conftest.py \u00b6 \n class   AuthActions ( object ): \n     def   __init__ ( self ,   client ): \n         self . _client   =   client \n\n     def   login ( self ,   username = 'test' ,   password = 'test' ): \n         return   self . _client . post ( \n             '/auth/login' , \n             data = { 'username' :   username ,   'password' :   password } \n         ) \n\n     def   logout ( self ): \n         return   self . _client . get ( '/auth/logout' ) \n\n\n @pytest.fixture \n def   auth ( client ): \n     return   AuthActions ( client ) \n \n \n \n With the  auth  fixture, you can call  auth.login()  in a test to\nlog in as the  test  user, which was inserted as part of the test\ndata in the  app  fixture. \n The  register  view should render successfully on  GET . On  POST \nwith valid form data, it should redirect to the login URL and the user\u2019s\ndata should be in the database. Invalid data should display error\nmessages. \n \n tests/test_auth.py \u00b6 \n import   pytest \n from   flask   import   g ,   session \n from   flaskr.db   import   get_db \n\n\n def   test_register ( client ,   app ): \n     assert   client . get ( '/auth/register' ) . status_code   ==   200 \n     response   =   client . post ( \n         '/auth/register' ,   data = { 'username' :   'a' ,   'password' :   'a' } \n     ) \n     assert   'http://localhost/auth/login'   ==   response . headers [ 'Location' ] \n\n     with   app . app_context (): \n         assert   get_db () . execute ( \n             \"select * from user where username = 'a'\" , \n         ) . fetchone ()   is   not   None \n\n\n @pytest.mark.parametrize (( 'username' ,   'password' ,   'message' ),   ( \n     ( '' ,   '' ,   b 'Username is required.' ), \n     ( 'a' ,   '' ,   b 'Password is required.' ), \n     ( 'test' ,   'test' ,   b 'already registered' ), \n )) \n def   test_register_validate_input ( client ,   username ,   password ,   message ): \n     response   =   client . post ( \n         '/auth/register' , \n         data = { 'username' :   username ,   'password' :   password } \n     ) \n     assert   message   in   response . data \n \n \n \n client.get()  makes a  GET  request\nand returns the  Response  object returned by Flask. Similarly,\n client.post()  makes a  POST \nrequest, converting the  data  dict into form data. \n To test that the page renders successfully, a simple request is made and\nchecked for a  200   OK   status_code . If\nrendering failed, Flask would return a  500   Internal   Server   Error \ncode. \n headers  will have a  Location  header with the login\nURL when the register view redirects to the login view. \n data  contains the body of the response as bytes. If\nyou expect a certain value to render on the page, check that it\u2019s in\n data . Bytes must be compared to bytes. If you want to compare\nUnicode text, use  get_data(as_text=True) \ninstead. \n pytest.mark.parametrize  tells Pytest to run the same test function\nwith different arguments. You use it here to test different invalid\ninput and error messages without writing the same code three times. \n The tests for the  login  view are very similar to those for\n register . Rather than testing the data in the database,\n session  should have  user_id  set after logging in. \n \n tests/test_auth.py \u00b6 \n def   test_login ( client ,   auth ): \n     assert   client . get ( '/auth/login' ) . status_code   ==   200 \n     response   =   auth . login () \n     assert   response . headers [ 'Location' ]   ==   'http://localhost/' \n\n     with   client : \n         client . get ( '/' ) \n         assert   session [ 'user_id' ]   ==   1 \n         assert   g . user [ 'username' ]   ==   'test' \n\n\n @pytest.mark.parametrize (( 'username' ,   'password' ,   'message' ),   ( \n     ( 'a' ,   'test' ,   b 'Incorrect username.' ), \n     ( 'test' ,   'a' ,   b 'Incorrect password.' ), \n )) \n def   test_login_validate_input ( auth ,   username ,   password ,   message ): \n     response   =   auth . login ( username ,   password ) \n     assert   message   in   response . data \n \n \n \n Using  client  in a  with  block allows accessing context variables\nsuch as  session  after the response is returned. Normally,\naccessing  session  outside of a request would raise an error. \n Testing  logout  is the opposite of  login .  session  should\nnot contain  user_id  after logging out. \n \n tests/test_auth.py \u00b6 \n def   test_logout ( client ,   auth ): \n     auth . login () \n\n     with   client : \n         auth . logout () \n         assert   'user_id'   not   in   session \n \n \n \n \n \n Blog \u00b6 \n All the blog views use the  auth  fixture you wrote earlier. Call\n auth.login()  and subsequent requests from the client will be logged\nin as the  test  user. \n The  index  view should display information about the post that was\nadded with the test data. When logged in as the author, there should be\na link to edit the post. \n You can also test some more authentication behavior while testing the\n index  view. When not logged in, each page shows links to log in or\nregister. When logged in, there\u2019s a link to log out. \n \n tests/test_blog.py \u00b6 \n import   pytest \n from   flaskr.db   import   get_db \n\n\n def   test_index ( client ,   auth ): \n     response   =   client . get ( '/' ) \n     assert   b \"Log In\"   in   response . data \n     assert   b \"Register\"   in   response . data \n\n     auth . login () \n     response   =   client . get ( '/' ) \n     assert   b 'Log Out'   in   response . data \n     assert   b 'test title'   in   response . data \n     assert   b 'by test on 2018-01-01'   in   response . data \n     assert   b 'test \\n body'   in   response . data \n     assert   b 'href=\"/1/update\"'   in   response . data \n \n \n \n A user must be logged in to access the  create ,  update , and\n delete  views. The logged in user must be the author of the post to\naccess  update  and  delete , otherwise a  403   Forbidden  status\nis returned. If a  post  with the given  id  doesn\u2019t exist,\n update  and  delete  should return  404   Not   Found . \n \n tests/test_blog.py \u00b6 \n @pytest.mark.parametrize ( 'path' ,   ( \n     '/create' , \n     '/1/update' , \n     '/1/delete' , \n )) \n def   test_login_required ( client ,   path ): \n     response   =   client . post ( path ) \n     assert   response . headers [ 'Location' ]   ==   'http://localhost/auth/login' \n\n\n def   test_author_required ( app ,   client ,   auth ): \n     # change the post author to another user \n     with   app . app_context (): \n         db   =   get_db () \n         db . execute ( 'UPDATE post SET author_id = 2 WHERE id = 1' ) \n         db . commit () \n\n     auth . login () \n     # current user can't modify other user's post \n     assert   client . post ( '/1/update' ) . status_code   ==   403 \n     assert   client . post ( '/1/delete' ) . status_code   ==   403 \n     # current user doesn't see edit link \n     assert   b 'href=\"/1/update\"'   not   in   client . get ( '/' ) . data \n\n\n @pytest.mark.parametrize ( 'path' ,   ( \n     '/2/update' , \n     '/2/delete' , \n )) \n def   test_exists_required ( client ,   auth ,   path ): \n     auth . login () \n     assert   client . post ( path ) . status_code   ==   404 \n \n \n \n The  create  and  update  views should render and return a\n 200   OK  status for a  GET  request. When valid data is sent in a\n POST  request,  create  should insert the new post data into the\ndatabase, and  update  should modify the existing data. Both pages\nshould show an error message on invalid data. \n \n tests/test_blog.py \u00b6 \n def   test_create ( client ,   auth ,   app ): \n     auth . login () \n     assert   client . get ( '/create' ) . status_code   ==   200 \n     client . post ( '/create' ,   data = { 'title' :   'created' ,   'body' :   '' }) \n\n     with   app . app_context (): \n         db   =   get_db () \n         count   =   db . execute ( 'SELECT COUNT(id) FROM post' ) . fetchone ()[ 0 ] \n         assert   count   ==   2 \n\n\n def   test_update ( client ,   auth ,   app ): \n     auth . login () \n     assert   client . get ( '/1/update' ) . status_code   ==   200 \n     client . post ( '/1/update' ,   data = { 'title' :   'updated' ,   'body' :   '' }) \n\n     with   app . app_context (): \n         db   =   get_db () \n         post   =   db . execute ( 'SELECT * FROM post WHERE id = 1' ) . fetchone () \n         assert   post [ 'title' ]   ==   'updated' \n\n\n @pytest.mark.parametrize ( 'path' ,   ( \n     '/create' , \n     '/1/update' , \n )) \n def   test_create_update_validate ( client ,   auth ,   path ): \n     auth . login () \n     response   =   client . post ( path ,   data = { 'title' :   '' ,   'body' :   '' }) \n     assert   b 'Title is required.'   in   response . data \n \n \n \n The  delete  view should redirect to the index URL and the post should\nno longer exist in the database. \n \n tests/test_blog.py \u00b6 \n def   test_delete ( client ,   auth ,   app ): \n     auth . login () \n     response   =   client . post ( '/1/delete' ) \n     assert   response . headers [ 'Location' ]   ==   'http://localhost/' \n\n     with   app . app_context (): \n         db   =   get_db () \n         post   =   db . execute ( 'SELECT * FROM post WHERE id = 1' ) . fetchone () \n         assert   post   is   None \n \n \n \n \n \n Running the Tests \u00b6 \n Some extra configuration, which is not required but makes running\ntests with coverage less verbose, can be added to the project\u2019s\n setup.cfg  file. \n \n setup.cfg \u00b6 \n [tool:pytest]\ntestpaths = tests\n\n[coverage:run]\nbranch = True\nsource =\n    flaskr\n \n \n \n To run the tests, use the  pytest  command. It will find and run all\nthe test functions you\u2019ve written. \n pytest\n\n========================= test session starts ==========================\nplatform linux -- Python 3.6.4, pytest-3.5.0, py-1.5.3, pluggy-0.6.0\nrootdir: /home/user/Projects/flask-tutorial, inifile: setup.cfg\ncollected 23 items\n\ntests/test_auth.py ........                                      [ 34%]\ntests/test_blog.py ............                                  [ 86%]\ntests/test_db.py ..                                              [ 95%]\ntests/test_factory.py ..                                         [100%]\n\n====================== 24 passed in 0.64 seconds =======================\n \n \n If any tests fail, pytest will show the error that was raised. You can\nrun  pytest   -v  to get a list of each test function rather than dots. \n To measure the code coverage of your tests, use the  coverage  command\nto run pytest instead of running it directly. \n coverage run -m pytest\n \n \n You can either view a simple coverage report in the terminal: \n coverage report\n\nName                 Stmts   Miss Branch BrPart  Cover\n------------------------------------------------------\nflaskr/__init__.py      21      0      2      0   100%\nflaskr/auth.py          54      0     22      0   100%\nflaskr/blog.py          54      0     16      0   100%\nflaskr/db.py            24      0      4      0   100%\n------------------------------------------------------\nTOTAL                  153      0     44      0   100%\n \n \n An HTML report allows you to see which lines were covered in each file: \n coverage html\n \n \n This generates files in the  htmlcov  directory. Open\n htmlcov/index.html  in your browser to see the report. \n Continue to  Deploy to Production . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Test Coverage \n Setup and Fixtures \n Factory \n Database \n Authentication \n Blog \n Running the Tests \n \n \n \n Navigation \n \n   Overview \n     \n       Tutorial \n         \n           Previous:  Make the Project Installable \n           Next:  Deploy to Production \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/tutorial/next/", "text": "\n   \n     \n     \n   \n     Keep Developing! \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Keep Developing! \u00b6 \n You\u2019ve learned about quite a few Flask and Python concepts throughout\nthe tutorial. Go back and review the tutorial and compare your code with\nthe steps you took to get there. Compare your project to the\n example project , which might look a bit\ndifferent due to the step-by-step nature of the tutorial. \n There\u2019s a lot more to Flask than what you\u2019ve seen so far. Even so,\nyou\u2019re now equipped to start developing your own web applications. Check\nout the  Quickstart  for an overview of what Flask can do, then\ndive into the docs to keep learning. Flask uses  Jinja ,  Click ,\n Werkzeug , and  ItsDangerous  behind the scenes, and they all have\ntheir own documentation too. You\u2019ll also be interested in\n Extensions  which make tasks like working with the database or\nvalidating form data easier and more powerful. \n If you want to keep developing your Flaskr project, here are some ideas\nfor what to try next: \n \n A detail view to show a single post. Click a post\u2019s title to go to\nits page. \n Like / unlike a post. \n Comments. \n Tags. Clicking a tag shows all the posts with that tag. \n A search box that filters the index page by name. \n Paged display. Only show 5 posts per page. \n Upload an image to go along with a post. \n Format posts using Markdown. \n An RSS feed of new posts. \n \n Have fun and make awesome applications! \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             Navigation \n \n   Overview \n     \n       Tutorial \n         \n           Previous:  Deploy to Production \n           Next:  Templates \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/tutorial/deploy/", "text": "\n   \n     \n     \n   \n     Deploy to Production \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Deploy to Production \u00b6 \n This part of the tutorial assumes you have a server that you want to\ndeploy your application to. It gives an overview of how to create the\ndistribution file and install it, but won\u2019t go into specifics about\nwhat server or software to use. You can set up a new environment on your\ndevelopment computer to try out the instructions below, but probably\nshouldn\u2019t use it for hosting a real public application. See\n Deployment Options  for a list of many different ways to host your\napplication. \n \n Build and Install \u00b6 \n When you want to deploy your application elsewhere, you build a\ndistribution file. The current standard for Python distribution is the\n wheel  format, with the  .whl  extension. Make sure the wheel library\nis installed first: \n pip install wheel\n \n \n Running  setup.py  with Python gives you a command line tool to issue\nbuild-related commands. The  bdist_wheel  command will build a wheel\ndistribution file. \n python setup.py bdist_wheel\n \n \n You can find the file in  dist/flaskr-1.0.0-py3-none-any.whl . The\nfile name is the name of the project, the version, and some tags about\nthe file can install. \n Copy this file to another machine,\n set up a new virtualenv , then install the\nfile with  pip . \n pip install flaskr-1.0.0-py3-none-any.whl\n \n \n Pip will install your project along with its dependencies. \n Since this is a different machine, you need to run  init-db  again to\ncreate the database in the instance folder. \n export FLASK_APP=flaskr\nflask init-db\n \n \n When Flask detects that it\u2019s installed (not in editable mode), it uses\na different directory for the instance folder. You can find it at\n venv/var/flaskr-instance  instead. \n \n \n Configure the Secret Key \u00b6 \n In the beginning of the tutorial that you gave a default value for\n SECRET_KEY . This should be changed to some random bytes in\nproduction. Otherwise, attackers could use the public  'dev'  key to\nmodify the session cookie, or anything else that uses the secret key. \n You can use the following command to output a random secret key: \n python -c 'import os; print(os.urandom(16))'\n\nb'_5#y2L\"F4Q8z\\n\\xec]/'\n \n \n Create the  config.py  file in the instance folder, which the factory\nwill read from if it exists. Copy the generated value into it. \n \n venv/var/flaskr-instance/config.py \u00b6 \n SECRET_KEY   =   b '_5#y2L\"F4Q8z \\n\\xec ]/' \n \n \n \n You can also set any other necessary configuration here, although\n SECRET_KEY  is the only one needed for Flaskr. \n \n \n Run with a Production Server \u00b6 \n When running publicly rather than in development, you should not use the\nbuilt-in development server ( flask   run ). The development server is\nprovided by Werkzeug for convenience, but is not designed to be\nparticularly efficient, stable, or secure. \n Instead, use a production WSGI server. For example, to use  Waitress ,\nfirst install it in the virtual environment: \n pip install waitress\n \n \n You need to tell Waitress about your application, but it doesn\u2019t use\n FLASK_APP  like  flask   run  does. You need to tell it to import and\ncall the application factory to get an application object. \n waitress-serve --call 'flaskr:create_app'\n\nServing on http://0.0.0.0:8080\n \n \n See  Deployment Options  for a list of many different ways to host\nyour application. Waitress is just an example, chosen for the tutorial\nbecause it supports both Windows and Linux. There are many more WSGI\nservers and deployment options that you may choose for your project. \n Continue to  Keep Developing! . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Deploy to Production \n Build and Install \n Configure the Secret Key \n Run with a Production Server \n \n \n \n Navigation \n \n   Overview \n     \n       Tutorial \n         \n           Previous:  Test Coverage \n           Next:  Keep Developing! \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/tutorial/database/", "text": "\n   \n     \n     \n   \n     Define and Access the Database \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Define and Access the Database \u00b6 \n The application will use a  SQLite  database to store users and posts.\nPython comes with built-in support for SQLite in the  sqlite3 \nmodule. \n SQLite is convenient because it doesn\u2019t require setting up a separate\ndatabase server and is built-in to Python. However, if concurrent\nrequests try to write to the database at the same time, they will slow\ndown as each write happens sequentially. Small applications won\u2019t notice\nthis. Once you become big, you may want to switch to a different\ndatabase. \n The tutorial doesn\u2019t go into detail about SQL. If you are not familiar\nwith it, the SQLite docs describe the  language . \n \n Connect to the Database \u00b6 \n The first thing to do when working with a SQLite database (and most\nother Python database libraries) is to create a connection to it. Any\nqueries and operations are performed using the connection, which is\nclosed after the work is finished. \n In web applications this connection is typically tied to the request. It\nis created at some point when handling a request, and closed before the\nresponse is sent. \n \n flaskr/db.py \u00b6 \n import   sqlite3 \n\n import   click \n from   flask   import   current_app ,   g \n from   flask.cli   import   with_appcontext \n\n\n def   get_db (): \n     if   'db'   not   in   g : \n         g . db   =   sqlite3 . connect ( \n             current_app . config [ 'DATABASE' ], \n             detect_types = sqlite3 . PARSE_DECLTYPES \n         ) \n         g . db . row_factory   =   sqlite3 . Row \n\n     return   g . db \n\n\n def   close_db ( e = None ): \n     db   =   g . pop ( 'db' ,   None ) \n\n     if   db   is   not   None : \n         db . close () \n \n \n \n g  is a special object that is unique for each request. It is\nused to store data that might be accessed by multiple functions during\nthe request. The connection is stored and reused instead of creating a\nnew connection if  get_db  is called a second time in the same\nrequest. \n current_app  is another special object that points to the Flask\napplication handling the request. Since you used an application factory,\nthere is no application object when writing the rest of your code.\n get_db  will be called when the application has been created and is\nhandling a request, so  current_app  can be used. \n sqlite3.connect()  establishes a connection to the file pointed at\nby the  DATABASE  configuration key. This file doesn\u2019t have to exist\nyet, and won\u2019t until you initialize the database later. \n sqlite3.Row  tells the connection to return rows that behave\nlike dicts. This allows accessing the columns by name. \n close_db  checks if a connection was created by checking if  g.db \nwas set. If the connection exists, it is closed. Further down you will\ntell your application about the  close_db  function in the application\nfactory so that it is called after each request. \n \n \n Create the Tables \u00b6 \n In SQLite, data is stored in  tables  and  columns . These need to be\ncreated before you can store and retrieve data. Flaskr will store users\nin the  user  table, and posts in the  post  table. Create a file\nwith the SQL commands needed to create empty tables: \n \n flaskr/schema.sql \u00b6 \n DROP   TABLE   IF   EXISTS   user ; \n DROP   TABLE   IF   EXISTS   post ; \n\n CREATE   TABLE   user   ( \n   id   INTEGER   PRIMARY   KEY   AUTOINCREMENT , \n   username   TEXT   UNIQUE   NOT   NULL , \n   password   TEXT   NOT   NULL \n ); \n\n CREATE   TABLE   post   ( \n   id   INTEGER   PRIMARY   KEY   AUTOINCREMENT , \n   author_id   INTEGER   NOT   NULL , \n   created   TIMESTAMP   NOT   NULL   DEFAULT   CURRENT_TIMESTAMP , \n   title   TEXT   NOT   NULL , \n   body   TEXT   NOT   NULL , \n   FOREIGN   KEY   ( author_id )   REFERENCES   user   ( id ) \n ); \n \n \n \n Add the Python functions that will run these SQL commands to the\n db.py  file: \n \n flaskr/db.py \u00b6 \n def   init_db (): \n     db   =   get_db () \n\n     with   current_app . open_resource ( 'schema.sql' )   as   f : \n         db . executescript ( f . read () . decode ( 'utf8' )) \n\n\n @click.command ( 'init-db' ) \n @with_appcontext \n def   init_db_command (): \n     \"\"\"Clear the existing data and create new tables.\"\"\" \n     init_db () \n     click . echo ( 'Initialized the database.' ) \n \n \n \n open_resource()  opens a file relative to\nthe  flaskr  package, which is useful since you won\u2019t necessarily know\nwhere that location is when deploying the application later.  get_db \nreturns a database connection, which is used to execute the commands\nread from the file. \n click.command()  defines a command line command called  init-db \nthat calls the  init_db  function and shows a success message to the\nuser. You can read  Command Line Interface  to learn more about writing commands. \n \n \n Register with the Application \u00b6 \n The  close_db  and  init_db_command  functions need to be registered\nwith the application instance, otherwise they won\u2019t be used by the\napplication. However, since you\u2019re using a factory function, that\ninstance isn\u2019t available when writing the functions. Instead, write a\nfunction that takes an application and does the registration. \n \n flaskr/db.py \u00b6 \n def   init_app ( app ): \n     app . teardown_appcontext ( close_db ) \n     app . cli . add_command ( init_db_command ) \n \n \n \n app.teardown_appcontext()  tells\nFlask to call that function when cleaning up after returning the\nresponse. \n app.cli.add_command()  adds a new\ncommand that can be called with the  flask  command. \n Import and call this function from the factory. Place the new code at\nthe end of the factory function before returning the app. \n \n flaskr/__init__.py \u00b6 \n def   create_app (): \n     app   =   ... \n     # existing code omitted \n\n     from   .   import   db \n     db . init_app ( app ) \n\n     return   app \n \n \n \n \n \n Initialize the Database File \u00b6 \n Now that  init-db  has been registered with the app, it can be called\nusing the  flask  command, similar to the  run  command from the\nprevious page. \n \n Note \n If you\u2019re still running the server from the previous page, you can\neither stop the server, or run this command in a new terminal. If\nyou use a new terminal, remember to change to your project directory\nand activate the env as described in  Activate the environment .\nYou\u2019ll also need to set  FLASK_APP  and  FLASK_ENV  as shown on\nthe previous page. \n \n Run the  init-db  command: \n flask init-db\nInitialized the database.\n \n \n There will now be a  flaskr.sqlite  file in the  instance  folder in\nyour project. \n Continue to  Blueprints and Views . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Define and Access the Database \n Connect to the Database \n Create the Tables \n Register with the Application \n Initialize the Database File \n \n \n \n Navigation \n \n   Overview \n     \n       Tutorial \n         \n           Previous:  Application Setup \n           Next:  Blueprints and Views \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/tutorial/factory/", "text": "\n   \n     \n     \n   \n     Application Setup \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Application Setup \u00b6 \n A Flask application is an instance of the  Flask  class.\nEverything about the application, such as configuration and URLs, will\nbe registered with this class. \n The most straightforward way to create a Flask application is to create\na global  Flask  instance directly at the top of your code, like\nhow the \u201cHello, World!\u201d example did on the previous page. While this is\nsimple and useful in some cases, it can cause some tricky issues as the\nproject grows. \n Instead of creating a  Flask  instance globally, you will create\nit inside a function. This function is known as the  application\nfactory . Any configuration, registration, and other setup the\napplication needs will happen inside the function, then the application\nwill be returned. \n \n The Application Factory \u00b6 \n It\u2019s time to start coding! Create the  flaskr  directory and add the\n __init__.py  file. The  __init__.py  serves double duty: it will\ncontain the application factory, and it tells Python that the  flaskr \ndirectory should be treated as a package. \n mkdir flaskr\n \n \n \n flaskr/__init__.py \u00b6 \n import   os \n\n from   flask   import   Flask \n\n\n def   create_app ( test_config = None ): \n     # create and configure the app \n     app   =   Flask ( __name__ ,   instance_relative_config = True ) \n     app . config . from_mapping ( \n         SECRET_KEY = 'dev' , \n         DATABASE = os . path . join ( app . instance_path ,   'flaskr.sqlite' ), \n     ) \n\n     if   test_config   is   None : \n         # load the instance config, if it exists, when not testing \n         app . config . from_pyfile ( 'config.py' ,   silent = True ) \n     else : \n         # load the test config if passed in \n         app . config . from_mapping ( test_config ) \n\n     # ensure the instance folder exists \n     try : \n         os . makedirs ( app . instance_path ) \n     except   OSError : \n         pass \n\n     # a simple page that says hello \n     @app.route ( '/hello' ) \n     def   hello (): \n         return   'Hello, World!' \n\n     return   app \n \n \n \n create_app  is the application factory function. You\u2019ll add to it\nlater in the tutorial, but it already does a lot. \n \n app   =   Flask(__name__,   instance_relative_config=True)  creates the\n Flask  instance. \n __name__  is the name of the current Python module. The app\nneeds to know where it\u2019s located to set up some paths, and\n __name__  is a convenient way to tell it that. \n instance_relative_config=True  tells the app that\nconfiguration files are relative to the\n instance folder . The instance folder\nis located outside the  flaskr  package and can hold local\ndata that shouldn\u2019t be committed to version control, such as\nconfiguration secrets and the database file. \n \n \n app.config.from_mapping()  sets\nsome default configuration that the app will use: \n SECRET_KEY  is used by Flask and extensions to keep data\nsafe. It\u2019s set to  'dev'  to provide a convenient value\nduring development, but it should be overridden with a random\nvalue when deploying. \n DATABASE  is the path where the SQLite database file will be\nsaved. It\u2019s under\n app.instance_path , which is the\npath that Flask has chosen for the instance folder. You\u2019ll learn\nmore about the database in the next section. \n \n \n app.config.from_pyfile()  overrides\nthe default configuration with values taken from the  config.py \nfile in the instance folder if it exists. For example, when\ndeploying, this can be used to set a real  SECRET_KEY . \n test_config  can also be passed to the factory, and will be\nused instead of the instance configuration. This is so the tests\nyou\u2019ll write later in the tutorial can be configured\nindependently of any development values you have configured. \n \n \n os.makedirs()  ensures that\n app.instance_path  exists. Flask\ndoesn\u2019t create the instance folder automatically, but it needs to be\ncreated because your project will create the SQLite database file\nthere. \n @app.route()  creates a simple route so you can\nsee the application working before getting into the rest of the\ntutorial. It creates a connection between the URL  /hello  and a\nfunction that returns a response, the string  'Hello,   World!'  in\nthis case. \n \n \n \n Run The Application \u00b6 \n Now you can run your application using the  flask  command. From the\nterminal, tell Flask where to find your application, then run it in\ndevelopment mode. \n Development mode shows an interactive debugger whenever a page raises an\nexception, and restarts the server whenever you make changes to the\ncode. You can leave it running and just reload the browser page as you\nfollow the tutorial. \n For Linux and Mac: \n export FLASK_APP=flaskr\nexport FLASK_ENV=development\nflask run\n \n \n For Windows cmd, use  set  instead of  export : \n set FLASK_APP=flaskr\nset FLASK_ENV=development\nflask run\n \n \n For Windows PowerShell, use  $env:  instead of  export : \n $env:FLASK_APP = \"flaskr\"\n$env:FLASK_ENV = \"development\"\nflask run\n \n \n You\u2019ll see output similar to this: \n * Serving Flask app \"flaskr\"\n* Environment: development\n* Debug mode: on\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n* Restarting with stat\n* Debugger is active!\n* Debugger PIN: 855-212-761\n \n \n Visit  http://127.0.0.1:5000/hello  in a browser and you should see the\n\u201cHello, World!\u201d message. Congratulations, you\u2019re now running your Flask\nweb application! \n Continue to  Define and Access the Database . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Application Setup \n The Application Factory \n Run The Application \n \n \n \n Navigation \n \n   Overview \n     \n       Tutorial \n         \n           Previous:  Project Layout \n           Next:  Define and Access the Database \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/tutorial/layout/", "text": "\n   \n     \n     \n   \n     Project Layout \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Project Layout \u00b6 \n Create a project directory and enter it: \n mkdir flask-tutorial\ncd flask-tutorial\n \n \n Then follow the  installation instructions  to set\nup a Python virtual environment and install Flask for your project. \n The tutorial will assume you\u2019re working from the  flask-tutorial \ndirectory from now on. The file names at the top of each code block are\nrelative to this directory. \n \n A Flask application can be as simple as a single file. \n \n hello.py \u00b6 \n from   flask   import   Flask \n\n app   =   Flask ( __name__ ) \n\n\n @app.route ( '/' ) \n def   hello (): \n     return   'Hello, World!' \n \n \n \n However, as a project get bigger, it becomes overwhelming to keep all\nthe code in one file. Python projects use  packages  to organize code\ninto multiple modules that can be imported where needed, and the\ntutorial will do this as well. \n The project directory will contain: \n \n flaskr/ , a Python package containing your application code and\nfiles. \n tests/ , a directory containing test modules. \n venv/ , a Python virtual environment where Flask and other\ndependencies are installed. \n Installation files telling Python how to install your project. \n Version control config, such as  git . You should make a habit of\nusing some type of version control for all your projects, no matter\nthe size. \n Any other project files you might add in the future. \n \n By the end, your project layout will look like this: \n /home/user/Projects/flask-tutorial\n\u251c\u2500\u2500 flaskr/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 db.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 schema.sql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 auth.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 blog.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 templates/\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 base.html\n\u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 auth/\n\u2502\u00a0\u00a0 \u2502   \u2502\u00a0\u00a0 \u251c\u2500\u2500 login.html\n\u2502\u00a0\u00a0 \u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 register.html\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 blog/\n\u2502\u00a0\u00a0 \u2502       \u251c\u2500\u2500 create.html\n\u2502\u00a0\u00a0 \u2502       \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2502       \u2514\u2500\u2500 update.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 static/\n\u2502\u00a0\u00a0  \u00a0\u00a0 \u2514\u2500\u2500 style.css\n\u251c\u2500\u2500 tests/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conftest.py\n\u2502 \u00a0 \u251c\u2500\u2500 data.sql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test_factory.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test_db.py\n\u2502\u00a0  \u251c\u2500\u2500 test_auth.py\n\u2502\u00a0  \u2514\u2500\u2500 test_blog.py\n\u251c\u2500\u2500 venv/\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 MANIFEST.in\n \n \n If you\u2019re using version control, the following files that are generated\nwhile running your project should be ignored. There may be other files\nbased on the editor you use. In general, ignore files that you didn\u2019t\nwrite. For example, with git: \n \n .gitignore \u00b6 \n venv/\n\n*.pyc\n__pycache__/\n\ninstance/\n\n.pytest_cache/\n.coverage\nhtmlcov/\n\ndist/\nbuild/\n*.egg-info/\n \n \n \n Continue to  Application Setup . \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             Navigation \n \n   Overview \n     \n       Tutorial \n         \n           Previous:  Tutorial \n           Next:  Application Setup \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/advanced_foreword/", "text": "\n   \n     \n     \n   \n     Foreword for Experienced Programmers \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Foreword for Experienced Programmers \u00b6 \n \n Thread-Locals in Flask \u00b6 \n One of the design decisions in Flask was that simple tasks should be simple;\nthey should not take a lot of code and yet they should not limit you. Because\nof that, Flask has a few design choices that some people might find surprising or\nunorthodox. For example, Flask uses thread-local objects internally so that you\ndon\u2019t have to pass objects around from function to function within a request in\norder to stay threadsafe. This approach is convenient, but requires a valid\nrequest context for dependency injection or when attempting to reuse code which\nuses a value pegged to the request.  The Flask project is honest about\nthread-locals, does not hide them, and calls out in the code and documentation\nwhere they are used. \n \n \n Develop for the Web with Caution \u00b6 \n Always keep security in mind when building web applications. \n If you write a web application, you are probably allowing users to register\nand leave their data on your server.  The users are entrusting you with data.\nAnd even if you are the only user that might leave data in your application,\nyou still want that data to be stored securely. \n Unfortunately, there are many ways the security of a web application can be\ncompromised.  Flask protects you against one of the most common security\nproblems of modern web applications: cross-site scripting (XSS).  Unless you\ndeliberately mark insecure HTML as secure, Flask and the underlying Jinja2\ntemplate engine have you covered.  But there are many more ways to cause\nsecurity problems. \n The documentation will warn you about aspects of web development that require\nattention to security.  Some of these security concerns are far more complex\nthan one might think, and we all sometimes underestimate the likelihood that a\nvulnerability will be exploited - until a clever attacker figures out a way to\nexploit our applications.  And don\u2019t think that your application is not\nimportant enough to attract an attacker.  Depending on the kind of attack,\nchances are that automated bots are probing for ways to fill your database with\nspam, links to malicious software, and the like. \n Flask is no different from any other framework in that you the developer must\nbuild with caution, watching for exploits when building to your requirements. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Foreword for Experienced Programmers \n Thread-Locals in Flask \n Develop for the Web with Caution \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Foreword \n           Next:  Installation \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/", "text": "\n   \n     \n     \n   \n     Patterns for Flask \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Patterns for Flask \u00b6 \n Certain things are common enough that the chances are high you will find\nthem in most web applications.  For example quite a lot of applications\nare using relational databases and user authentication.  In that case,\nchances are they will open a database connection at the beginning of the\nrequest and get the information of the currently logged in user.  At the\nend of the request, the database connection is closed again. \n There are more user contributed snippets and patterns in the  Flask\nSnippet Archives . \n \n \n Larger Applications \n Simple Packages \n Working with Blueprints \n \n \n Application Factories \n Basic Factories \n Factories & Extensions \n Using Applications \n Factory Improvements \n \n \n Application Dispatching \n Working with this Document \n Combining Applications \n Dispatch by Subdomain \n Dispatch by Path \n \n \n Implementing API Exceptions \n Simple Exception Class \n Registering an Error Handler \n Usage in Views \n \n \n Using URL Processors \n Internationalized Application URLs \n Internationalized Blueprint URLs \n \n \n Deploying with Setuptools \n Basic Setup Script \n Tagging Builds \n Distributing Resources \n Declaring Dependencies \n Installing / Developing \n \n \n Deploying with Fabric \n Creating the first Fabfile \n Running Fabfiles \n The WSGI File \n The Configuration File \n First Deployment \n Next Steps \n \n \n Using SQLite 3 with Flask \n Connect on Demand \n Easy Querying \n Initial Schemas \n \n \n SQLAlchemy in Flask \n Flask-SQLAlchemy Extension \n Declarative \n Manual Object Relational Mapping \n SQL Abstraction Layer \n \n \n Uploading Files \n A Gentle Introduction \n Improving Uploads \n Upload Progress Bars \n An Easier Solution \n \n \n Caching \n Setting up a Cache \n Using a Cache \n \n \n View Decorators \n Login Required Decorator \n Caching Decorator \n Templating Decorator \n Endpoint Decorator \n \n \n Form Validation with WTForms \n The Forms \n In the View \n Forms in Templates \n \n \n Template Inheritance \n Base Template \n Child Template \n \n \n Message Flashing \n Simple Flashing \n Flashing With Categories \n Filtering Flash Messages \n \n \n AJAX with jQuery \n Loading jQuery \n Where is My Site? \n JSON View Functions \n The HTML \n \n \n Custom Error Pages \n Common Error Codes \n Error Handlers \n \n \n Lazily Loading Views \n Converting to Centralized URL Map \n Loading Late \n \n \n MongoKit in Flask \n Declarative \n PyMongo Compatibility Layer \n \n \n Adding a favicon \n See also \n \n \n Streaming Contents \n Basic Usage \n Streaming from Templates \n Streaming with Context \n \n \n Deferred Request Callbacks \n Adding HTTP Method Overrides \n Request Content Checksums \n Celery Background Tasks \n Install \n Configure \n An example task \n Run a worker \n \n \n Subclassing Flask \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             Navigation \n \n   Overview \n     \n           Previous:  Working with the Shell \n           Next:  Larger Applications \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/tutorial/views/", "text": "\n   \n     \n     \n   \n     Blueprints and Views \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Blueprints and Views \u00b6 \n A view function is the code you write to respond to requests to your\napplication. Flask uses patterns to match the incoming request URL to\nthe view that should handle it. The view returns data that Flask turns\ninto an outgoing response. Flask can also go the other direction and\ngenerate a URL to a view based on its name and arguments. \n \n Create a Blueprint \u00b6 \n A  Blueprint  is a way to organize a group of related views and\nother code. Rather than registering views and other code directly with\nan application, they are registered with a blueprint. Then the blueprint\nis registered with the application when it is available in the factory\nfunction. \n Flaskr will have two blueprints, one for authentication functions and\none for the blog posts functions. The code for each blueprint will go\nin a separate module. Since the blog needs to know about authentication,\nyou\u2019ll write the authentication one first. \n \n flaskr/auth.py \u00b6 \n import   functools \n\n from   flask   import   ( \n     Blueprint ,   flash ,   g ,   redirect ,   render_template ,   request ,   session ,   url_for \n ) \n from   werkzeug.security   import   check_password_hash ,   generate_password_hash \n\n from   flaskr.db   import   get_db \n\n bp   =   Blueprint ( 'auth' ,   __name__ ,   url_prefix = '/auth' ) \n \n \n \n This creates a  Blueprint  named  'auth' . Like the application\nobject, the blueprint needs to know where it\u2019s defined, so  __name__ \nis passed as the second argument. The  url_prefix  will be prepended\nto all the URLs associated with the blueprint. \n Import and register the blueprint from the factory using\n app.register_blueprint() . Place the\nnew code at the end of the factory function before returning the app. \n \n flaskr/__init__.py \u00b6 \n def   create_app (): \n     app   =   ... \n     # existing code omitted \n\n     from   .   import   auth \n     app . register_blueprint ( auth . bp ) \n\n     return   app \n \n \n \n The authentication blueprint will have views to register new users and\nto log in and log out. \n \n \n The First View: Register \u00b6 \n When the user visits the  /auth/register  URL, the  register  view\nwill return  HTML  with a form for them to fill out. When they submit\nthe form, it will validate their input and either show the form again\nwith an error message or create the new user and go to the login page. \n For now you will just write the view code. On the next page, you\u2019ll\nwrite templates to generate the HTML form. \n \n flaskr/auth.py \u00b6 \n @bp.route ( '/register' ,   methods = ( 'GET' ,   'POST' )) \n def   register (): \n     if   request . method   ==   'POST' : \n         username   =   request . form [ 'username' ] \n         password   =   request . form [ 'password' ] \n         db   =   get_db () \n         error   =   None \n\n         if   not   username : \n             error   =   'Username is required.' \n         elif   not   password : \n             error   =   'Password is required.' \n         elif   db . execute ( \n             'SELECT id FROM user WHERE username = ?' ,   ( username ,) \n         ) . fetchone ()   is   not   None : \n             error   =   'User {} is already registered.' . format ( username ) \n\n         if   error   is   None : \n             db . execute ( \n                 'INSERT INTO user (username, password) VALUES (?, ?)' , \n                 ( username ,   generate_password_hash ( password )) \n             ) \n             db . commit () \n             return   redirect ( url_for ( 'auth.login' )) \n\n         flash ( error ) \n\n     return   render_template ( 'auth/register.html' ) \n \n \n \n Here\u2019s what the  register  view function is doing: \n \n @bp.route  associates the URL  /register \nwith the  register  view function. When Flask receives a request\nto  /auth/register , it will call the  register  view and use\nthe return value as the response. \n \n If the user submitted the form,\n request.method  will be  'POST' . In this\ncase, start validating the input. \n \n request.form  is a special type of\n dict  mapping submitted form keys and values. The user will\ninput their  username  and  password . \n \n Validate that  username  and  password  are not empty. \n \n Validate that  username  is not already registered by querying the\ndatabase and checking if a result is returned.\n db.execute  takes a SQL query\nwith  ?  placeholders for any user input, and a tuple of values\nto replace the placeholders with. The database library will take\ncare of escaping the values so you are not vulnerable to a\n SQL injection attack . \n fetchone()  returns one row from the query.\nIf the query returned no results, it returns  None . Later,\n fetchall()  is used, which returns a list of\nall results. \n \n If validation succeeds, insert the new user data into the database.\nFor security, passwords should never be stored in the database\ndirectly. Instead,\n generate_password_hash()  is used to\nsecurely hash the password, and that hash is stored. Since this\nquery modifies data,  db.commit() \nneeds to be called afterwards to save the changes. \n \n After storing the user, they are redirected to the login page.\n url_for()  generates the URL for the login view based on its\nname. This is preferable to writing the URL directly as it allows\nyou to change the URL later without changing all code that links to\nit.  redirect()  generates a redirect response to the generated\nURL. \n \n If validation fails, the error is shown to the user.  flash() \nstores messages that can be retrieved when rendering the template. \n \n When the user initially navigates to  auth/register , or\nthere was an validation error, an HTML page with the registration\nform should be shown.  render_template()  will render a template\ncontaining the HTML, which you\u2019ll write in the next step of the\ntutorial. \n \n \n \n \n Login \u00b6 \n This view follows the same pattern as the  register  view above. \n \n flaskr/auth.py \u00b6 \n @bp.route ( '/login' ,   methods = ( 'GET' ,   'POST' )) \n def   login (): \n     if   request . method   ==   'POST' : \n         username   =   request . form [ 'username' ] \n         password   =   request . form [ 'password' ] \n         db   =   get_db () \n         error   =   None \n         user   =   db . execute ( \n             'SELECT * FROM user WHERE username = ?' ,   ( username ,) \n         ) . fetchone () \n\n         if   user   is   None : \n             error   =   'Incorrect username.' \n         elif   not   check_password_hash ( user [ 'password' ],   password ): \n             error   =   'Incorrect password.' \n\n         if   error   is   None : \n             session . clear () \n             session [ 'user_id' ]   =   user [ 'id' ] \n             return   redirect ( url_for ( 'index' )) \n\n         flash ( error ) \n\n     return   render_template ( 'auth/login.html' ) \n \n \n \n There are a few differences from the  register  view: \n \n The user is queried first and stored in a variable for later use. \n check_password_hash()  hashes the submitted\npassword in the same way as the stored hash and securely compares\nthem. If they match, the password is valid. \n session  is a  dict  that stores data across requests.\nWhen validation succeeds, the user\u2019s  id  is stored in a new\nsession. The data is stored in a  cookie  that is sent to the\nbrowser, and the browser then sends it back with subsequent requests.\nFlask securely  signs  the data so that it can\u2019t be tampered with. \n \n Now that the user\u2019s  id  is stored in the  session , it will be\navailable on subsequent requests. At the beginning of each request, if\na user is logged in their information should be loaded and made\navailable to other views. \n \n flaskr/auth.py \u00b6 \n @bp.before_app_request \n def   load_logged_in_user (): \n     user_id   =   session . get ( 'user_id' ) \n\n     if   user_id   is   None : \n         g . user   =   None \n     else : \n         g . user   =   get_db () . execute ( \n             'SELECT * FROM user WHERE id = ?' ,   ( user_id ,) \n         ) . fetchone () \n \n \n \n bp.before_app_request()  registers\na function that runs before the view function, no matter what URL is\nrequested.  load_logged_in_user  checks if a user id is stored in the\n session  and gets that user\u2019s data from the database, storing it\non  g.user , which lasts for the length of the request. If\nthere is no user id, or if the id doesn\u2019t exist,  g.user  will be\n None . \n \n \n Logout \u00b6 \n To log out, you need to remove the user id from the  session .\nThen  load_logged_in_user  won\u2019t load a user on subsequent requests. \n \n flaskr/auth.py \u00b6 \n @bp.route ( '/logout' ) \n def   logout (): \n     session . clear () \n     return   redirect ( url_for ( 'index' )) \n \n \n \n \n \n Require Authentication in Other Views \u00b6 \n Creating, editing, and deleting blog posts will require a user to be\nlogged in. A  decorator  can be used to check this for each view it\u2019s\napplied to. \n \n flaskr/auth.py \u00b6 \n def   login_required ( view ): \n     @functools.wraps ( view ) \n     def   wrapped_view ( ** kwargs ): \n         if   g . user   is   None : \n             return   redirect ( url_for ( 'auth.login' )) \n\n         return   view ( ** kwargs ) \n\n     return   wrapped_view \n \n \n \n This decorator returns a new view function that wraps the original view\nit\u2019s applied to. The new function checks if a user is loaded and\nredirects to the login page otherwise. If a user is loaded the original\nview is called and continues normally. You\u2019ll use this decorator when\nwriting the blog views. \n \n \n Endpoints and URLs \u00b6 \n The  url_for()  function generates the URL to a view based on a name\nand arguments. The name associated with a view is also called the\n endpoint , and by default it\u2019s the same as the name of the view\nfunction. \n For example, the  hello()  view that was added to the app\nfactory earlier in the tutorial has the name  'hello'  and can be\nlinked to with  url_for('hello') . If it took an argument, which\nyou\u2019ll see later, it would be linked to using\n url_for('hello',   who='World') . \n When using a blueprint, the name of the blueprint is prepended to the\nname of the function, so the endpoint for the  login  function you\nwrote above is  'auth.login'  because you added it to the  'auth' \nblueprint. \n Continue to  Templates . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Blueprints and Views \n Create a Blueprint \n The First View: Register \n Login \n Logout \n Require Authentication in Other Views \n Endpoints and URLs \n \n \n \n Navigation \n \n   Overview \n     \n       Tutorial \n         \n           Previous:  Define and Access the Database \n           Next:  Templates \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/contributing/", "text": "\n   \n     \n     \n   \n     How to contribute to Flask \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n How to contribute to Flask \u00b6 \n Thank you for considering contributing to Flask! \n \n Support questions \u00b6 \n Please, don\u2019t use the issue tracker for this. Use one of the following\nresources for questions about your own code: \n \n The IRC channel  #pocoo  on FreeNode. \n The IRC channel  #python  on FreeNode for more general questions. \n The mailing list  flask @ python . org  for long term discussion or larger issues. \n Ask on  Stack Overflow . Search with Google first using:\n site:stackoverflow.com   flask   {search   term,   exception   message,   etc.} \n \n \n \n Reporting issues \u00b6 \n \n Describe what you expected to happen. \n If possible, include a  minimal, complete, and verifiable example  to help\nus identify the issue. This also helps check that the issue is not with your\nown code. \n Describe what actually happened. Include the full traceback if there was an\nexception. \n List your Python, Flask, and Werkzeug versions. If possible, check if this\nissue is already fixed in the repository. \n \n \n \n Submitting patches \u00b6 \n \n Include tests if your patch is supposed to solve a bug, and explain\nclearly under which circumstances the bug happens. Make sure the test fails\nwithout your patch. \n Try to follow  PEP8 , but you may ignore the line length limit if following\nit would make the code uglier. \n \n \n First time setup \u00b6 \n \n Download and install the  latest version of git . \n \n Configure git with your  username  and  email : \n git   config   -- global   user . name   'your name' \n git   config   -- global   user . email   'your email' \n \n \n \n Make sure you have a  GitHub account . \n \n Fork Flask to your GitHub account by clicking the  Fork  button. \n \n Clone  your GitHub fork locally: \n git   clone   https : // github . com / { username } / flask \n cd   flask \n \n \n \n Add the main repository as a remote to update later: \n git   remote   add   pallets   https : // github . com / pallets / flask \n git   fetch   pallets \n \n \n \n Create a virtualenv: \n python3   - m   venv   env \n .   env / bin / activate \n # or \"env\\Scripts\\activate\" on Windows \n \n \n \n Install Flask in editable mode with development dependencies: \n pip   install   - e   \".[dev]\" \n \n \n \n \n \n \n Start coding \u00b6 \n \n Create a branch to identify the issue you would like to work on (e.g.\n 2287-dry-test-suite ) \n Using your favorite editor, make your changes,  committing as you go . \n Try to follow  PEP8 , but you may ignore the line length limit if following\nit would make the code uglier. \n Include tests that cover any code changes you make. Make sure the test fails\nwithout your patch.  Run the tests. . \n Push your commits to GitHub and  create a pull request . \n Celebrate \ud83c\udf89 \n \n \n \n Running the tests \u00b6 \n Run the basic test suite with: \n pytest \n \n \n This only runs the tests for the current environment. Whether this is relevant\ndepends on which part of Flask you\u2019re working on. Travis-CI will run the full\nsuite when you submit your pull request. \n The full test suite takes a long time to run because it tests multiple\ncombinations of Python and dependencies. You need to have Python 2.7, 3.4,\n3.5 3.6, and PyPy 2.7 installed to run all of the environments. Then run: \n tox \n \n \n \n \n Running test coverage \u00b6 \n Generating a report of lines that do not have test coverage can indicate\nwhere to start contributing. Run  pytest  using  coverage  and generate a\nreport on the terminal and as an interactive HTML document: \n coverage   run   - m   pytest \n coverage   report \n coverage   html \n # then open htmlcov/index.html \n \n \n Read more about  coverage . \n Running the full test suite with  tox  will combine the coverage reports\nfrom all runs. \n \n \n Building the docs \u00b6 \n Build the docs in the  docs  directory using Sphinx: \n cd   docs \n make   html \n \n \n Open  _build/html/index.html  in your browser to view the docs. \n Read more about  Sphinx . \n \n \n make targets \u00b6 \n Flask provides a  Makefile  with various shortcuts. They will ensure that\nall dependencies are installed. \n \n make   test  runs the basic test suite with  pytest \n make   cov  runs the basic test suite with  coverage \n make   test-all  runs the full test suite with  tox \n make   docs  builds the HTML documentation \n \n \n \n \n Caution: zero-padded file modes \u00b6 \n This repository contains several zero-padded file modes that may cause issues\nwhen pushing this repository to git hosts other than GitHub. Fixing this is\ndestructive to the commit history, so we suggest ignoring these warnings. If it\nfails to push and you\u2019re using a self-hosted git service like GitLab, you can\nturn off repository checks in the admin panel. \n These files can also cause issues while cloning. If you have \n [ fetch ] \n fsckobjects   =   true \n \n \n or \n [ receive ] \n fsckObjects   =   true \n \n \n set in your git configuration file, cloning this repository will fail. The only\nsolution is to set both of the above settings to false while cloning, and then\nsetting them back to true after the cloning is finished. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n How to contribute to Flask \n Support questions \n Reporting issues \n Submitting patches \n First time setup \n Start coding \n Running the tests \n Running test coverage \n Building the docs \n make targets \n \n \n Caution: zero-padded file modes \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  License \n          \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/upgrading/", "text": "\n   \n     \n     \n   \n     Upgrading to Newer Releases \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Upgrading to Newer Releases \u00b6 \n Flask itself is changing like any software is changing over time.  Most of\nthe changes are the nice kind, the kind where you don\u2019t have to change\nanything in your code to profit from a new release. \n However every once in a while there are changes that do require some\nchanges in your code or there are changes that make it possible for you to\nimprove your own code quality by taking advantage of new features in\nFlask. \n This section of the documentation enumerates all the changes in Flask from\nrelease to release and how you can change your code to have a painless\nupdating experience. \n Use the  pip  command to upgrade your existing Flask installation by\nproviding the  --upgrade  parameter: \n $ pip install --upgrade Flask\n \n \n \n Version 0.12 \u00b6 \n \n Changes to send_file \u00b6 \n The  filename  is no longer automatically inferred from file-like objects.\nThis means that the following code will no longer automatically have\n X-Sendfile  support, etag generation or MIME-type guessing: \n response   =   send_file ( open ( '/path/to/file.txt' )) \n \n \n Any of the following is functionally equivalent: \n fname   =   '/path/to/file.txt' \n\n # Just pass the filepath directly \n response   =   send_file ( fname ) \n\n # Set the MIME-type and ETag explicitly \n response   =   send_file ( open ( fname ),   mimetype = 'text/plain' ) \n response . set_etag ( ... ) \n\n # Set `attachment_filename` for MIME-type guessing \n # ETag still needs to be manually set \n response   =   send_file ( open ( fname ),   attachment_filename = fname ) \n response . set_etag ( ... ) \n \n \n The reason for this is that some file-like objects have an invalid or even\nmisleading  name  attribute. Silently swallowing errors in such cases was not\na satisfying solution. \n Additionally the default of falling back to  application/octet-stream  has\nbeen restricted. If Flask can\u2019t guess one or the user didn\u2019t provide one, the\nfunction fails if no filename information was provided. \n \n \n \n Version 0.11 \u00b6 \n 0.11 is an odd release in the Flask release cycle because it was supposed\nto be the 1.0 release.  However because there was such a long lead time up\nto the release we decided to push out a 0.11 release first with some\nchanges removed to make the transition easier.  If you have been tracking\nthe master branch which was 1.0 you might see some unexpected changes. \n In case you did track the master branch you will notice that  flask --app \nis removed now.  You need to use the environment variable to specify an\napplication. \n \n Debugging \u00b6 \n Flask 0.11 removed the  debug_log_format  attribute from Flask\napplications.  Instead the new  LOGGER_HANDLER_POLICY  configuration can\nbe used to disable the default log handlers and custom log handlers can be\nset up. \n \n \n Error handling \u00b6 \n The behavior of error handlers was changed.\nThe precedence of handlers used to be based on the decoration/call order of\n errorhandler()  and\n register_error_handler() , respectively.\nNow the inheritance hierarchy takes precedence and handlers for more\nspecific exception classes are executed instead of more general ones.\nSee  Error handlers  for specifics. \n Trying to register a handler on an instance now raises  ValueError . \n \n Note \n There used to be a logic error allowing you to register handlers\nonly for exception  instances . This was unintended and plain wrong,\nand therefore was replaced with the intended behavior of registering\nhandlers only using exception classes and HTTP error codes. \n \n \n \n Templating \u00b6 \n The  render_template_string()  function has changed to\nautoescape template variables by default. This better matches the behavior\nof  render_template() . \n \n \n Extension imports \u00b6 \n Extension imports of the form  flask.ext.foo  are deprecated, you should use\n flask_foo . \n The old form still works, but Flask will issue a\n flask.exthook.ExtDeprecationWarning  for each extension you import the old\nway. We also provide a migration utility called  flask-ext-migrate  that is supposed to\nautomatically rewrite your imports for this. \n \n \n \n Version 0.10 \u00b6 \n The biggest change going from 0.9 to 0.10 is that the cookie serialization\nformat changed from pickle to a specialized JSON format.  This change has\nbeen done in order to avoid the damage an attacker can do if the secret\nkey is leaked.  When you upgrade you will notice two major changes: all\nsessions that were issued before the upgrade are invalidated and you can\nonly store a limited amount of types in the session.  The new sessions are\nby design much more restricted to only allow JSON with a few small\nextensions for tuples and strings with HTML markup. \n In order to not break people\u2019s sessions it is possible to continue using\nthe old session system by using the  Flask-OldSessions  extension. \n Flask also started storing the  flask.g  object on the application\ncontext instead of the request context.  This change should be transparent\nfor you but it means that you now can store things on the  g  object\nwhen there is no request context yet but an application context.  The old\n flask.Flask.request_globals_class  attribute was renamed to\n flask.Flask.app_ctx_globals_class . \n \n \n Version 0.9 \u00b6 \n The behavior of returning tuples from a function was simplified.  If you\nreturn a tuple it no longer defines the arguments for the response object\nyou\u2019re creating, it\u2019s now always a tuple in the form  (response,   status, \n headers)  where at least one item has to be provided.  If you depend on\nthe old behavior, you can add it easily by subclassing Flask: \n class   TraditionalFlask ( Flask ): \n     def   make_response ( self ,   rv ): \n         if   isinstance ( rv ,   tuple ): \n             return   self . response_class ( * rv ) \n         return   Flask . make_response ( self ,   rv ) \n \n \n If you maintain an extension that was using  _request_ctx_stack \nbefore, please consider changing to  _app_ctx_stack  if it makes\nsense for your extension.  For instance, the app context stack makes sense for\nextensions which connect to databases.  Using the app context stack instead of\nthe request context stack will make extensions more readily handle use cases\noutside of requests. \n \n \n Version 0.8 \u00b6 \n Flask introduced a new session interface system.  We also noticed that\nthere was a naming collision between  flask.session  the module that\nimplements sessions and  flask.session  which is the global session\nobject.  With that introduction we moved the implementation details for\nthe session system into a new module called  flask.sessions .  If you\nused the previously undocumented session support we urge you to upgrade. \n If invalid JSON data was submitted Flask will now raise a\n BadRequest  exception instead of letting the\ndefault  ValueError  bubble up.  This has the advantage that you no\nlonger have to handle that error to avoid an internal server error showing\nup for the user.  If you were catching this down explicitly in the past\nas  ValueError  you will need to change this. \n Due to a bug in the test client Flask 0.7 did not trigger teardown\nhandlers when the test client was used in a with statement.  This was\nsince fixed but might require some changes in your test suites if you\nrelied on this behavior. \n \n \n Version 0.7 \u00b6 \n In Flask 0.7 we cleaned up the code base internally a lot and did some\nbackwards incompatible changes that make it easier to implement larger\napplications with Flask.  Because we want to make upgrading as easy as\npossible we tried to counter the problems arising from these changes by\nproviding a script that can ease the transition. \n The script scans your whole application and generates a unified diff with\nchanges it assumes are safe to apply.  However as this is an automated\ntool it won\u2019t be able to find all use cases and it might miss some.  We\ninternally spread a lot of deprecation warnings all over the place to make\nit easy to find pieces of code that it was unable to upgrade. \n We strongly recommend that you hand review the generated patchfile and\nonly apply the chunks that look good. \n If you are using git as version control system for your project we\nrecommend applying the patch with  path   -p1   <   patchfile.diff  and then\nusing the interactive commit feature to only apply the chunks that look\ngood. \n To apply the upgrade script do the following: \n \n Download the script:  flask-07-upgrade.py \n \n Run it in the directory of your application: \n python   flask - 07 - upgrade . py   >   patchfile . diff \n \n \n \n Review the generated patchfile. \n \n Apply the patch: \n patch   - p1   <   patchfile . diff \n \n \n \n If you were using per-module template folders you need to move some\ntemplates around.  Previously if you had a folder named  templates \nnext to a blueprint named  admin  the implicit template path\nautomatically was  admin/index.html  for a template file called\n templates/index.html .  This no longer is the case.  Now you need\nto name the template  templates/admin/index.html .  The tool will\nnot detect this so you will have to do that on your own. \n \n \n Please note that deprecation warnings are disabled by default starting\nwith Python 2.7.  In order to see the deprecation warnings that might be\nemitted you have to enabled them with the  warnings  module. \n If you are working with windows and you lack the  patch  command line\nutility you can get it as part of various Unix runtime environments for\nwindows including cygwin, msysgit or ming32.  Also source control systems\nlike svn, hg or git have builtin support for applying unified diffs as\ngenerated by the tool.  Check the manual of your version control system\nfor more information. \n \n Bug in Request Locals \u00b6 \n Due to a bug in earlier implementations the request local proxies now\nraise a  RuntimeError  instead of an  AttributeError  when they\nare unbound.  If you caught these exceptions with  AttributeError \nbefore, you should catch them with  RuntimeError  now. \n Additionally the  send_file()  function is now issuing\ndeprecation warnings if you depend on functionality that will be removed\nin Flask 0.11.  Previously it was possible to use etags and mimetypes\nwhen file objects were passed.  This was unreliable and caused issues\nfor a few setups.  If you get a deprecation warning, make sure to\nupdate your application to work with either filenames there or disable\netag attaching and attach them yourself. \n Old code: \n return   send_file ( my_file_object ) \n return   send_file ( my_file_object ) \n \n \n New code: \n return   send_file ( my_file_object ,   add_etags = False ) \n \n \n \n \n Upgrading to new Teardown Handling \u00b6 \n We streamlined the behavior of the callbacks for request handling.  For\nthings that modify the response the  after_request() \ndecorators continue to work as expected, but for things that absolutely\nmust happen at the end of request we introduced the new\n teardown_request()  decorator.  Unfortunately that\nchange also made after-request work differently under error conditions.\nIt\u2019s not consistently skipped if exceptions happen whereas previously it\nmight have been called twice to ensure it is executed at the end of the\nrequest. \n If you have database connection code that looks like this: \n @app . after_request \n def   after_request ( response ): \n     g . db . close () \n     return   response \n \n \n You are now encouraged to use this instead: \n @app . teardown_request \n def   after_request ( exception ): \n     if   hasattr ( g ,   'db' ): \n         g . db . close () \n \n \n On the upside this change greatly improves the internal code flow and\nmakes it easier to customize the dispatching and error handling.  This\nmakes it now a lot easier to write unit tests as you can prevent closing\ndown of database connections for a while.  You can take advantage of the\nfact that the teardown callbacks are called when the response context is\nremoved from the stack so a test can query the database after request\nhandling: \n with   app . test_client ()   as   client : \n     resp   =   client . get ( '/' ) \n     # g.db is still bound if there is such a thing \n\n # and here it's gone \n \n \n \n \n Manual Error Handler Attaching \u00b6 \n While it is still possible to attach error handlers to\n Flask.error_handlers  it\u2019s discouraged to do so and in fact\ndeprecated.  In general we no longer recommend custom error handler\nattaching via assignments to the underlying dictionary due to the more\ncomplex internal handling to support arbitrary exception classes and\nblueprints.  See  Flask.errorhandler()  for more information. \n The proper upgrade is to change this: \n app . error_handlers [ 403 ]   =   handle_error \n \n \n Into this: \n app . register_error_handler ( 403 ,   handle_error ) \n \n \n Alternatively you should just attach the function with a decorator: \n @app . errorhandler ( 403 ) \n def   handle_error ( e ): \n     ... \n \n \n (Note that  register_error_handler()  is new in Flask 0.7) \n \n \n Blueprint Support \u00b6 \n Blueprints replace the previous concept of \u201cModules\u201d in Flask.  They\nprovide better semantics for various features and work better with large\napplications.  The update script provided should be able to upgrade your\napplications automatically, but there might be some cases where it fails\nto upgrade.  What changed? \n \n Blueprints need explicit names.  Modules had an automatic name\nguessing scheme where the shortname for the module was taken from the\nlast part of the import module.  The upgrade script tries to guess\nthat name but it might fail as this information could change at\nruntime. \n Blueprints have an inverse behavior for  url_for() .  Previously\n .foo  told  url_for()  that it should look for the endpoint\n foo  on the application.  Now it means \u201crelative to current module\u201d.\nThe script will inverse all calls to  url_for()  automatically for\nyou.  It will do this in a very eager way so you might end up with\nsome unnecessary leading dots in your code if you\u2019re not using\nmodules. \n Blueprints do not automatically provide static folders.  They will\nalso no longer automatically export templates from a folder called\n templates  next to their location however but it can be enabled from\nthe constructor.  Same with static files: if you want to continue\nserving static files you need to tell the constructor explicitly the\npath to the static folder (which can be relative to the blueprint\u2019s\nmodule path). \n Rendering templates was simplified.  Now the blueprints can provide\ntemplate folders which are added to a general template searchpath.\nThis means that you need to add another subfolder with the blueprint\u2019s\nname into that folder if you want  blueprintname/template.html  as\nthe template name. \n \n If you continue to use the  Module  object which is deprecated, Flask will\nrestore the previous behavior as good as possible.  However we strongly\nrecommend upgrading to the new blueprints as they provide a lot of useful\nimprovement such as the ability to attach a blueprint multiple times,\nblueprint specific error handlers and a lot more. \n \n \n \n Version 0.6 \u00b6 \n Flask 0.6 comes with a backwards incompatible change which affects the\norder of after-request handlers.  Previously they were called in the order\nof the registration, now they are called in reverse order.  This change\nwas made so that Flask behaves more like people expected it to work and\nhow other systems handle request pre- and post-processing.  If you\ndepend on the order of execution of post-request functions, be sure to\nchange the order. \n Another change that breaks backwards compatibility is that context\nprocessors will no longer override values passed directly to the template\nrendering function.  If for example  request  is as variable passed\ndirectly to the template, the default context processor will not override\nit with the current request object.  This makes it easier to extend\ncontext processors later to inject additional variables without breaking\nexisting template not expecting them. \n \n \n Version 0.5 \u00b6 \n Flask 0.5 is the first release that comes as a Python package instead of a\nsingle module.  There were a couple of internal refactoring so if you\ndepend on undocumented internal details you probably have to adapt the\nimports. \n The following changes may be relevant to your application: \n \n autoescaping no longer happens for all templates.  Instead it is\nconfigured to only happen on files ending with  .html ,  .htm ,\n .xml  and  .xhtml .  If you have templates with different\nextensions you should override the\n select_jinja_autoescape()  method. \n Flask no longer supports zipped applications in this release.  This\nfunctionality might come back in future releases if there is demand\nfor this feature.  Removing support for this makes the Flask internal\ncode easier to understand and fixes a couple of small issues that make\ndebugging harder than necessary. \n The  create_jinja_loader  function is gone.  If you want to customize\nthe Jinja loader now, use the\n create_jinja_environment()  method instead. \n \n \n \n Version 0.4 \u00b6 \n For application developers there are no changes that require changes in\nyour code.  In case you are developing on a Flask extension however, and\nthat extension has a unittest-mode you might want to link the activation\nof that mode to the new  TESTING  flag. \n \n \n Version 0.3 \u00b6 \n Flask 0.3 introduces configuration support and logging as well as\ncategories for flashing messages.  All these are features that are 100%\nbackwards compatible but you might want to take advantage of them. \n \n Configuration Support \u00b6 \n The configuration support makes it easier to write any kind of application\nthat requires some sort of configuration.  (Which most likely is the case\nfor any application out there). \n If you previously had code like this: \n app . debug   =   DEBUG \n app . secret_key   =   SECRET_KEY \n \n \n You no longer have to do that, instead you can just load a configuration\ninto the config object.  How this works is outlined in  Configuration Handling . \n \n \n Logging Integration \u00b6 \n Flask now configures a logger for you with some basic and useful defaults.\nIf you run your application in production and want to profit from\nautomatic error logging, you might be interested in attaching a proper log\nhandler.  Also you can start logging warnings and errors into the logger\nwhen appropriately.  For more information on that, read\n Application Errors . \n \n \n Categories for Flash Messages \u00b6 \n Flash messages can now have categories attached.  This makes it possible\nto render errors, warnings or regular messages differently for example.\nThis is an opt-in feature because it requires some rethinking in the code. \n Read all about that in the  Message Flashing  pattern. \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Upgrading to Newer Releases \n Version 0.12 \n Changes to send_file \n \n \n Version 0.11 \n Debugging \n Error handling \n Templating \n Extension imports \n \n \n Version 0.10 \n Version 0.9 \n Version 0.8 \n Version 0.7 \n Bug in Request Locals \n Upgrading to new Teardown Handling \n Manual Error Handler Attaching \n Blueprint Support \n \n \n Version 0.6 \n Version 0.5 \n Version 0.4 \n Version 0.3 \n Configuration Support \n Logging Integration \n Categories for Flash Messages \n \n \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Pocoo Styleguide \n           Next:  Flask Changelog \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/license/", "text": "\n   \n     \n     \n   \n     License \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n License \u00b6 \n Flask is licensed under a three clause BSD License.  It basically means:\ndo whatever you want with it as long as the copyright in Flask sticks\naround, the conditions are not modified and the disclaimer is present.\nFurthermore you must not use the names of the authors to promote derivatives\nof the software without written consent. \n The full license text can be found below ( Flask License ).  For the\ndocumentation and artwork different licenses apply. \n \n Authors \u00b6 \n Flask is developed and maintained by the Pallets team and community\ncontributors. It was created by Armin Ronacher. The core maintainers\nare: \n \n David Lord (davidism) \n Adrian M\u00f6nnich (ThiefMaster) \n Armin Ronacher (mitsuhiko) \n Marcus Unterwaditzer (untitaker) \n \n A full list of contributors is available from git with: \n git   shortlog   - sne \n \n \n \n \n General License Definitions \u00b6 \n The following section contains the full license texts for Flask and the\ndocumentation. \n \n \u201cAUTHORS\u201d hereby refers to all the authors listed in the\n Authors  section. \n The \u201c Flask License \u201d applies to all the source code shipped as\npart of Flask (Flask itself as well as the examples and the unittests)\nas well as documentation. \n The \u201c Flask Artwork License \u201d applies to the project\u2019s Horn-Logo. \n \n \n \n Flask License \u00b6 \n Copyright \u00a9 2010 by the Pallets team. \n Some rights reserved. \n Redistribution and use in source and binary forms of the software as\nwell as documentation, with or without modification, are permitted\nprovided that the following conditions are met: \n \n Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer. \n Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution. \n Neither the name of the copyright holder nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission. \n \n THIS SOFTWARE AND DOCUMENTATION IS PROVIDED BY THE COPYRIGHT HOLDERS AND\nCONTRIBUTORS \u201cAS IS\u201d AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,\nBUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\nUSE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE AND DOCUMENTATION, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE. \n \n \n Flask Artwork License \u00b6 \n Copyright (c) 2010 by Armin Ronacher. \n Some rights reserved. \n This logo or a modified version may be used by anyone to refer to the\nFlask project, but does not indicate endorsement by the project. \n Redistribution and use in source (the SVG file) and binary forms (rendered\nPNG files etc.) of the image, with or without modification, are permitted\nprovided that the following conditions are met: \n \n Redistributions of source code must retain the above copyright\nnotice and this list of conditions. \n The names of the contributors to the Flask software (see AUTHORS) may\nnot be used to endorse or promote products derived from this software\nwithout specific prior written permission. \n \n Note: we would appreciate that you make the image a link to\n http://flask.pocoo.org/  if you use it on a web page. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n License \n Authors \n General License Definitions \n Flask License \n Flask Artwork License \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Flask Changelog \n           Next:  How to contribute to Flask \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/styleguide/", "text": "\n   \n     \n     \n   \n     Pocoo Styleguide \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Pocoo Styleguide \u00b6 \n The Pocoo styleguide is the styleguide for all Pocoo Projects, including\nFlask.  This styleguide is a requirement for Patches to Flask and a\nrecommendation for Flask extensions. \n In general the Pocoo Styleguide closely follows  PEP 8  with some small\ndifferences and extensions. \n \n General Layout \u00b6 \n \n Indentation: \n 4 real spaces.  No tabs, no exceptions. \n Maximum line length: \n 79 characters with a soft limit for 84 if absolutely necessary.  Try\nto avoid too nested code by cleverly placing  break ,  continue  and\n return  statements. \n Continuing long statements: \n To continue a statement you can use backslashes in which case you should\nalign the next line with the last dot or equal sign, or indent four\nspaces: \n this_is_a_very_long ( function_call ,   'with many parameters' )  \\\n     . that_returns_an_object_with_an_attribute \n\n MyModel . query . filter ( MyModel . scalar   >   120 )  \\\n              . order_by ( MyModel . name . desc ())  \\\n              . limit ( 10 ) \n \n \n If you break in a statement with parentheses or braces, align to the\nbraces: \n this_is_a_very_long ( function_call ,   'with many parameters' , \n                     23 ,   42 ,   'and even more' ) \n \n \n For lists or tuples with many items, break immediately after the\nopening brace: \n items   =   [ \n     'this is the first' ,   'set of items' ,   'with more items' , \n     'to come in this line' ,   'like this' \n ] \n \n \n \n Blank lines: \n Top level functions and classes are separated by two lines, everything\nelse by one.  Do not use too many blank lines to separate logical\nsegments in code.  Example: \n def   hello ( name ): \n     print   'Hello  %s !'   %   name \n\n\n def   goodbye ( name ): \n     print   'See you  %s .'   %   name \n\n\n class   MyClass ( object ): \n     \"\"\"This is a simple docstring\"\"\" \n\n     def   __init__ ( self ,   name ): \n         self . name   =   name \n\n     def   get_annoying_name ( self ): \n         return   self . name . upper ()   +   '!!!!111' \n \n \n \n \n \n \n Expressions and Statements \u00b6 \n \n General whitespace rules: \n \n No whitespace for unary operators that are not words\n(e.g.:  - ,  ~  etc.) as well on the inner side of parentheses. \n Whitespace is placed between binary operators. \n \n Good: \n exp   =   - 1.05 \n value   =   ( item_value   /   item_count )   *   offset   /   exp \n value   =   my_list [ index ] \n value   =   my_dict [ 'key' ] \n \n \n Bad: \n exp   =   -   1.05 \n value   =   (   item_value   /   item_count   )   *   offset   /   exp \n value   =   ( item_value / item_count ) * offset / exp \n value = (   item_value / item_count   )   *   offset / exp \n value   =   my_list [   index   ] \n value   =   my_dict   [ 'key' ] \n \n \n \n Yoda statements are a no-go: \n Never compare constant with variable, always variable with constant: \n Good: \n if   method   ==   'md5' : \n     pass \n \n \n Bad: \n if   'md5'   ==   method : \n     pass \n \n \n \n Comparisons: \n \n against arbitrary types:  ==  and  != \n against singletons with  is  and  is   not  (eg:  foo   is   not \n None ) \n never compare something with  True  or  False  (for example never\ndo  foo   ==   False , do  not   foo  instead) \n \n \n Negated containment checks: \n use  foo   not   in   bar  instead of  not   foo   in   bar \n Instance checks: \n isinstance(a,   C)  instead of  type(A)   is   C , but try to avoid\ninstance checks in general.  Check for features. \n \n \n \n Naming Conventions \u00b6 \n \n Class names:  CamelCase , with acronyms kept uppercase ( HTTPWriter \nand not  HttpWriter ) \n Variable names:  lowercase_with_underscores \n Method and function names:  lowercase_with_underscores \n Constants:  UPPERCASE_WITH_UNDERSCORES \n precompiled regular expressions:  name_re \n \n Protected members are prefixed with a single underscore.  Double\nunderscores are reserved for mixin classes. \n On classes with keywords, trailing underscores are appended.  Clashes with\nbuiltins are allowed and  must not  be resolved by appending an\nunderline to the variable name.  If the function needs to access a\nshadowed builtin, rebind the builtin to a different name instead. \n \n Function and method arguments: \n \n class methods:  cls  as first parameter \n instance methods:  self  as first parameter \n lambdas for properties might have the first parameter replaced\nwith  x  like in  display_name   =   property(lambda   x:   x.real_name \n or   x.username) \n \n \n \n \n \n Docstrings \u00b6 \n \n Docstring conventions: \n All docstrings are formatted with reStructuredText as understood by\nSphinx.  Depending on the number of lines in the docstring, they are\nlaid out differently.  If it\u2019s just one line, the closing triple\nquote is on the same line as the opening, otherwise the text is on\nthe same line as the opening quote and the triple quote that closes\nthe string on its own line: \n def   foo (): \n     \"\"\"This is a simple docstring\"\"\" \n\n\n def   bar (): \n     \"\"\"This is a longer docstring with so much information in there \n     that it spans three lines.  In this case the closing triple quote \n     is on its own line. \n     \"\"\" \n \n \n \n Module header: \n The module header consists of a utf-8 encoding declaration (if non\nASCII letters are used, but it is recommended all the time) and a\nstandard docstring: \n # -*- coding: utf-8 -*- \n \"\"\" \n     package.module \n     ~~~~~~~~~~~~~~ \n\n     A brief description goes here. \n\n     :copyright: (c) YEAR by AUTHOR. \n     :license: LICENSE_NAME, see LICENSE_FILE for more details. \n \"\"\" \n \n \n Please keep in mind that proper copyrights and license files are a\nrequirement for approved Flask extensions. \n \n \n \n \n Comments \u00b6 \n Rules for comments are similar to docstrings.  Both are formatted with\nreStructuredText.  If a comment is used to document an attribute, put a\ncolon after the opening pound sign ( # ): \n class   User ( object ): \n     #: the name of the user as unicode string \n     name   =   Column ( String ) \n     #: the sha1 hash of the password + inline salt \n     pw_hash   =   Column ( String ) \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Pocoo Styleguide \n General Layout \n Expressions and Statements \n Naming Conventions \n Docstrings \n Comments \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Flask Extension Development \n           Next:  Upgrading to Newer Releases \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/unicode/", "text": "\n   \n     \n     \n   \n     Unicode in Flask \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Unicode in Flask \u00b6 \n Flask, like Jinja2 and Werkzeug, is totally Unicode based when it comes to\ntext.  Not only these libraries, also the majority of web related Python\nlibraries that deal with text.  If you don\u2019t know Unicode so far, you\nshould probably read  The Absolute Minimum Every Software Developer\nAbsolutely, Positively Must Know About Unicode and Character Sets .  This part of the\ndocumentation just tries to cover the very basics so that you have a\npleasant experience with Unicode related things. \n \n Automatic Conversion \u00b6 \n Flask has a few assumptions about your application (which you can change\nof course) that give you basic and painless Unicode support: \n \n the encoding for text on your website is UTF-8 \n internally you will always use Unicode exclusively for text except\nfor literal strings with only ASCII character points. \n encoding and decoding happens whenever you are talking over a protocol\nthat requires bytes to be transmitted. \n \n So what does this mean to you? \n HTTP is based on bytes.  Not only the protocol, also the system used to\naddress documents on servers (so called URIs or URLs).  However HTML which\nis usually transmitted on top of HTTP supports a large variety of\ncharacter sets and which ones are used, are transmitted in an HTTP header.\nTo not make this too complex Flask just assumes that if you are sending\nUnicode out you want it to be UTF-8 encoded.  Flask will do the encoding\nand setting of the appropriate headers for you. \n The same is true if you are talking to databases with the help of\nSQLAlchemy or a similar ORM system.  Some databases have a protocol that\nalready transmits Unicode and if they do not, SQLAlchemy or your other ORM\nshould take care of that. \n \n \n The Golden Rule \u00b6 \n So the rule of thumb: if you are not dealing with binary data, work with\nUnicode.  What does working with Unicode in Python 2.x mean? \n \n as long as you are using ASCII charpoints only (basically numbers,\nsome special characters of latin letters without umlauts or anything\nfancy) you can use regular string literals ( 'Hello   World' ). \n if you need anything else than ASCII in a string you have to mark\nthis string as Unicode string by prefixing it with a lowercase  u .\n(like  u'H\u00e4nsel   und   Gretel' ) \n if you are using non-Unicode characters in your Python files you have\nto tell Python which encoding your file uses.  Again, I recommend\nUTF-8 for this purpose.  To tell the interpreter your encoding you can\nput the  #   -*-   coding:   utf-8   -*-  into the first or second line of\nyour Python source file. \n Jinja is configured to decode the template files from UTF-8.  So make\nsure to tell your editor to save the file as UTF-8 there as well. \n \n \n \n Encoding and Decoding Yourself \u00b6 \n If you are talking with a filesystem or something that is not really based\non Unicode you will have to ensure that you decode properly when working\nwith Unicode interface.  So for example if you want to load a file on the\nfilesystem and embed it into a Jinja2 template you will have to decode it\nfrom the encoding of that file.  Here the old problem that text files do\nnot specify their encoding comes into play.  So do yourself a favour and\nlimit yourself to UTF-8 for text files as well. \n Anyways.  To load such a file with Unicode you can use the built-in\n str.decode()  method: \n def   read_file ( filename ,   charset = 'utf-8' ): \n     with   open ( filename ,   'r' )   as   f : \n         return   f . read () . decode ( charset ) \n \n \n To go from Unicode into a specific charset such as UTF-8 you can use the\n unicode.encode()  method: \n def   write_file ( filename ,   contents ,   charset = 'utf-8' ): \n     with   open ( filename ,   'w' )   as   f : \n         f . write ( contents . encode ( charset )) \n \n \n \n \n Configuring Editors \u00b6 \n Most editors save as UTF-8 by default nowadays but in case your editor is\nnot configured to do this you have to change it.  Here some common ways to\nset your editor to store as UTF-8: \n \n Vim: put  set   enc=utf-8  to your  .vimrc  file. \n \n Emacs: either use an encoding cookie or put this into your  .emacs \nfile: \n ( prefer - coding - system   'utf-8) \n ( setq   default - buffer - file - coding - system   'utf-8) \n \n \n \n Notepad++: \n \n Go to  Settings -> Preferences \u2026 \n Select the \u201cNew Document/Default Directory\u201d tab \n Select \u201cUTF-8 without BOM\u201d as encoding \n \n It is also recommended to use the Unix newline format, you can select\nit in the same panel but this is not a requirement. \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Unicode in Flask \n Automatic Conversion \n The Golden Rule \n Encoding and Decoding Yourself \n Configuring Editors \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Security Considerations \n           Next:  Flask Extension Development \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/changelog/", "text": "\n   \n     \n     \n   \n     Flask Changelog \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Flask Changelog \u00b6 \n \n Version 1.0.3 \u00b6 \n Unreleased \n \n \n Version 1.0.2 \u00b6 \n Released on May 2nd 2018 \n \n Fix more backwards compatibility issues with merging slashes between\na blueprint prefix and route. ( #2748 ) \n Fix error with  flask   routes  command when there are no routes.\n( #2751 ) \n \n \n \n Version 1.0.1 \u00b6 \n Released on April 29th 2018 \n \n Fix registering partials (with no  __name__ ) as view functions.\n( #2730 ) \n Don\u2019t treat lists returned from view functions the same as tuples.\nOnly tuples are interpreted as response data. ( #2736 ) \n Extra slashes between a blueprint\u2019s  url_prefix  and a route URL\nare merged. This fixes some backwards compatibility issues with the\nchange in 1.0. ( #2731 ,  #2742 ) \n Only trap  BadRequestKeyError  errors in debug mode, not all\n BadRequest  errors. This allows  abort(400)  to continue\nworking as expected. ( #2735 ) \n The  FLASK_SKIP_DOTENV  environment variable can be set to  1 \nto skip automatically loading dotenv files. ( #2722 ) \n \n \n \n Version 1.0 \u00b6 \n Released on April 26th 2018 \n \n Python 2.6 and 3.3 are no longer supported.  ( pallets/meta#24 ) \n Bump minimum dependency versions to the latest stable versions:\nWerkzeug >= 0.14, Jinja >= 2.10, itsdangerous >= 0.24, Click >= 5.1.\n( #2586 ) \n Skip  app.run  when a Flask application is run\nfrom the command line. This avoids some behavior that was confusing\nto debug. \n Change the default for  JSONIFY_PRETTYPRINT_REGULAR  to\n False .  jsonify()  returns a compact format by\ndefault, and an indented format in debug mode. ( #2193 ) \n Flask.__init__  accepts the  host_matching \nargument and sets it on  url_map . ( #1559 ) \n Flask.__init__  accepts the  static_host  argument\nand passes it as the  host  argument when defining the static\nroute. ( #1559 ) \n send_file()  supports Unicode in  attachment_filename .\n( #2223 ) \n Pass  _scheme  argument from  url_for()  to\n handle_url_build_error() . ( #2017 ) \n add_url_rule()  accepts the\n provide_automatic_options  argument to disable adding the\n OPTIONS  method. ( #1489 ) \n MethodView  subclasses inherit method handlers from\nbase classes. ( #1936 ) \n Errors caused while opening the session at the beginning of the\nrequest are handled by the app\u2019s error handlers. ( #2254 ) \n Blueprints gained  json_encoder  and\n json_decoder  attributes to override the app\u2019s\nencoder and decoder. ( #1898 ) \n Flask.make_response()  raises  TypeError  instead of\n ValueError  for bad response types. The error messages have been\nimproved to describe why the type is invalid. ( #2256 ) \n Add  routes  CLI command to output routes registered on the\napplication. ( #2259 ) \n Show warning when session cookie domain is a bare hostname or an IP\naddress, as these may not behave properly in some browsers, such as\nChrome. ( #2282 ) \n Allow IP address as exact session cookie domain. ( #2282 ) \n SESSION_COOKIE_DOMAIN  is set if it is detected through\n SERVER_NAME . ( #2282 ) \n Auto-detect zero-argument app factory called  create_app  or\n make_app  from  FLASK_APP . ( #2297 ) \n Factory functions are not required to take a  script_info \nparameter to work with the  flask  command. If they take a single\nparameter or a parameter named  script_info , the\n ScriptInfo  object will be passed. ( #2319 ) \n FLASK_APP  can be set to an app factory, with arguments if\nneeded, for example  FLASK_APP=myproject.app:create_app('dev') .\n( #2326 ) \n FLASK_APP  can point to local packages that are not installed in\neditable mode, although  pip   install   -e  is still preferred.\n( #2414 ) \n The  View  class attribute\n provide_automatic_options  is set in\n as_view() , to be detected by\n add_url_rule() . ( #2316 ) \n Error handling will try handlers registered for  blueprint,   code ,\n app,   code ,  blueprint,   exception ,  app,   exception .\n( #2314 ) \n Cookie  is added to the response\u2019s  Vary  header if the session\nis accessed at all during the request (and not deleted). ( #2288 ) \n test_request_context()  accepts  subdomain  and\n url_scheme  arguments for use when building the base URL.\n( #1621 ) \n Set  APPLICATION_ROOT  to  '/'  by default. This was already\nthe implicit default when it was set to  None . \n TRAP_BAD_REQUEST_ERRORS  is enabled by default in debug mode.\n BadRequestKeyError  has a message with the bad key in debug mode\ninstead of the generic bad request message. ( #2348 ) \n Allow registering new tags with\n TaggedJSONSerializer  to support storing other\ntypes in the session cookie. ( #2352 ) \n Only open the session if the request has not been pushed onto the\ncontext stack yet. This allows  stream_with_context() \ngenerators to access the same session that the containing view uses.\n( #2354 ) \n Add  json  keyword argument for the test client request methods.\nThis will dump the given object as JSON and set the appropriate\ncontent type. ( #2358 ) \n Extract JSON handling to a mixin applied to both the\n Request  and  Response  classes. This adds the\n is_json()  and  get_json()  methods to\nthe response to make testing JSON response much easier. ( #2358 ) \n Removed error handler caching because it caused unexpected results\nfor some exception inheritance hierarchies. Register handlers\nexplicitly for each exception if you want to avoid traversing the\nMRO. ( #2362 ) \n Fix incorrect JSON encoding of aware, non-UTC datetimes. ( #2374 ) \n Template auto reloading will honor debug mode even even if\n jinja_env  was already accessed. ( #2373 ) \n The following old deprecated code was removed. ( #2385 ) \n flask.ext  - import extensions directly by their name instead\nof through the  flask.ext  namespace. For example,\n import   flask.ext.sqlalchemy  becomes\n import   flask_sqlalchemy . \n Flask.init_jinja_globals  - extend\n Flask.create_jinja_environment()  instead. \n Flask.error_handlers  - tracked by\n Flask.error_handler_spec , use  Flask.errorhandler() \nto register handlers. \n Flask.request_globals_class  - use\n Flask.app_ctx_globals_class  instead. \n Flask.static_path  - use  Flask.static_url_path \ninstead. \n Request.module  - use  Request.blueprint  instead. \n \n \n The  Request.json  property is no longer deprecated.\n( #1421 ) \n Support passing a  EnvironBuilder  or\n dict  to  test_client.open .\n( #2412 ) \n The  flask  command and  Flask.run()  will load environment\nvariables from  .env  and  .flaskenv  files if python-dotenv is\ninstalled. ( #2416 ) \n When passing a full URL to the test client, the scheme in the URL is\nused instead of  PREFERRED_URL_SCHEME . ( #2430 ) \n Flask.logger  has been simplified.  LOGGER_NAME  and\n LOGGER_HANDLER_POLICY  config was removed. The logger is always\nnamed  flask.app . The level is only set on first access, it\ndoesn\u2019t check  Flask.debug  each time. Only one format is\nused, not different ones depending on  Flask.debug . No\nhandlers are removed, and a handler is only added if no handlers are\nalready configured. ( #2436 ) \n Blueprint view function names may not contain dots. ( #2450 ) \n Fix a  ValueError  caused by invalid  Range  requests in some\ncases. ( #2526 ) \n The development server uses threads by default. ( #2529 ) \n Loading config files with  silent=True  will ignore\n ENOTDIR  errors. ( #2581 ) \n Pass  --cert  and  --key  options to  flask   run  to run the\ndevelopment server over HTTPS. ( #2606 ) \n Added  SESSION_COOKIE_SAMESITE  to control the  SameSite \nattribute on the session cookie. ( #2607 ) \n Added  test_cli_runner()  to create a Click runner\nthat can invoke Flask CLI commands for testing. ( #2636 ) \n Subdomain matching is disabled by default and setting\n SERVER_NAME  does not implicily enable it. It can be enabled\nby passing  subdomain_matching=True  to the  Flask  constructor.\n( #2635 ) \n A single trailing slash is stripped from the blueprint\n url_prefix  when it is registered with the app. ( #2629 ) \n Request.get_json()  doesn\u2019t cache the\nresult if parsing fails when  silent  is true. ( #2651 ) \n Request.get_json()  no longer accepts arbitrary encodings.\nIncoming JSON should be encoded using UTF-8 per  RFC 8259 , but\nFlask will autodetect UTF-8, -16, or -32. ( #2691 ) \n Added  MAX_COOKIE_SIZE  and  Response.max_cookie_size \nto control when Werkzeug warns about large cookies that browsers may\nignore. ( #2693 ) \n Updated documentation theme to make docs look better in small\nwindows. ( #2709 ) \n Rewrote the tutorial docs and example project to take a more\nstructured approach to help new users avoid common pitfalls.\n( #2676 ) \n \n \n \n Version 0.12.4 \u00b6 \n Released on April 29 2018 \n \n Repackage 0.12.3 to fix package layout issue. ( #2728 ) \n \n \n \n Version 0.12.3 \u00b6 \n Released on April 26th 2018 \n \n Request.get_json()  no longer accepts arbitrary encodings.\nIncoming JSON should be encoded using UTF-8 per  RFC 8259 , but\nFlask will autodetect UTF-8, -16, or -32. ( #2692 ) \n Fix a Python warning about imports when using  python   -m   flask .\n( #2666 ) \n Fix a  ValueError  caused by invalid  Range  requests in some\ncases. \n \n \n \n Version 0.12.2 \u00b6 \n Released on May 16 2017 \n \n Fix a bug in  safe_join  on Windows. \n \n \n \n Version 0.12.1 \u00b6 \n Bugfix release, released on March 31st 2017 \n \n Prevent  flask run  from showing a NoAppException when an ImportError occurs\nwithin the imported application module. \n Fix encoding behavior of  app.config.from_pyfile  for Python 3. Fix\n #2118 . \n Use the  SERVER_NAME  config if it is present as default values for\n app.run .  #2109 ,  #2152 \n Call  ctx.auto_pop  with the exception object instead of  None , in the\nevent that a  BaseException  such as  KeyboardInterrupt  is raised in a\nrequest handler. \n \n \n \n Version 0.12 \u00b6 \n Released on December 21st 2016, codename Punsch. \n \n the cli command now responds to  \u2013version . \n Mimetype guessing and ETag generation for file-like objects in  send_file \nhas been removed, as per issue  #104 .  See pull request  #1849 . \n Mimetype guessing in  send_file  now fails loudly and doesn\u2019t fall back to\n application/octet-stream . See pull request  #1988 . \n Make  flask.safe_join  able to join multiple paths like  os.path.join \n(pull request  #1730 ). \n Revert a behavior change that made the dev server crash instead of returning\na Internal Server Error (pull request  #2006 ). \n Correctly invoke response handlers for both regular request dispatching as\nwell as error handlers. \n Disable logger propagation by default for the app logger. \n Add support for range requests in  send_file . \n app.test_client  includes preset default environment, which can now be\ndirectly set, instead of per  client.get . \n \n \n \n Version 0.11.2 \u00b6 \n Bugfix release, unreleased \n \n Fix crash when running under PyPy3, see pull request  #1814 . \n \n \n \n Version 0.11.1 \u00b6 \n Bugfix release, released on June 7th 2016. \n \n Fixed a bug that prevented  FLASK_APP=foobar/__init__.py  from working. See\npull request  #1872 . \n \n \n \n Version 0.11 \u00b6 \n Released on May 29th 2016, codename Absinthe. \n \n Added support to serializing top-level arrays to  flask.jsonify() . This\nintroduces a security risk in ancient browsers. See\n JSON Security  for details. \n Added before_render_template signal. \n Added  **kwargs  to  flask.Test.test_client()  to support passing\nadditional keyword arguments to the constructor of\n flask.Flask.test_client_class . \n Added  SESSION_REFRESH_EACH_REQUEST  config key that controls the\nset-cookie behavior.  If set to  True  a permanent session will be\nrefreshed each request and get their lifetime extended, if set to\n False  it will only be modified if the session actually modifies.\nNon permanent sessions are not affected by this and will always\nexpire if the browser window closes. \n Made Flask support custom JSON mimetypes for incoming data. \n Added support for returning tuples in the form  (response,   headers) \nfrom a view function. \n Added  flask.Config.from_json() . \n Added  flask.Flask.config_class . \n Added  flask.Config.get_namespace() . \n Templates are no longer automatically reloaded outside of debug mode. This\ncan be configured with the new  TEMPLATES_AUTO_RELOAD  config key. \n Added a workaround for a limitation in Python 3.3\u2019s namespace loader. \n Added support for explicit root paths when using Python 3.3\u2019s namespace\npackages. \n Added  flask  and the  flask.cli  module to start the local\ndebug server through the click CLI system.  This is recommended over the old\n flask.run()  method as it works faster and more reliable due to a\ndifferent design and also replaces  Flask-Script . \n Error handlers that match specific classes are now checked first,\nthereby allowing catching exceptions that are subclasses of HTTP\nexceptions (in  werkzeug.exceptions ).  This makes it possible\nfor an extension author to create exceptions that will by default\nresult in the HTTP error of their choosing, but may be caught with\na custom error handler if desired. \n Added  flask.Config.from_mapping() . \n Flask will now log by default even if debug is disabled.  The log format is\nnow hardcoded but the default log handling can be disabled through the\n LOGGER_HANDLER_POLICY  configuration key. \n Removed deprecated module functionality. \n Added the  EXPLAIN_TEMPLATE_LOADING  config flag which when enabled will\ninstruct Flask to explain how it locates templates.  This should help\nusers debug when the wrong templates are loaded. \n Enforce blueprint handling in the order they were registered for template\nloading. \n Ported test suite to py.test. \n Deprecated  request.json  in favour of  request.get_json() . \n Add \u201cpretty\u201d and \u201ccompressed\u201d separators definitions in jsonify() method.\nReduces JSON response size when JSONIFY_PRETTYPRINT_REGULAR=False by removing\nunnecessary white space included by default after separators. \n JSON responses are now terminated with a newline character, because it is a\nconvention that UNIX text files end with a newline and some clients don\u2019t\ndeal well when this newline is missing. See\n https://github.com/pallets/flask/pull/1262  \u2013 this came up originally as a\npart of  https://github.com/kennethreitz/httpbin/issues/168 \n The automatically provided  OPTIONS  method is now correctly disabled if\nthe user registered an overriding rule with the lowercase-version\n options  (issue  #1288 ). \n flask.json.jsonify  now supports the  datetime.date  type (pull request\n #1326 ). \n Don\u2019t leak exception info of already catched exceptions to context teardown\nhandlers (pull request  #1393 ). \n Allow custom Jinja environment subclasses (pull request  #1422 ). \n Updated extension dev guidelines. \n flask.g  now has  pop()  and  setdefault  methods. \n Turn on autoescape for  flask.templating.render_template_string  by default\n(pull request  #1515 ). \n flask.ext  is now deprecated (pull request  #1484 ). \n send_from_directory  now raises BadRequest if the filename is invalid on\nthe server OS (pull request  #1763 ). \n Added the  JSONIFY_MIMETYPE  configuration variable (pull request  #1728 ). \n Exceptions during teardown handling will no longer leave bad application\ncontexts lingering around. \n \n \n \n Version 0.10.2 \u00b6 \n (bugfix release, release date to be announced) \n \n Fixed broken  test_appcontext_signals()  test case. \n Raise an  AttributeError  in  flask.helpers.find_package()  with a\nuseful message explaining why it is raised when a PEP 302 import hook is used\nwithout an  is_package()  method. \n Fixed an issue causing exceptions raised before entering a request or app\ncontext to be passed to teardown handlers. \n Fixed an issue with query parameters getting removed from requests in\nthe test client when absolute URLs were requested. \n Made  @before_first_request  into a decorator as intended. \n Fixed an etags bug when sending a file streams with a name. \n Fixed  send_from_directory  not expanding to the application root path\ncorrectly. \n Changed logic of before first request handlers to flip the flag after\ninvoking.  This will allow some uses that are potentially dangerous but\nshould probably be permitted. \n Fixed Python 3 bug when a handler from  app.url_build_error_handlers \nreraises the  BuildError . \n \n \n \n Version 0.10.1 \u00b6 \n (bugfix release, released on June 14th 2013) \n \n Fixed an issue where  |tojson  was not quoting single quotes which\nmade the filter not work properly in HTML attributes.  Now it\u2019s\npossible to use that filter in single quoted attributes.  This should\nmake using that filter with angular.js easier. \n Added support for byte strings back to the session system.  This broke\ncompatibility with the common case of people putting binary data for\ntoken verification into the session. \n Fixed an issue where registering the same method twice for the same endpoint\nwould trigger an exception incorrectly. \n \n \n \n Version 0.10 \u00b6 \n Released on June 13th 2013, codename Limoncello. \n \n Changed default cookie serialization format from pickle to JSON to\nlimit the impact an attacker can do if the secret key leaks.  See\n Version 0.10  for more information. \n Added  template_test  methods in addition to the already existing\n template_filter  method family. \n Added  template_global  methods in addition to the already existing\n template_filter  method family. \n Set the content-length header for x-sendfile. \n tojson  filter now does not escape script blocks in HTML5 parsers. \n tojson  used in templates is now safe by default due.  This was\nallowed due to the different escaping behavior. \n Flask will now raise an error if you attempt to register a new function\non an already used endpoint. \n Added wrapper module around simplejson and added default serialization\nof datetime objects.  This allows much easier customization of how\nJSON is handled by Flask or any Flask extension. \n Removed deprecated internal  flask.session  module alias.  Use\n flask.sessions  instead to get the session module.  This is not to\nbe confused with  flask.session  the session proxy. \n Templates can now be rendered without request context.  The behavior is\nslightly different as the  request ,  session  and  g  objects\nwill not be available and blueprint\u2019s context processors are not\ncalled. \n The config object is now available to the template as a real global and\nnot through a context processor which makes it available even in imported\ntemplates by default. \n Added an option to generate non-ascii encoded JSON which should result\nin less bytes being transmitted over the network.  It\u2019s disabled by\ndefault to not cause confusion with existing libraries that might expect\n flask.json.dumps  to return bytestrings by default. \n flask.g  is now stored on the app context instead of the request\ncontext. \n flask.g  now gained a  get()  method for not erroring out on non\nexisting items. \n flask.g  now can be used with the  in  operator to see what\u2019s defined\nand it now is iterable and will yield all attributes stored. \n flask.Flask.request_globals_class  got renamed to\n flask.Flask.app_ctx_globals_class  which is a better name to what it\ndoes since 0.10. \n request ,  session  and  g  are now also added as proxies to the template\ncontext which makes them available in imported templates.  One has to be\nvery careful with those though because usage outside of macros might\ncause caching. \n Flask will no longer invoke the wrong error handlers if a proxy\nexception is passed through. \n Added a workaround for chrome\u2019s cookies in localhost not working\nas intended with domain names. \n Changed logic for picking defaults for cookie values from sessions\nto work better with Google Chrome. \n Added  message_flashed  signal that simplifies flashing testing. \n Added support for copying of request contexts for better working with\ngreenlets. \n Removed custom JSON HTTP exception subclasses.  If you were relying on them\nyou can reintroduce them again yourself trivially.  Using them however is\nstrongly discouraged as the interface was flawed. \n Python requirements changed: requiring Python 2.6 or 2.7 now to prepare\nfor Python 3.3 port. \n Changed how the teardown system is informed about exceptions.  This is now\nmore reliable in case something handles an exception halfway through\nthe error handling process. \n Request context preservation in debug mode now keeps the exception\ninformation around which means that teardown handlers are able to\ndistinguish error from success cases. \n Added the  JSONIFY_PRETTYPRINT_REGULAR  configuration variable. \n Flask now orders JSON keys by default to not trash HTTP caches due to\ndifferent hash seeds between different workers. \n Added  appcontext_pushed  and  appcontext_popped  signals. \n The builtin run method now takes the  SERVER_NAME  into account when\npicking the default port to run on. \n Added  flask.request.get_json()  as a replacement for the old\n flask.request.json  property. \n \n \n \n Version 0.9 \u00b6 \n Released on July 1st 2012, codename Campari. \n \n The  flask.Request.on_json_loading_failed()  now returns a JSON formatted\nresponse by default. \n The  flask.url_for()  function now can generate anchors to the\ngenerated links. \n The  flask.url_for()  function now can also explicitly generate\nURL rules specific to a given HTTP method. \n Logger now only returns the debug log setting if it was not set\nexplicitly. \n Unregister a circular dependency between the WSGI environment and\nthe request object when shutting down the request.  This means that\nenviron  werkzeug.request  will be  None  after the response was\nreturned to the WSGI server but has the advantage that the garbage\ncollector is not needed on CPython to tear down the request unless\nthe user created circular dependencies themselves. \n Session is now stored after callbacks so that if the session payload\nis stored in the session you can still modify it in an after\nrequest callback. \n The  flask.Flask  class will avoid importing the provided import name\nif it can (the required first parameter), to benefit tools which build Flask\ninstances programmatically.  The Flask class will fall back to using import\non systems with custom module hooks, e.g. Google App Engine, or when the\nimport name is inside a zip archive (usually a .egg) prior to Python 2.7. \n Blueprints now have a decorator to add custom template filters application\nwide,  flask.Blueprint.app_template_filter() . \n The Flask and Blueprint classes now have a non-decorator method for adding\ncustom template filters application wide,\n flask.Flask.add_template_filter()  and\n flask.Blueprint.add_app_template_filter() . \n The  flask.get_flashed_messages()  function now allows rendering flashed\nmessage categories in separate blocks, through a  category_filter \nargument. \n The  flask.Flask.run()  method now accepts  None  for  host  and  port \narguments, using default values when  None .  This allows for calling run\nusing configuration values, e.g.  app.run(app.config.get('MYHOST'), \n app.config.get('MYPORT')) , with proper behavior whether or not a config\nfile is provided. \n The  flask.render_template()  method now accepts a either an iterable of\ntemplate names or a single template name.  Previously, it only accepted a\nsingle template name.  On an iterable, the first template found is rendered. \n Added  flask.Flask.app_context()  which works very similar to the\nrequest context but only provides access to the current application.  This\nalso adds support for URL generation without an active request context. \n View functions can now return a tuple with the first instance being an\ninstance of  flask.Response .  This allows for returning\n jsonify(error=\"error   msg\"),   400  from a view function. \n Flask  and  Blueprint  now provide a\n get_send_file_max_age()  hook for subclasses to override\nbehavior of serving static files from Flask when using\n flask.Flask.send_static_file()  (used for the default static file\nhandler) and  send_file() .  This hook is provided a\nfilename, which for example allows changing cache controls by file extension.\nThe default max-age for  send_file  and static files can be configured\nthrough a new  SEND_FILE_MAX_AGE_DEFAULT  configuration variable, which is\nused in the default  get_send_file_max_age  implementation. \n Fixed an assumption in sessions implementation which could break message\nflashing on sessions implementations which use external storage. \n Changed the behavior of tuple return values from functions.  They are no\nlonger arguments to the response object, they now have a defined meaning. \n Added  flask.Flask.request_globals_class  to allow a specific class to\nbe used on creation of the  g  instance of each request. \n Added  required_methods  attribute to view functions to force-add methods\non registration. \n Added  flask.after_this_request() . \n Added  flask.stream_with_context()  and the ability to push contexts\nmultiple times without producing unexpected behavior. \n \n \n \n Version 0.8.1 \u00b6 \n Bugfix release, released on July 1st 2012 \n \n Fixed an issue with the undocumented  flask.session  module to not\nwork properly on Python 2.5.  It should not be used but did cause\nsome problems for package managers. \n \n \n \n Version 0.8 \u00b6 \n Released on September 29th 2011, codename Rakija \n \n Refactored session support into a session interface so that\nthe implementation of the sessions can be changed without\nhaving to override the Flask class. \n Empty session cookies are now deleted properly automatically. \n View functions can now opt out of getting the automatic\nOPTIONS implementation. \n HTTP exceptions and Bad Request errors can now be trapped so that they\nshow up normally in the traceback. \n Flask in debug mode is now detecting some common problems and tries to\nwarn you about them. \n Flask in debug mode will now complain with an assertion error if a view\nwas attached after the first request was handled.  This gives earlier\nfeedback when users forget to import view code ahead of time. \n Added the ability to register callbacks that are only triggered once at\nthe beginning of the first request. ( Flask.before_first_request() ) \n Malformed JSON data will now trigger a bad request HTTP exception instead\nof a value error which usually would result in a 500 internal server\nerror if not handled.  This is a backwards incompatible change. \n Applications now not only have a root path where the resources and modules\nare located but also an instance path which is the designated place to\ndrop files that are modified at runtime (uploads etc.).  Also this is\nconceptually only instance depending and outside version control so it\u2019s\nthe perfect place to put configuration files etc.  For more information\nsee  Instance Folders . \n Added the  APPLICATION_ROOT  configuration variable. \n Implemented  session_transaction()  to\neasily modify sessions from the test environment. \n Refactored test client internally.  The  APPLICATION_ROOT  configuration\nvariable as well as  SERVER_NAME  are now properly used by the test client\nas defaults. \n Added  flask.views.View.decorators  to support simpler decorating of\npluggable (class-based) views. \n Fixed an issue where the test client if used with the \u201cwith\u201d statement did not\ntrigger the execution of the teardown handlers. \n Added finer control over the session cookie parameters. \n HEAD requests to a method view now automatically dispatch to the  get \nmethod if no handler was implemented. \n Implemented the virtual  flask.ext  package to import extensions from. \n The context preservation on exceptions is now an integral component of\nFlask itself and no longer of the test client.  This cleaned up some\ninternal logic and lowers the odds of runaway request contexts in unittests. \n \n \n \n Version 0.7.3 \u00b6 \n Bugfix release, release date to be decided \n \n Fixed the Jinja2 environment\u2019s list_templates method not returning the\ncorrect names when blueprints or modules were involved. \n \n \n \n Version 0.7.2 \u00b6 \n Bugfix release, released on July 6th 2011 \n \n Fixed an issue with URL processors not properly working on\nblueprints. \n \n \n \n Version 0.7.1 \u00b6 \n Bugfix release, released on June 29th 2011 \n \n Added missing future import that broke 2.5 compatibility. \n Fixed an infinite redirect issue with blueprints. \n \n \n \n Version 0.7 \u00b6 \n Released on June 28th 2011, codename Grappa \n \n Added  make_default_options_response() \nwhich can be used by subclasses to alter the default\nbehavior for  OPTIONS  responses. \n Unbound locals now raise a proper  RuntimeError  instead\nof an  AttributeError . \n Mimetype guessing and etag support based on file objects is now\ndeprecated for  flask.send_file()  because it was unreliable.\nPass filenames instead or attach your own etags and provide a\nproper mimetype by hand. \n Static file handling for modules now requires the name of the\nstatic folder to be supplied explicitly.  The previous autodetection\nwas not reliable and caused issues on Google\u2019s App Engine.  Until\n1.0 the old behavior will continue to work but issue dependency\nwarnings. \n fixed a problem for Flask to run on jython. \n added a  PROPAGATE_EXCEPTIONS  configuration variable that can be\nused to flip the setting of exception propagation which previously\nwas linked to  DEBUG  alone and is now linked to either  DEBUG  or\n TESTING . \n Flask no longer internally depends on rules being added through the\n add_url_rule  function and can now also accept regular werkzeug\nrules added to the url map. \n Added an  endpoint  method to the flask application object which\nallows one to register a callback to an arbitrary endpoint with\na decorator. \n Use Last-Modified for static file sending instead of Date which\nwas incorrectly introduced in 0.6. \n Added  create_jinja_loader  to override the loader creation process. \n Implemented a silent flag for  config.from_pyfile . \n Added  teardown_request  decorator, for functions that should run at the end\nof a request regardless of whether an exception occurred.  Also the behavior\nfor  after_request  was changed.  It\u2019s now no longer executed when an exception\nis raised.  See  Upgrading to new Teardown Handling \n Implemented  flask.has_request_context() \n Deprecated  init_jinja_globals .  Override the\n create_jinja_environment()  method instead to\nachieve the same functionality. \n Added  flask.safe_join() \n The automatic JSON request data unpacking now looks at the charset\nmimetype parameter. \n Don\u2019t modify the session on  flask.get_flashed_messages()  if there\nare no messages in the session. \n before_request  handlers are now able to abort requests with errors. \n it is not possible to define user exception handlers.  That way you can\nprovide custom error messages from a central hub for certain errors that\nmight occur during request processing (for instance database connection\nerrors, timeouts from remote resources etc.). \n Blueprints can provide blueprint specific error handlers. \n Implemented generic  Pluggable Views  (class-based views). \n \n \n \n Version 0.6.1 \u00b6 \n Bugfix release, released on December 31st 2010 \n \n Fixed an issue where the default  OPTIONS  response was\nnot exposing all valid methods in the  Allow  header. \n Jinja2 template loading syntax now allows \u201c./\u201d in front of\na template load path.  Previously this caused issues with\nmodule setups. \n Fixed an issue where the subdomain setting for modules was\nignored for the static folder. \n Fixed a security problem that allowed clients to download arbitrary files\nif the host server was a windows based operating system and the client\nuses backslashes to escape the directory the files where exposed from. \n \n \n \n Version 0.6 \u00b6 \n Released on July 27th 2010, codename Whisky \n \n after request functions are now called in reverse order of\nregistration. \n OPTIONS is now automatically implemented by Flask unless the\napplication explicitly adds \u2018OPTIONS\u2019 as method to the URL rule.\nIn this case no automatic OPTIONS handling kicks in. \n static rules are now even in place if there is no static folder\nfor the module.  This was implemented to aid GAE which will\nremove the static folder if it\u2019s part of a mapping in the .yml\nfile. \n the  config  is now available in the templates\nas  config . \n context processors will no longer override values passed directly\nto the render function. \n added the ability to limit the incoming request data with the\nnew  MAX_CONTENT_LENGTH  configuration value. \n the endpoint for the  flask.Module.add_url_rule()  method\nis now optional to be consistent with the function of the\nsame name on the application object. \n added a  flask.make_response()  function that simplifies\ncreating response object instances in views. \n added signalling support based on blinker.  This feature is currently\noptional and supposed to be used by extensions and applications.  If\nyou want to use it, make sure to have  blinker  installed. \n refactored the way URL adapters are created.  This process is now\nfully customizable with the  create_url_adapter() \nmethod. \n modules can now register for a subdomain instead of just an URL\nprefix.  This makes it possible to bind a whole module to a\nconfigurable subdomain. \n \n \n \n Version 0.5.2 \u00b6 \n Bugfix Release, released on July 15th 2010 \n \n fixed another issue with loading templates from directories when\nmodules were used. \n \n \n \n Version 0.5.1 \u00b6 \n Bugfix Release, released on July 6th 2010 \n \n fixes an issue with template loading from directories when modules\nwhere used. \n \n \n \n Version 0.5 \u00b6 \n Released on July 6th 2010, codename Calvados \n \n fixed a bug with subdomains that was caused by the inability to\nspecify the server name.  The server name can now be set with\nthe  SERVER_NAME  config key.  This key is now also used to set\nthe session cookie cross-subdomain wide. \n autoescaping is no longer active for all templates.  Instead it\nis only active for  .html ,  .htm ,  .xml  and  .xhtml .\nInside templates this behavior can be changed with the\n autoescape  tag. \n refactored Flask internally.  It now consists of more than a\nsingle file. \n flask.send_file()  now emits etags and has the ability to\ndo conditional responses builtin. \n (temporarily) dropped support for zipped applications.  This was a\nrarely used feature and led to some confusing behavior. \n added support for per-package template and static-file directories. \n removed support for  create_jinja_loader  which is no longer used\nin 0.5 due to the improved module support. \n added a helper function to expose files from any directory. \n \n \n \n Version 0.4 \u00b6 \n Released on June 18th 2010, codename Rakia \n \n added the ability to register application wide error handlers\nfrom modules. \n after_request()  handlers are now also invoked\nif the request dies with an exception and an error handling page\nkicks in. \n test client has not the ability to preserve the request context\nfor a little longer.  This can also be used to trigger custom\nrequests that do not pop the request stack for testing. \n because the Python standard library caches loggers, the name of\nthe logger is configurable now to better support unittests. \n added  TESTING  switch that can activate unittesting helpers. \n the logger switches to  DEBUG  mode now if debug is enabled. \n \n \n \n Version 0.3.1 \u00b6 \n Bugfix release, released on May 28th 2010 \n \n fixed a error reporting bug with  flask.Config.from_envvar() \n removed some unused code from flask \n release does no longer include development leftover files (.git\nfolder for themes, built documentation in zip and pdf file and\nsome .pyc files) \n \n \n \n Version 0.3 \u00b6 \n Released on May 28th 2010, codename Schnaps \n \n added support for categories for flashed messages. \n the application now configures a  logging.Handler  and will\nlog request handling exceptions to that logger when not in debug\nmode.  This makes it possible to receive mails on server errors\nfor example. \n added support for context binding that does not require the use of\nthe with statement for playing in the console. \n the request context is now available within the with statement making\nit possible to further push the request context or pop it. \n added support for configurations. \n \n \n \n Version 0.2 \u00b6 \n Released on May 12th 2010, codename J\u00e4germeister \n \n various bugfixes \n integrated JSON support \n added  get_template_attribute()  helper function. \n add_url_rule()  can now also register a\nview function. \n refactored internal request dispatching. \n server listens on 127.0.0.1 by default now to fix issues with chrome. \n added external URL support. \n added support for  send_file() \n module support and internal request handling refactoring\nto better support pluggable applications. \n sessions can be set to be permanent now on a per-session basis. \n better error reporting on missing secret keys. \n added support for Google Appengine. \n \n \n \n Version 0.1 \u00b6 \n First public preview release. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Flask Changelog \n Version 1.0.3 \n Version 1.0.2 \n Version 1.0.1 \n Version 1.0 \n Version 0.12.4 \n Version 0.12.3 \n Version 0.12.2 \n Version 0.12.1 \n Version 0.12 \n Version 0.11.2 \n Version 0.11.1 \n Version 0.11 \n Version 0.10.2 \n Version 0.10.1 \n Version 0.10 \n Version 0.9 \n Version 0.8.1 \n Version 0.8 \n Version 0.7.3 \n Version 0.7.2 \n Version 0.7.1 \n Version 0.7 \n Version 0.6.1 \n Version 0.6 \n Version 0.5.2 \n Version 0.5.1 \n Version 0.5 \n Version 0.4 \n Version 0.3.1 \n Version 0.3 \n Version 0.2 \n Version 0.1 \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Upgrading to Newer Releases \n           Next:  License \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/extensiondev/", "text": "\n   \n     \n     \n   \n     Flask Extension Development \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Flask Extension Development \u00b6 \n Flask, being a microframework, often requires some repetitive steps to get\na third party library working.  Because very often these steps could be\nabstracted to support multiple projects the  Flask Extension Registry \nwas created. \n If you want to create your own Flask extension for something that does not\nexist yet, this guide to extension development will help you get your\nextension running in no time and to feel like users would expect your\nextension to behave. \n \n Anatomy of an Extension \u00b6 \n Extensions are all located in a package called  flask_something \nwhere \u201csomething\u201d is the name of the library you want to bridge.  So for\nexample if you plan to add support for a library named  simplexml  to\nFlask, you would name your extension\u2019s package  flask_simplexml . \n The name of the actual extension (the human readable name) however would\nbe something like \u201cFlask-SimpleXML\u201d.  Make sure to include the name\n\u201cFlask\u201d somewhere in that name and that you check the capitalization.\nThis is how users can then register dependencies to your extension in\ntheir  setup.py  files. \n But what do extensions look like themselves?  An extension has to ensure\nthat it works with multiple Flask application instances at once.  This is\na requirement because many people will use patterns like the\n Application Factories  pattern to create their application as needed to aid\nunittests and to support multiple configurations.  Because of that it is\ncrucial that your application supports that kind of behavior. \n Most importantly the extension must be shipped with a  setup.py  file and\nregistered on PyPI.  Also the development checkout link should work so\nthat people can easily install the development version into their\nvirtualenv without having to download the library by hand. \n Flask extensions must be licensed under a BSD, MIT or more liberal license\nin order to be listed in the Flask Extension Registry.  Keep in mind\nthat the Flask Extension Registry is a moderated place and libraries will\nbe reviewed upfront if they behave as required. \n \n \n \u201cHello Flaskext!\u201d \u00b6 \n So let\u2019s get started with creating such a Flask extension.  The extension\nwe want to create here will provide very basic support for SQLite3. \n First we create the following folder structure: \n flask - sqlite3 / \n     flask_sqlite3 . py \n     LICENSE \n     README \n \n \n Here\u2019s the contents of the most important files: \n \n setup.py \u00b6 \n The next file that is absolutely required is the  setup.py  file which is\nused to install your Flask extension.  The following contents are\nsomething you can work with: \n \"\"\" \n Flask-SQLite3 \n ------------- \n\n This is the description for that library \n \"\"\" \n from   setuptools   import   setup \n\n\n setup ( \n     name = 'Flask-SQLite3' , \n     version = '1.0' , \n     url = 'http://example.com/flask-sqlite3/' , \n     license = 'BSD' , \n     author = 'Your Name' , \n     author_email = 'your-email@example.com' , \n     description = 'Very short description' , \n     long_description = __doc__ , \n     py_modules = [ 'flask_sqlite3' ], \n     # if you would be using a package instead use packages instead \n     # of py_modules: \n     # packages=['flask_sqlite3'], \n     zip_safe = False , \n     include_package_data = True , \n     platforms = 'any' , \n     install_requires = [ \n         'Flask' \n     ], \n     classifiers = [ \n         'Environment :: Web Environment' , \n         'Intended Audience :: Developers' , \n         'License :: OSI Approved :: BSD License' , \n         'Operating System :: OS Independent' , \n         'Programming Language :: Python' , \n         'Topic :: Internet :: WWW/HTTP :: Dynamic Content' , \n         'Topic :: Software Development :: Libraries :: Python Modules' \n     ] \n ) \n \n \n That\u2019s a lot of code but you can really just copy/paste that from existing\nextensions and adapt. \n \n \n flask_sqlite3.py \u00b6 \n Now this is where your extension code goes.  But how exactly should such\nan extension look like?  What are the best practices?  Continue reading\nfor some insight. \n \n \n \n Initializing Extensions \u00b6 \n Many extensions will need some kind of initialization step.  For example,\nconsider an application that\u2019s currently connecting to SQLite like the\ndocumentation suggests ( Using SQLite 3 with Flask ).  So how does the extension\nknow the name of the application object? \n Quite simple: you pass it to it. \n There are two recommended ways for an extension to initialize: \n initialization functions: \n \n If your extension is called  helloworld  you might have a function\ncalled  init_helloworld(app[,   extra_args])  that initializes the\nextension for that application.  It could attach before / after\nhandlers etc. \n classes: \n \n Classes work mostly like initialization functions but can later be\nused to further change the behavior.  For an example look at how the\n OAuth extension  works: there is an  OAuth  object that provides\nsome helper functions like  OAuth.remote_app  to create a reference to\na remote application that uses OAuth. \n What to use depends on what you have in mind.  For the SQLite 3 extension\nwe will use the class-based approach because it will provide users with an\nobject that handles opening and closing database connections. \n When designing your classes, it\u2019s important to make them easily reusable\nat the module level. This means the object itself must not under any\ncircumstances store any application specific state and must be shareable\nbetween different applications. \n \n \n The Extension Code \u00b6 \n Here\u2019s the contents of the  flask_sqlite3.py  for copy/paste: \n import   sqlite3 \n from   flask   import   current_app ,   _app_ctx_stack \n\n\n class   SQLite3 ( object ): \n     def   __init__ ( self ,   app = None ): \n         self . app   =   app \n         if   app   is   not   None : \n             self . init_app ( app ) \n\n     def   init_app ( self ,   app ): \n         app . config . setdefault ( 'SQLITE3_DATABASE' ,   ':memory:' ) \n         app . teardown_appcontext ( self . teardown ) \n\n     def   connect ( self ): \n         return   sqlite3 . connect ( current_app . config [ 'SQLITE3_DATABASE' ]) \n\n     def   teardown ( self ,   exception ): \n         ctx   =   _app_ctx_stack . top \n         if   hasattr ( ctx ,   'sqlite3_db' ): \n             ctx . sqlite3_db . close () \n\n     @property \n     def   connection ( self ): \n         ctx   =   _app_ctx_stack . top \n         if   ctx   is   not   None : \n             if   not   hasattr ( ctx ,   'sqlite3_db' ): \n                 ctx . sqlite3_db   =   self . connect () \n             return   ctx . sqlite3_db \n \n \n So here\u2019s what these lines of code do: \n \n The  __init__  method takes an optional app object and, if supplied, will\ncall  init_app . \n \n The  init_app  method exists so that the  SQLite3  object can be\ninstantiated without requiring an app object.  This method supports the\nfactory pattern for creating applications.  The  init_app  will set the\nconfiguration for the database, defaulting to an in memory database if\nno configuration is supplied.  In addition, the  init_app  method attaches\nthe  teardown  handler. \n \n Next, we define a  connect  method that opens a database connection. \n \n Finally, we add a  connection  property that on first access opens\nthe database connection and stores it on the context.  This is also\nthe recommended way to handling resources: fetch resources lazily the\nfirst time they are used. \n Note here that we\u2019re attaching our database connection to the top\napplication context via  _app_ctx_stack.top . Extensions should use\nthe top context for storing their own information with a sufficiently\ncomplex name. \n \n \n So why did we decide on a class-based approach here?  Because using our\nextension looks something like this: \n from   flask   import   Flask \n from   flask_sqlite3   import   SQLite3 \n\n app   =   Flask ( __name__ ) \n app . config . from_pyfile ( 'the-config.cfg' ) \n db   =   SQLite3 ( app ) \n \n \n You can then use the database from views like this: \n @app . route ( '/' ) \n def   show_all (): \n     cur   =   db . connection . cursor () \n     cur . execute ( ... ) \n \n \n Likewise if you are outside of a request you can use the database by\npushing an app context: \n with   app . app_context (): \n     cur   =   db . connection . cursor () \n     cur . execute ( ... ) \n \n \n At the end of the  with  block the teardown handles will be executed\nautomatically. \n Additionally, the  init_app  method is used to support the factory pattern\nfor creating apps: \n db   =   Sqlite3 () \n # Then later on. \n app   =   create_app ( 'the-config.cfg' ) \n db . init_app ( app ) \n \n \n Keep in mind that supporting this factory pattern for creating apps is required\nfor approved flask extensions (described below). \n \n Note on  init_app \n As you noticed,  init_app  does not assign  app  to  self .  This\nis intentional!  Class based Flask extensions must only store the\napplication on the object when the application was passed to the\nconstructor.  This tells the extension: I am not interested in using\nmultiple applications. \n When the extension needs to find the current application and it does\nnot have a reference to it, it must either use the\n current_app  context local or change the API in a way\nthat you can pass the application explicitly. \n \n \n \n Using _app_ctx_stack \u00b6 \n In the example above, before every request, a  sqlite3_db  variable is\nassigned to  _app_ctx_stack.top .  In a view function, this variable is\naccessible using the  connection  property of  SQLite3 .  During the\nteardown of a request, the  sqlite3_db  connection is closed.  By using\nthis pattern, the  same  connection to the sqlite3 database is accessible\nto anything that needs it for the duration of the request. \n \n \n Learn from Others \u00b6 \n This documentation only touches the bare minimum for extension\ndevelopment.  If you want to learn more, it\u2019s a very good idea to check\nout existing extensions on the  Flask Extension Registry .  If you feel\nlost there is still the  mailinglist  and the  IRC channel  to get some\nideas for nice looking APIs.  Especially if you do something nobody before\nyou did, it might be a very good idea to get some more input.  This not only\ngenerates useful feedback on what people might want from an extension, but\nalso avoids having multiple developers working in isolation on pretty much the\nsame problem. \n Remember: good API design is hard, so introduce your project on the\nmailinglist, and let other developers give you a helping hand with\ndesigning the API. \n The best Flask extensions are extensions that share common idioms for the\nAPI.  And this can only work if collaboration happens early. \n \n \n Approved Extensions \u00b6 \n Flask also has the concept of approved extensions.  Approved extensions\nare tested as part of Flask itself to ensure extensions do not break on\nnew releases.  These approved extensions are listed on the  Flask\nExtension Registry  and marked appropriately.  If you want your own\nextension to be approved you have to follow these guidelines: \n \n An approved Flask extension requires a maintainer. In the event an\nextension author would like to move beyond the project, the project should\nfind a new maintainer including full source hosting transition and PyPI\naccess.  If no maintainer is available, give access to the Flask core team. \n An approved Flask extension must provide exactly one package or module\nnamed  flask_extensionname . \n It must ship a testing suite that can either be invoked with  make   test \nor  python   setup.py   test .  For test suites invoked with  make \n test  the extension has to ensure that all dependencies for the test\nare installed automatically.  If tests are invoked with  python   setup.py \n test , test dependencies can be specified in the  setup.py  file.  The\ntest suite also has to be part of the distribution. \n APIs of approved extensions will be checked for the following\ncharacteristics: \n \n \n \n an approved extension has to support multiple applications\nrunning in the same Python process. \n it must be possible to use the factory pattern for creating\napplications. \n \n \n \n The license must be BSD/MIT/WTFPL licensed. \n The naming scheme for official extensions is  Flask-ExtensionName  or\n ExtensionName-Flask . \n Approved extensions must define all their dependencies in the\n setup.py  file unless a dependency cannot be met because it is not\navailable on PyPI. \n The documentation must use the  flask  theme from the  Official\nPallets Themes . \n The setup.py description (and thus the PyPI description) has to\nlink to the documentation, website (if there is one) and there\nmust be a link to automatically install the development version\n( PackageName==dev ). \n The  zip_safe  flag in the setup script must be set to  False ,\neven if the extension would be safe for zipping. \n An extension currently has to support Python 3.4 and newer and 2.7. \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Flask Extension Development \n Anatomy of an Extension \n \u201cHello Flaskext!\u201d \n setup.py \n flask_sqlite3.py \n \n \n Initializing Extensions \n The Extension Code \n Using _app_ctx_stack \n Learn from Others \n Approved Extensions \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Unicode in Flask \n           Next:  Pocoo Styleguide \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/security/", "text": "\n   \n     \n     \n   \n     Security Considerations \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Security Considerations \u00b6 \n Web applications usually face all kinds of security problems and it\u2019s very\nhard to get everything right.  Flask tries to solve a few of these things\nfor you, but there are a couple more you have to take care of yourself. \n \n Cross-Site Scripting (XSS) \u00b6 \n Cross site scripting is the concept of injecting arbitrary HTML (and with\nit JavaScript) into the context of a website.  To remedy this, developers\nhave to properly escape text so that it cannot include arbitrary HTML\ntags.  For more information on that have a look at the Wikipedia article\non  Cross-Site Scripting . \n Flask configures Jinja2 to automatically escape all values unless\nexplicitly told otherwise.  This should rule out all XSS problems caused\nin templates, but there are still other places where you have to be\ncareful: \n \n generating HTML without the help of Jinja2 \n calling  Markup  on data submitted by users \n sending out HTML from uploaded files, never do that, use the\n Content-Disposition:   attachment  header to prevent that problem. \n sending out textfiles from uploaded files.  Some browsers are using\ncontent-type guessing based on the first few bytes so users could\ntrick a browser to execute HTML. \n \n Another thing that is very important are unquoted attributes.  While\nJinja2 can protect you from XSS issues by escaping HTML, there is one\nthing it cannot protect you from: XSS by attribute injection.  To counter\nthis possible attack vector, be sure to always quote your attributes with\neither double or single quotes when using Jinja expressions in them: \n < input   value = \" {{   value   }} \" > \n \n \n Why is this necessary?  Because if you would not be doing that, an\nattacker could easily inject custom JavaScript handlers.  For example an\nattacker could inject this piece of HTML+JavaScript: \n onmouseover=alert(document.cookie)\n \n \n When the user would then move with the mouse over the input, the cookie\nwould be presented to the user in an alert window.  But instead of showing\nthe cookie to the user, a good attacker might also execute any other\nJavaScript code.  In combination with CSS injections the attacker might\neven make the element fill out the entire page so that the user would\njust have to have the mouse anywhere on the page to trigger the attack. \n There is one class of XSS issues that Jinja\u2019s escaping does not protect\nagainst. The  a  tag\u2019s  href  attribute can contain a  javascript:  URI,\nwhich the browser will execute when clicked if not secured properly. \n < a   href = \"{{ value }}\" > click here </ a > \n < a   href = \"javascript:alert('unsafe');\" > click here </ a > \n \n \n To prevent this, you\u2019ll need to set the  Content Security Policy (CSP)  response header. \n \n \n Cross-Site Request Forgery (CSRF) \u00b6 \n Another big problem is CSRF.  This is a very complex topic and I won\u2019t\noutline it here in detail just mention what it is and how to theoretically\nprevent it. \n If your authentication information is stored in cookies, you have implicit\nstate management.  The state of \u201cbeing logged in\u201d is controlled by a\ncookie, and that cookie is sent with each request to a page.\nUnfortunately that includes requests triggered by 3rd party sites.  If you\ndon\u2019t keep that in mind, some people might be able to trick your\napplication\u2019s users with social engineering to do stupid things without\nthem knowing. \n Say you have a specific URL that, when you sent  POST  requests to will\ndelete a user\u2019s profile (say  http://example.com/user/delete ).  If an\nattacker now creates a page that sends a post request to that page with\nsome JavaScript they just have to trick some users to load that page and\ntheir profiles will end up being deleted. \n Imagine you were to run Facebook with millions of concurrent users and\nsomeone would send out links to images of little kittens.  When users\nwould go to that page, their profiles would get deleted while they are\nlooking at images of fluffy cats. \n How can you prevent that?  Basically for each request that modifies\ncontent on the server you would have to either use a one-time token and\nstore that in the cookie  and  also transmit it with the form data.\nAfter receiving the data on the server again, you would then have to\ncompare the two tokens and ensure they are equal. \n Why does Flask not do that for you?  The ideal place for this to happen is\nthe form validation framework, which does not exist in Flask. \n \n \n JSON Security \u00b6 \n In Flask 0.10 and lower,  jsonify()  did not serialize top-level\narrays to JSON. This was because of a security vulnerability in ECMAScript 4. \n ECMAScript 5 closed this vulnerability, so only extremely old browsers are\nstill vulnerable. All of these browsers have  other more serious\nvulnerabilities , so\nthis behavior was changed and  jsonify()  now supports serializing\narrays. \n \n \n Security Headers \u00b6 \n Browsers recognize various response headers in order to control security. We\nrecommend reviewing each of the headers below for use in your application.\nThe  Flask-Talisman  extension can be used to manage HTTPS and the security\nheaders for you. \n \n HTTP Strict Transport Security (HSTS) \u00b6 \n Tells the browser to convert all HTTP requests to HTTPS, preventing\nman-in-the-middle (MITM) attacks. \n response . headers [ 'Strict-Transport-Security' ]   =   'max-age=31536000; includeSubDomains' \n \n \n \n https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security \n \n \n \n Content Security Policy (CSP) \u00b6 \n Tell the browser where it can load various types of resource from. This header\nshould be used whenever possible, but requires some work to define the correct\npolicy for your site. A very strict policy would be: \n response . headers [ 'Content-Security-Policy' ]   =   \"default-src 'self'\" \n \n \n \n https://csp.withgoogle.com/docs/index.html \n https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy \n \n \n \n X-Content-Type-Options \u00b6 \n Forces the browser to honor the response content type instead of trying to\ndetect it, which can be abused to generate a cross-site scripting (XSS)\nattack. \n response . headers [ 'X-Content-Type-Options' ]   =   'nosniff' \n \n \n \n https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options \n \n \n \n X-Frame-Options \u00b6 \n Prevents external sites from embedding your site in an  iframe . This\nprevents a class of attacks where clicks in the outer frame can be translated\ninvisibly to clicks on your page\u2019s elements. This is also known as\n\u201cclickjacking\u201d. \n response . headers [ 'X-Frame-Options' ]   =   'SAMEORIGIN' \n \n \n \n https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options \n \n \n \n X-XSS-Protection \u00b6 \n The browser will try to prevent reflected XSS attacks by not loading the page\nif the request contains something that looks like JavaScript and the response\ncontains the same data. \n response . headers [ 'X-XSS-Protection' ]   =   '1; mode=block' \n \n \n \n https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection \n \n \n \n Set-Cookie options \u00b6 \n These options can be added to a  Set-Cookie  header to improve their\nsecurity. Flask has configuration options to set these on the session cookie.\nThey can be set on other cookies too. \n \n Secure  limits cookies to HTTPS traffic only. \n HttpOnly  protects the contents of cookies from being read with\nJavaScript. \n SameSite  restricts how cookies are sent with requests from\nexternal sites. Can be set to  'Lax'  (recommended) or  'Strict' .\n Lax  prevents sending cookies with CSRF-prone requests from\nexternal sites, such as submitting a form.  Strict  prevents sending\ncookies with all external requests, including following regular links. \n \n app . config . update ( \n     SESSION_COOKIE_SECURE = True , \n     SESSION_COOKIE_HTTPONLY = True , \n     SESSION_COOKIE_SAMESITE = 'Lax' , \n ) \n\n response . set_cookie ( 'username' ,   'flask' ,   secure = True ,   httponly = True ,   samesite = 'Lax' ) \n \n \n Specifying  Expires  or  Max-Age  options, will remove the cookie after\nthe given time, or the current time plus the age, respectively. If neither\noption is set, the cookie will be removed when the browser is closed. \n # cookie expires after 10 minutes \n response . set_cookie ( 'snakes' ,   '3' ,   max_age = 600 ) \n \n \n For the session cookie, if  session.permanent \nis set, then  PERMANENT_SESSION_LIFETIME  is used to set the expiration.\nFlask\u2019s default cookie implementation validates that the cryptographic\nsignature is not older than this value. Lowering this value may help mitigate\nreplay attacks, where intercepted cookies can be sent at a later time. \n app . config . update ( \n     PERMANENT_SESSION_LIFETIME = 600 \n ) \n\n @app . route ( '/login' ,   methods = [ 'POST' ]) \n def   login (): \n     ... \n     session . clear () \n     session [ 'user_id' ]   =   user . id \n     session . permanent   =   True \n     ... \n \n \n Use  itsdangerous.TimedSerializer  to sign and validate other cookie\nvalues (or any values that need secure signatures). \n \n https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies \n https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie \n \n \n \n HTTP Public Key Pinning (HPKP) \u00b6 \n This tells the browser to authenticate with the server using only the specific\ncertificate key to prevent MITM attacks. \n \n Warning \n Be careful when enabling this, as it is very difficult to undo if you set up\nor upgrade your key incorrectly. \n \n \n https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Security Considerations \n Cross-Site Scripting (XSS) \n Cross-Site Request Forgery (CSRF) \n JSON Security \n Security Headers \n HTTP Strict Transport Security (HSTS) \n Content Security Policy (CSP) \n X-Content-Type-Options \n X-Frame-Options \n X-XSS-Protection \n Set-Cookie options \n HTTP Public Key Pinning (HPKP) \n \n \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  HTML/XHTML FAQ \n           Next:  Unicode in Flask \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/htmlfaq/", "text": "\n   \n     \n     \n   \n     HTML/XHTML FAQ \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n HTML/XHTML FAQ \u00b6 \n The Flask documentation and example applications are using HTML5.  You\nmay notice that in many situations, when end tags are optional they are\nnot used, so that the HTML is cleaner and faster to load.  Because there\nis much confusion about HTML and XHTML among developers, this document tries\nto answer some of the major questions. \n \n History of XHTML \u00b6 \n For a while, it appeared that HTML was about to be replaced by XHTML.\nHowever, barely any websites on the Internet are actual XHTML (which is\nHTML processed using XML rules).  There are a couple of major reasons\nwhy this is the case.  One of them is Internet Explorer\u2019s lack of proper\nXHTML support. The XHTML spec states that XHTML must be served with the MIME\ntype  application/xhtml+xml , but Internet Explorer refuses to read files\nwith that MIME type.\nWhile it is relatively easy to configure Web servers to serve XHTML properly,\nfew people do.  This is likely because properly using XHTML can be quite\npainful. \n One of the most important causes of pain is XML\u2019s draconian (strict and\nruthless) error handling.  When an XML parsing error is encountered,\nthe browser is supposed to show the user an ugly error message, instead\nof attempting to recover from the error and display what it can.  Most of\nthe (X)HTML generation on the web is based on non-XML template engines\n(such as Jinja, the one used in Flask) which do not protect you from\naccidentally creating invalid XHTML.  There are XML based template engines,\nsuch as Kid and the popular Genshi, but they often come with a larger\nruntime overhead and are not as straightforward to use because they have\nto obey XML rules. \n The majority of users, however, assumed they were properly using XHTML.\nThey wrote an XHTML doctype at the top of the document and self-closed all\nthe necessary tags ( <br>  becomes  <br/>  or  <br></br>  in XHTML).\nHowever, even if the document properly validates as XHTML, what really\ndetermines XHTML/HTML processing in browsers is the MIME type, which as\nsaid before is often not set properly. So the valid XHTML was being treated\nas invalid HTML. \n XHTML also changed the way JavaScript is used. To properly work with XHTML,\nprogrammers have to use the namespaced DOM interface with the XHTML\nnamespace to query for HTML elements. \n \n \n History of HTML5 \u00b6 \n Development of the HTML5 specification was started in 2004 under the name\n\u201cWeb Applications 1.0\u201d by the Web Hypertext Application Technology Working\nGroup, or WHATWG (which was formed by the major browser vendors Apple,\nMozilla, and Opera) with the goal of writing a new and improved HTML\nspecification, based on existing browser behavior instead of unrealistic\nand backwards-incompatible specifications. \n For example, in HTML4  <title/Hello/  theoretically parses exactly the\nsame as  <title>Hello</title> .  However, since people were using\nXHTML-like tags along the lines of  <link   /> , browser vendors implemented\nthe XHTML syntax over the syntax defined by the specification. \n In 2007, the specification was adopted as the basis of a new HTML\nspecification under the umbrella of the W3C, known as HTML5.  Currently,\nit appears that XHTML is losing traction, as the XHTML 2 working group has\nbeen disbanded and HTML5 is being implemented by all major browser vendors. \n \n \n HTML versus XHTML \u00b6 \n The following table gives you a quick overview of features available in\nHTML 4.01, XHTML 1.1 and HTML5. (XHTML 1.0 is not included, as it was\nsuperseded by XHTML 1.1 and the barely-used XHTML5.) \n \n \n \n \n \n \n \n \n \u00a0 \n HTML4.01 \n XHTML1.1 \n HTML5 \n \n \n \n <tag/value/  ==  <tag>value</tag> \n   [1] \n \n \n \n <br/>  supported \n \n \n   [2] \n \n <script/>  supported \n \n \n \n \n should be served as  text/html \n \n   [3] \n \n \n should be served as\n application/xhtml+xml \n \n \n \n \n strict error handling \n \n \n \n \n inline SVG \n \n \n \n \n inline MathML \n \n \n \n \n <video>  tag \n \n \n \n \n <audio>  tag \n \n \n \n \n New semantic tags like  <article> \n \n \n \n \n \n \n \n \n \n [1] This is an obscure feature inherited from SGML. It is usually not\nsupported by browsers, for reasons detailed above. \n \n \n \n \n \n [2] This is for compatibility with server code that generates XHTML for\ntags such as  <br> .  It should not be used in new code. \n \n \n \n \n \n [3] XHTML 1.0 is the last XHTML standard that allows to be served\nas  text/html  for backwards compatibility reasons. \n \n \n \n \n What does \u201cstrict\u201d mean? \u00b6 \n HTML5 has strictly defined parsing rules, but it also specifies exactly\nhow a browser should react to parsing errors - unlike XHTML, which simply\nstates parsing should abort. Some people are confused by apparently\ninvalid syntax that still generates the expected results (for example,\nmissing end tags or unquoted attribute values). \n Some of these work because of the lenient error handling most browsers use\nwhen they encounter a markup error, others are actually specified.  The\nfollowing constructs are optional in HTML5 by standard, but have to be\nsupported by browsers: \n \n Wrapping the document in an  <html>  tag \n Wrapping header elements in  <head>  or the body elements in\n <body> \n Closing the  <p> ,  <li> ,  <dt> ,  <dd> ,  <tr> ,\n <td> ,  <th> ,  <tbody> ,  <thead> , or  <tfoot>  tags. \n Quoting attributes, so long as they contain no whitespace or\nspecial characters (like  < ,  > ,  ' , or  \" ). \n Requiring boolean attributes to have a value. \n \n This means the following page in HTML5 is perfectly valid: \n <!doctype html> \n < title > Hello HTML5 </ title > \n < div   class = header > \n   < h1 > Hello HTML5 </ h1 > \n   < p   class = tagline > HTML5 is awesome\n </ div > \n < ul   class = nav > \n   < li >< a   href = /index > Index </ a > \n   < li >< a   href = /downloads > Downloads </ a > \n   < li >< a   href = /about > About </ a > \n </ ul > \n < div   class = body > \n   < h2 > HTML5 is probably the future </ h2 > \n   < p > \n    There might be some other things around but in terms of\n    browser vendor support, HTML5 is hard to beat.\n   < dl > \n     < dt > Key 1\n     < dd > Value 1\n     < dt > Key 2\n     < dd > Value 2\n   </ dl > \n </ div > \n \n \n \n \n New technologies in HTML5 \u00b6 \n HTML5 adds many new features that make Web applications easier to write\nand to use. \n \n The  <audio>  and  <video>  tags provide a way to embed audio and\nvideo without complicated add-ons like QuickTime or Flash. \n Semantic elements like  <article> ,  <header> ,  <nav> , and\n <time>  that make content easier to understand. \n The  <canvas>  tag, which supports a powerful drawing API, reducing\nthe need for server-generated images to present data graphically. \n New form control types like  <input   type=\"date\">  that allow user\nagents to make entering and validating values easier. \n Advanced JavaScript APIs like Web Storage, Web Workers, Web Sockets,\ngeolocation, and offline applications. \n \n Many other features have been added, as well. A good guide to new features\nin HTML5 is Mark Pilgrim\u2019s soon-to-be-published book,  Dive Into HTML5 .\nNot all of them are supported in browsers yet, however, so use caution. \n \n \n What should be used? \u00b6 \n Currently, the answer is HTML5.  There are very few reasons to use XHTML\nconsidering the latest developments in Web browsers.  To summarize the\nreasons given above: \n \n Internet Explorer (which, sadly, currently leads in market share)\nhas poor support for XHTML. \n Many JavaScript libraries also do not support XHTML, due to the more\ncomplicated namespacing API it requires. \n HTML5 adds several new features, including semantic tags and the\nlong-awaited  <audio>  and  <video>  tags. \n It has the support of most browser vendors behind it. \n It is much easier to write, and more compact. \n \n For most applications, it is undoubtedly better to use HTML5 than XHTML. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n HTML/XHTML FAQ \n History of XHTML \n History of HTML5 \n HTML versus XHTML \n What does \u201cstrict\u201d mean? \n New technologies in HTML5 \n What should be used? \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Design Decisions in Flask \n           Next:  Security Considerations \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/design/", "text": "\n   \n     \n     \n   \n     Design Decisions in Flask \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Design Decisions in Flask \u00b6 \n If you are curious why Flask does certain things the way it does and not\ndifferently, this section is for you.  This should give you an idea about\nsome of the design decisions that may appear arbitrary and surprising at\nfirst, especially in direct comparison with other frameworks. \n \n The Explicit Application Object \u00b6 \n A Python web application based on WSGI has to have one central callable\nobject that implements the actual application.  In Flask this is an\ninstance of the  Flask  class.  Each Flask application has\nto create an instance of this class itself and pass it the name of the\nmodule, but why can\u2019t Flask do that itself? \n Without such an explicit application object the following code: \n from   flask   import   Flask \n app   =   Flask ( __name__ ) \n\n @app . route ( '/' ) \n def   index (): \n     return   'Hello World!' \n \n \n Would look like this instead: \n from   hypothetical_flask   import   route \n\n @route ( '/' ) \n def   index (): \n     return   'Hello World!' \n \n \n There are three major reasons for this.  The most important one is that\nimplicit application objects require that there may only be one instance at\nthe time.  There are ways to fake multiple applications with a single\napplication object, like maintaining a stack of applications, but this\ncauses some problems I won\u2019t outline here in detail.  Now the question is:\nwhen does a microframework need more than one application at the same\ntime?  A good example for this is unittesting.  When you want to test\nsomething it can be very helpful to create a minimal application to test\nspecific behavior.  When the application object is deleted everything it\nallocated will be freed again. \n Another thing that becomes possible when you have an explicit object lying\naround in your code is that you can subclass the base class\n( Flask ) to alter specific behavior.  This would not be\npossible without hacks if the object were created ahead of time for you\nbased on a class that is not exposed to you. \n But there is another very important reason why Flask depends on an\nexplicit instantiation of that class: the package name.  Whenever you\ncreate a Flask instance you usually pass it  __name__  as package name.\nFlask depends on that information to properly load resources relative\nto your module.  With Python\u2019s outstanding support for reflection it can\nthen access the package to figure out where the templates and static files\nare stored (see  open_resource() ).  Now obviously there\nare frameworks around that do not need any configuration and will still be\nable to load templates relative to your application module.  But they have\nto use the current working directory for that, which is a very unreliable\nway to determine where the application is.  The current working directory\nis process-wide and if you are running multiple applications in one\nprocess (which could happen in a webserver without you knowing) the paths\nwill be off.  Worse: many webservers do not set the working directory to\nthe directory of your application but to the document root which does not\nhave to be the same folder. \n The third reason is \u201cexplicit is better than implicit\u201d.  That object is\nyour WSGI application, you don\u2019t have to remember anything else.  If you\nwant to apply a WSGI middleware, just wrap it and you\u2019re done (though\nthere are better ways to do that so that you do not lose the reference\nto the application object  wsgi_app() ). \n Furthermore this design makes it possible to use a factory function to\ncreate the application which is very helpful for unittesting and similar\nthings ( Application Factories ). \n \n \n The Routing System \u00b6 \n Flask uses the Werkzeug routing system which was designed to\nautomatically order routes by complexity.  This means that you can declare\nroutes in arbitrary order and they will still work as expected.  This is a\nrequirement if you want to properly implement decorator based routing\nsince decorators could be fired in undefined order when the application is\nsplit into multiple modules. \n Another design decision with the Werkzeug routing system is that routes\nin Werkzeug try to ensure that URLs are unique.  Werkzeug will go quite far\nwith that in that it will automatically redirect to a canonical URL if a route\nis ambiguous. \n \n \n One Template Engine \u00b6 \n Flask decides on one template engine: Jinja2.  Why doesn\u2019t Flask have a\npluggable template engine interface?  You can obviously use a different\ntemplate engine, but Flask will still configure Jinja2 for you.  While\nthat limitation that Jinja2 is  always  configured will probably go away,\nthe decision to bundle one template engine and use that will not. \n Template engines are like programming languages and each of those engines\nhas a certain understanding about how things work.  On the surface they\nall work the same: you tell the engine to evaluate a template with a set\nof variables and take the return value as string. \n But that\u2019s about where similarities end.  Jinja2 for example has an\nextensive filter system, a certain way to do template inheritance, support\nfor reusable blocks (macros) that can be used from inside templates and\nalso from Python code, uses Unicode for all operations, supports\niterative template rendering, configurable syntax and more.  On the other\nhand an engine like Genshi is based on XML stream evaluation, template\ninheritance by taking the availability of XPath into account and more.\nMako on the other hand treats templates similar to Python modules. \n When it comes to connecting a template engine with an application or\nframework there is more than just rendering templates.  For instance,\nFlask uses Jinja2\u2019s extensive autoescaping support.  Also it provides\nways to access macros from Jinja2 templates. \n A template abstraction layer that would not take the unique features of\nthe template engines away is a science on its own and a too large\nundertaking for a microframework like Flask. \n Furthermore extensions can then easily depend on one template language\nbeing present.  You can easily use your own templating language, but an\nextension could still depend on Jinja itself. \n \n \n Micro with Dependencies \u00b6 \n Why does Flask call itself a microframework and yet it depends on two\nlibraries (namely Werkzeug and Jinja2).  Why shouldn\u2019t it?  If we look\nover to the Ruby side of web development there we have a protocol very\nsimilar to WSGI.  Just that it\u2019s called Rack there, but besides that it\nlooks very much like a WSGI rendition for Ruby.  But nearly all\napplications in Ruby land do not work with Rack directly, but on top of a\nlibrary with the same name.  This Rack library has two equivalents in\nPython: WebOb (formerly Paste) and Werkzeug.  Paste is still around but\nfrom my understanding it\u2019s sort of deprecated in favour of WebOb.  The\ndevelopment of WebOb and Werkzeug started side by side with similar ideas\nin mind: be a good implementation of WSGI for other applications to take\nadvantage. \n Flask is a framework that takes advantage of the work already done by\nWerkzeug to properly interface WSGI (which can be a complex task at\ntimes).  Thanks to recent developments in the Python package\ninfrastructure, packages with dependencies are no longer an issue and\nthere are very few reasons against having libraries that depend on others. \n \n \n Thread Locals \u00b6 \n Flask uses thread local objects (context local objects in fact, they\nsupport greenlet contexts as well) for request, session and an extra\nobject you can put your own things on ( g ).  Why is that and\nisn\u2019t that a bad idea? \n Yes it is usually not such a bright idea to use thread locals.  They cause\ntroubles for servers that are not based on the concept of threads and make\nlarge applications harder to maintain.  However Flask is just not designed\nfor large applications or asynchronous servers.  Flask wants to make it\nquick and easy to write a traditional web application. \n Also see the  Becoming Big  section of the documentation for some\ninspiration for larger applications based on Flask. \n \n \n What Flask is, What Flask is Not \u00b6 \n Flask will never have a database layer.  It will not have a form library\nor anything else in that direction.  Flask itself just bridges to Werkzeug\nto implement a proper WSGI application and to Jinja2 to handle templating.\nIt also binds to a few common standard library packages such as logging.\nEverything else is up for extensions. \n Why is this the case?  Because people have different preferences and\nrequirements and Flask could not meet those if it would force any of this\ninto the core.  The majority of web applications will need a template\nengine in some sort.  However not every application needs a SQL database. \n The idea of Flask is to build a good foundation for all applications.\nEverything else is up to you or extensions. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Design Decisions in Flask \n The Explicit Application Object \n The Routing System \n One Template Engine \n Micro with Dependencies \n Thread Locals \n What Flask is, What Flask is Not \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  API \n           Next:  HTML/XHTML FAQ \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/becomingbig/", "text": "\n   \n     \n     \n   \n     Becoming Big \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Becoming Big \u00b6 \n Here are your options when growing your codebase or scaling your application. \n \n Read the Source. \u00b6 \n Flask started in part to demonstrate how to build your own framework on top of\nexisting well-used tools Werkzeug (WSGI) and Jinja (templating), and as it\ndeveloped, it became useful to a wide audience.  As you grow your codebase,\ndon\u2019t just use Flask \u2013 understand it.  Read the source.  Flask\u2019s code is\nwritten to be read; its documentation is published so you can use its internal\nAPIs.  Flask sticks to documented APIs in upstream libraries, and documents its\ninternal utilities so that you can find the hook points needed for your\nproject. \n \n \n Hook. Extend. \u00b6 \n The  API  docs are full of available overrides, hook points, and\n Signals . You can provide custom classes for things like the request and\nresponse objects.  Dig deeper on the APIs you use, and look for the\ncustomizations which are available out of the box in a Flask release.  Look for\nways in which your project can be refactored into a collection of utilities and\nFlask extensions.  Explore the many  extensions  in the community, and look for patterns to\nbuild your own extensions if you do not find the tools you need. \n \n \n Subclass. \u00b6 \n The  Flask  class has many methods designed for subclassing. You\ncan quickly add or customize behavior by subclassing  Flask  (see\nthe linked method docs) and using that subclass wherever you instantiate an\napplication class. This works well with  Application Factories . See  Subclassing Flask  for an example. \n \n \n Wrap with middleware. \u00b6 \n The  Application Dispatching  chapter shows in detail how to apply middleware. You\ncan introduce WSGI middleware to wrap your Flask instances and introduce fixes\nand changes at the layer between your Flask application and your HTTP\nserver. Werkzeug includes several  middlewares . \n \n \n Fork. \u00b6 \n If none of the above options work, fork Flask.  The majority of code of Flask\nis within Werkzeug and Jinja2.  These libraries do the majority of the work.\nFlask is just the paste that glues those together.  For every project there is\nthe point where the underlying framework gets in the way (due to assumptions\nthe original developers had).  This is natural because if this would not be the\ncase, the framework would be a very complex system to begin with which causes a\nsteep learning curve and a lot of user frustration. \n This is not unique to Flask.  Many people use patched and modified\nversions of their framework to counter shortcomings.  This idea is also\nreflected in the license of Flask.  You don\u2019t have to contribute any\nchanges back if you decide to modify the framework. \n The downside of forking is of course that Flask extensions will most\nlikely break because the new framework has a different import name.\nFurthermore integrating upstream changes can be a complex process,\ndepending on the number of changes.  Because of that, forking should be\nthe very last resort. \n \n \n Scale like a pro. \u00b6 \n For many web applications the complexity of the code is less an issue than\nthe scaling for the number of users or data entries expected.  Flask by\nitself is only limited in terms of scaling by your application code, the\ndata store you want to use and the Python implementation and webserver you\nare running on. \n Scaling well means for example that if you double the amount of servers\nyou get about twice the performance.  Scaling bad means that if you add a\nnew server the application won\u2019t perform any better or would not even\nsupport a second server. \n There is only one limiting factor regarding scaling in Flask which are\nthe context local proxies.  They depend on context which in Flask is\ndefined as being either a thread, process or greenlet.  If your server\nuses some kind of concurrency that is not based on threads or greenlets,\nFlask will no longer be able to support these global proxies.  However the\nmajority of servers are using either threads, greenlets or separate\nprocesses to achieve concurrency which are all methods well supported by\nthe underlying Werkzeug library. \n \n \n Discuss with the community. \u00b6 \n The Flask developers keep the framework accessible to users with codebases big\nand small. If you find an obstacle in your way, caused by Flask, don\u2019t hesitate\nto contact the developers on the mailinglist or IRC channel.  The best way for\nthe Flask and Flask extension developers to improve the tools for larger\napplications is getting feedback from users. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Becoming Big \n Read the Source. \n Hook. Extend. \n Subclass. \n Wrap with middleware. \n Fork. \n Scale like a pro. \n Discuss with the community. \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  CGI \n           Next:  API \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/deploying/", "text": "\n   \n     \n     \n   \n     Deployment Options \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Deployment Options \u00b6 \n While lightweight and easy to use,  Flask\u2019s built-in server is not suitable\nfor production  as it doesn\u2019t scale well.  Some of the options available for\nproperly running Flask in production are documented here. \n If you want to deploy your Flask application to a WSGI server not listed here,\nlook up the server documentation about how to use a WSGI app with it.  Just\nremember that your  Flask  application object is the actual WSGI\napplication. \n \n Hosted options \u00b6 \n \n Deploying Flask on Heroku \n Deploying Flask on OpenShift \n Deploying Flask on Webfaction \n Deploying Flask on Google App Engine \n Deploying Flask on AWS Elastic Beanstalk \n Sharing your Localhost Server with Localtunnel \n Deploying on Azure (IIS) \n Deploying on PythonAnywhere \n \n \n \n Self-hosted options \u00b6 \n \n \n Standalone WSGI Containers \n Gunicorn \n uWSGI \n Gevent \n Twisted Web \n Proxy Setups \n \n \n uWSGI \n Starting your app with uwsgi \n Configuring nginx \n \n \n mod_wsgi (Apache) \n Installing  mod_wsgi \n Creating a  .wsgi  file \n Configuring Apache \n Troubleshooting \n Support for Automatic Reloading \n Working with Virtual Environments \n \n \n FastCGI \n Creating a  .fcgi  file \n Configuring Apache \n Configuring lighttpd \n Configuring nginx \n Running FastCGI Processes \n Debugging \n \n \n CGI \n Creating a  .cgi  file \n Server Setup \n \n \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Deployment Options \n Hosted options \n Self-hosted options \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Subclassing Flask \n           Next:  Standalone WSGI Containers \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/subclassing/", "text": "\n   \n     \n     \n   \n     Subclassing Flask \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Subclassing Flask \u00b6 \n The  Flask  class is designed for subclassing. \n For example, you may want to override how request parameters are handled to preserve their order: \n from   flask   import   Flask ,   Request \n from   werkzeug.datastructures   import   ImmutableOrderedMultiDict \n class   MyRequest ( Request ): \n     \"\"\"Request subclass to override request parameter storage\"\"\" \n     parameter_storage_class   =   ImmutableOrderedMultiDict \n class   MyFlask ( Flask ): \n     \"\"\"Flask subclass using the custom request class\"\"\" \n     request_class   =   MyRequest \n \n \n This is the recommended approach for overriding or augmenting Flask\u2019s internal functionality. \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Celery Background Tasks \n           Next:  Deployment Options \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/requestchecksum/", "text": "\n   \n     \n     \n   \n     Request Content Checksums \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Request Content Checksums \u00b6 \n Various pieces of code can consume the request data and preprocess it.\nFor instance JSON data ends up on the request object already read and\nprocessed, form data ends up there as well but goes through a different\ncode path.  This seems inconvenient when you want to calculate the\nchecksum of the incoming request data.  This is necessary sometimes for\nsome APIs. \n Fortunately this is however very simple to change by wrapping the input\nstream. \n The following example calculates the SHA1 checksum of the incoming data as\nit gets read and stores it in the WSGI environment: \n import   hashlib \n\n class   ChecksumCalcStream ( object ): \n\n     def   __init__ ( self ,   stream ): \n         self . _stream   =   stream \n         self . _hash   =   hashlib . sha1 () \n\n     def   read ( self ,   bytes ): \n         rv   =   self . _stream . read ( bytes ) \n         self . _hash . update ( rv ) \n         return   rv \n\n     def   readline ( self ,   size_hint ): \n         rv   =   self . _stream . readline ( size_hint ) \n         self . _hash . update ( rv ) \n         return   rv \n\n def   generate_checksum ( request ): \n     env   =   request . environ \n     stream   =   ChecksumCalcStream ( env [ 'wsgi.input' ]) \n     env [ 'wsgi.input' ]   =   stream \n     return   stream . _hash \n \n \n To use this, all you need to do is to hook the calculating stream in\nbefore the request starts consuming data.  (Eg: be careful accessing\n request.form  or anything of that nature.   before_request_handlers \nfor instance should be careful not to access it). \n Example usage: \n @app . route ( '/special-api' ,   methods = [ 'POST' ]) \n def   special_api (): \n     hash   =   generate_checksum ( request ) \n     # Accessing this parses the input stream \n     files   =   request . files \n     # At this point the hash is fully constructed. \n     checksum   =   hash . hexdigest () \n     return   'Hash was:  %s '   %   checksum \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Adding HTTP Method Overrides \n           Next:  Celery Background Tasks \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/celery/", "text": "\n   \n     \n     \n   \n     Celery Background Tasks \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Celery Background Tasks \u00b6 \n If your application has a long running task, such as processing some uploaded\ndata or sending email, you don\u2019t want to wait for it to finish during a\nrequest. Instead, use a task queue to send the necessary data to another\nprocess that will run the task in the background while the request returns\nimmediately. \n Celery is a powerful task queue that can be used for simple background tasks\nas well as complex multi-stage programs and schedules. This guide will show you\nhow to configure Celery using Flask, but assumes you\u2019ve already read the\n First Steps with Celery \nguide in the Celery documentation. \n \n Install \u00b6 \n Celery is a separate Python package. Install it from PyPI using pip: \n $ pip install celery\n \n \n \n \n Configure \u00b6 \n The first thing you need is a Celery instance, this is called the celery\napplication.  It serves the same purpose as the  Flask \nobject in Flask, just for Celery.  Since this instance is used as the\nentry-point for everything you want to do in Celery, like creating tasks\nand managing workers, it must be possible for other modules to import it. \n For instance you can place this in a  tasks  module.  While you can use\nCelery without any reconfiguration with Flask, it becomes a bit nicer by\nsubclassing tasks and adding support for Flask\u2019s application contexts and\nhooking it up with the Flask configuration. \n This is all that is necessary to properly integrate Celery with Flask: \n from   celery   import   Celery \n\n def   make_celery ( app ): \n     celery   =   Celery ( \n         app . import_name , \n         backend = app . config [ 'CELERY_RESULT_BACKEND' ], \n         broker = app . config [ 'CELERY_BROKER_URL' ] \n     ) \n     celery . conf . update ( app . config ) \n\n     class   ContextTask ( celery . Task ): \n         def   __call__ ( self ,   * args ,   ** kwargs ): \n             with   app . app_context (): \n                 return   self . run ( * args ,   ** kwargs ) \n\n     celery . Task   =   ContextTask \n     return   celery \n \n \n The function creates a new Celery object, configures it with the broker\nfrom the application config, updates the rest of the Celery config from\nthe Flask config and then creates a subclass of the task that wraps the\ntask execution in an application context. \n \n \n An example task \u00b6 \n Let\u2019s write a task that adds two numbers together and returns the result. We\nconfigure Celery\u2019s broker and backend to use Redis, create a  celery \napplication using the factor from above, and then use it to define the task. \n from   flask   import   Flask \n\n flask_app   =   Flask ( __name__ ) \n flask_app . config . update ( \n     CELERY_BROKER_URL = 'redis://localhost:6379' , \n     CELERY_RESULT_BACKEND = 'redis://localhost:6379' \n ) \n celery   =   make_celery ( flask_app ) \n\n @celery . task () \n def   add_together ( a ,   b ): \n     return   a   +   b \n \n \n This task can now be called in the background: \n result   =   add_together . delay ( 23 ,   42 ) \n result . wait ()    # 65 \n \n \n \n \n Run a worker \u00b6 \n If you jumped in and already executed the above code you will be\ndisappointed to learn that  .wait()  will never actually return.\nThat\u2019s because you also need to run a Celery worker to receive and execute the\ntask. \n $ celery -A your_application.celery worker\n \n \n The  your_application  string has to point to your application\u2019s package\nor module that creates the  celery  object. \n Now that the worker is running,  wait  will return the result once the task\nis finished. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Celery Background Tasks \n Install \n Configure \n An example task \n Run a worker \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Request Content Checksums \n           Next:  Subclassing Flask \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/methodoverrides/", "text": "\n   \n     \n     \n   \n     Adding HTTP Method Overrides \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Adding HTTP Method Overrides \u00b6 \n Some HTTP proxies do not support arbitrary HTTP methods or newer HTTP\nmethods (such as PATCH).  In that case it\u2019s possible to \u201cproxy\u201d HTTP\nmethods through another HTTP method in total violation of the protocol. \n The way this works is by letting the client do an HTTP POST request and\nset the  X-HTTP-Method-Override  header and set the value to the\nintended HTTP method (such as  PATCH ). \n This can easily be accomplished with an HTTP middleware: \n class   HTTPMethodOverrideMiddleware ( object ): \n     allowed_methods   =   frozenset ([ \n         'GET' , \n         'HEAD' , \n         'POST' , \n         'DELETE' , \n         'PUT' , \n         'PATCH' , \n         'OPTIONS' \n     ]) \n     bodyless_methods   =   frozenset ([ 'GET' ,   'HEAD' ,   'OPTIONS' ,   'DELETE' ]) \n\n     def   __init__ ( self ,   app ): \n         self . app   =   app \n\n     def   __call__ ( self ,   environ ,   start_response ): \n         method   =   environ . get ( 'HTTP_X_HTTP_METHOD_OVERRIDE' ,   '' ) . upper () \n         if   method   in   self . allowed_methods : \n             method   =   method . encode ( 'ascii' ,   'replace' ) \n             environ [ 'REQUEST_METHOD' ]   =   method \n         if   method   in   self . bodyless_methods : \n             environ [ 'CONTENT_LENGTH' ]   =   '0' \n         return   self . app ( environ ,   start_response ) \n \n \n To use this with Flask this is all that is necessary: \n from   flask   import   Flask \n\n app   =   Flask ( __name__ ) \n app . wsgi_app   =   HTTPMethodOverrideMiddleware ( app . wsgi_app ) \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Deferred Request Callbacks \n           Next:  Request Content Checksums \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/deferredcallbacks/", "text": "\n   \n     \n     \n   \n     Deferred Request Callbacks \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Deferred Request Callbacks \u00b6 \n One of the design principles of Flask is that response objects are created and\npassed down a chain of potential callbacks that can modify them or replace\nthem. When the request handling starts, there is no response object yet. It is\ncreated as necessary either by a view function or by some other component in\nthe system. \n What happens if you want to modify the response at a point where the response\ndoes not exist yet?  A common example for that would be a\n before_request()  callback that wants to set a cookie on the\nresponse object. \n One way is to avoid the situation. Very often that is possible. For instance\nyou can try to move that logic into a  after_request() \ncallback instead. However, sometimes moving code there makes it more\nmore complicated or awkward to reason about. \n As an alternative, you can use  after_this_request()  to register\ncallbacks that will execute after only the current request. This way you can\ndefer code execution from anywhere in the application, based on the current\nrequest. \n At any time during a request, we can register a function to be called at the\nend of the request. For example you can remember the current language of the\nuser in a cookie in a  before_request()  callback: \n from   flask   import   request ,   after_this_request \n\n @app . before_request \n def   detect_user_language (): \n     language   =   request . cookies . get ( 'user_lang' ) \n\n     if   language   is   None : \n         language   =   guess_language_from_request () \n\n         # when the response exists, set a cookie with the language \n         @after_this_request \n         def   remember_language ( response ): \n             response . set_cookie ( 'user_lang' ,   language ) \n\n     g . language   =   language \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Streaming Contents \n           Next:  Adding HTTP Method Overrides \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/streaming/", "text": "\n   \n     \n     \n   \n     Streaming Contents \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Streaming Contents \u00b6 \n Sometimes you want to send an enormous amount of data to the client, much\nmore than you want to keep in memory.  When you are generating the data on\nthe fly though, how do you send that back to the client without the\nroundtrip to the filesystem? \n The answer is by using generators and direct responses. \n \n Basic Usage \u00b6 \n This is a basic view function that generates a lot of CSV data on the fly.\nThe trick is to have an inner function that uses a generator to generate\ndata and to then invoke that function and pass it to a response object: \n from   flask   import   Response \n\n @app . route ( '/large.csv' ) \n def   generate_large_csv (): \n     def   generate (): \n         for   row   in   iter_all_rows (): \n             yield   ',' . join ( row )   +   ' \\n ' \n     return   Response ( generate (),   mimetype = 'text/csv' ) \n \n \n Each  yield  expression is directly sent to the browser.  Note though\nthat some WSGI middlewares might break streaming, so be careful there in\ndebug environments with profilers and other things you might have enabled. \n \n \n Streaming from Templates \u00b6 \n The Jinja2 template engine also supports rendering templates piece by\npiece.  This functionality is not directly exposed by Flask because it is\nquite uncommon, but you can easily do it yourself: \n from   flask   import   Response \n\n def   stream_template ( template_name ,   ** context ): \n     app . update_template_context ( context ) \n     t   =   app . jinja_env . get_template ( template_name ) \n     rv   =   t . stream ( context ) \n     rv . enable_buffering ( 5 ) \n     return   rv \n\n @app . route ( '/my-large-page.html' ) \n def   render_large_template (): \n     rows   =   iter_all_rows () \n     return   Response ( stream_template ( 'the_template.html' ,   rows = rows )) \n \n \n The trick here is to get the template object from the Jinja2 environment\non the application and to call  stream()  instead of\n render()  which returns a stream object instead of a\nstring.  Since we\u2019re bypassing the Flask template render functions and\nusing the template object itself we have to make sure to update the render\ncontext ourselves by calling  update_template_context() .\nThe template is then evaluated as the stream is iterated over.  Since each\ntime you do a yield the server will flush the content to the client you\nmight want to buffer up a few items in the template which you can do with\n rv.enable_buffering(size) .   5  is a sane default. \n \n \n Streaming with Context \u00b6 \n \n Changelog \n New in version 0.9. \n \n Note that when you stream data, the request context is already gone the\nmoment the function executes.  Flask 0.9 provides you with a helper that\ncan keep the request context around during the execution of the\ngenerator: \n from   flask   import   stream_with_context ,   request ,   Response \n\n @app . route ( '/stream' ) \n def   streamed_response (): \n     def   generate (): \n         yield   'Hello ' \n         yield   request . args [ 'name' ] \n         yield   '!' \n     return   Response ( stream_with_context ( generate ())) \n \n \n Without the  stream_with_context()  function you would get a\n RuntimeError  at that point. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Streaming Contents \n Basic Usage \n Streaming from Templates \n Streaming with Context \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Adding a favicon \n           Next:  Deferred Request Callbacks \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/favicon/", "text": "\n   \n     \n     \n   \n     Adding a favicon \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Adding a favicon \u00b6 \n A \u201cfavicon\u201d is an icon used by browsers for tabs and bookmarks. This helps\nto distinguish your website and to give it a unique brand. \n A common question is how to add a favicon to a Flask application. First, of\ncourse, you need an icon. It should be 16 \u00d7 16 pixels and in the ICO file\nformat. This is not a requirement but a de-facto standard supported by all\nrelevant browsers. Put the icon in your static directory as\n favicon.ico . \n Now, to get browsers to find your icon, the correct way is to add a link\ntag in your HTML. So, for example: \n < link   rel = \"shortcut icon\"   href = \" {{   url_for ( 'static' ,   filename = 'favicon.ico' )   }} \" > \n \n \n That\u2019s all you need for most browsers, however some really old ones do not\nsupport this standard. The old de-facto standard is to serve this file,\nwith this name, at the website root. If your application is not mounted at\nthe root path of the domain you either need to configure the web server to\nserve the icon at the root or if you can\u2019t do that you\u2019re out of luck. If\nhowever your application is the root you can simply route a redirect: \n app . add_url_rule ( '/favicon.ico' , \n                  redirect_to = url_for ( 'static' ,   filename = 'favicon.ico' )) \n \n \n If you want to save the extra redirect request you can also write a view\nusing  send_from_directory() : \n import   os \n from   flask   import   send_from_directory \n\n @app . route ( '/favicon.ico' ) \n def   favicon (): \n     return   send_from_directory ( os . path . join ( app . root_path ,   'static' ), \n                                'favicon.ico' ,   mimetype = 'image/vnd.microsoft.icon' ) \n \n \n We can leave out the explicit mimetype and it will be guessed, but we may\nas well specify it to avoid the extra guessing, as it will always be the\nsame. \n The above will serve the icon via your application and if possible it\u2019s\nbetter to configure your dedicated web server to serve it; refer to the\nweb server\u2019s documentation. \n \n See also \u00b6 \n \n The  Favicon  article on\nWikipedia \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Adding a favicon \n See also \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  MongoKit in Flask \n           Next:  Streaming Contents \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/mongokit/", "text": "\n   \n     \n     \n   \n     MongoKit in Flask \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n MongoKit in Flask \u00b6 \n Using a document database rather than a full DBMS gets more common these days.\nThis pattern shows how to use MongoKit, a document mapper library, to\nintegrate with MongoDB. \n This pattern requires a running MongoDB server and the MongoKit library\ninstalled. \n There are two very common ways to use MongoKit.  I will outline each of them\nhere: \n \n Declarative \u00b6 \n The default behavior of MongoKit is the declarative one that is based on\ncommon ideas from Django or the SQLAlchemy declarative extension. \n Here an example  app.py  module for your application: \n from   flask   import   Flask \n from   mongokit   import   Connection ,   Document \n\n # configuration \n MONGODB_HOST   =   'localhost' \n MONGODB_PORT   =   27017 \n\n # create the little application object \n app   =   Flask ( __name__ ) \n app . config . from_object ( __name__ ) \n\n # connect to the database \n connection   =   Connection ( app . config [ 'MONGODB_HOST' ], \n                         app . config [ 'MONGODB_PORT' ]) \n \n \n To define your models, just subclass the  Document  class that is imported\nfrom MongoKit.  If you\u2019ve seen the SQLAlchemy pattern you may wonder why we do\nnot have a session and even do not define a  init_db  function here.  On the\none hand, MongoKit does not have something like a session.  This sometimes\nmakes it more to type but also makes it blazingly fast.  On the other hand,\nMongoDB is schemaless.  This means you can modify the data structure from one\ninsert query to the next without any problem.  MongoKit is just schemaless\ntoo, but implements some validation to ensure data integrity. \n Here is an example document (put this also into  app.py , e.g.): \n from   mongokit   import   ValidationError \n\n def   max_length ( length ): \n     def   validate ( value ): \n         if   len ( value )   <=   length : \n             return   True \n         # must have %s in error format string to have mongokit place key in there \n         raise   ValidationError ( ' %s  must be at most  {}  characters long' . format ( length )) \n     return   validate \n\n class   User ( Document ): \n     structure   =   { \n         'name' :   unicode , \n         'email' :   unicode , \n     } \n     validators   =   { \n         'name' :   max_length ( 50 ), \n         'email' :   max_length ( 120 ) \n     } \n     use_dot_notation   =   True \n     def   __repr__ ( self ): \n         return   '<User  %r >'   %   ( self . name ) \n\n # register the User document with our current connection \n connection . register ([ User ]) \n \n \n This example shows you how to define your schema (named structure), a\nvalidator for the maximum character length and uses a special MongoKit feature\ncalled  use_dot_notation .  Per default MongoKit behaves like a python\ndictionary but with  use_dot_notation  set to  True  you can use your\ndocuments like you use models in nearly any other ORM by using dots to\nseparate between attributes. \n You can insert entries into the database like this: \n >>>  from   yourapplication.database   import   connection \n >>>  from   yourapplication.models   import   User \n >>>  collection   =   connection [ 'test' ] . users \n >>>  user   =   collection . User () \n >>>  user [ 'name' ]   =   u 'admin' \n >>>  user [ 'email' ]   =   u 'admin@localhost' \n >>>  user . save () \n \n \n Note that MongoKit is kinda strict with used column types, you must not use a\ncommon  str  type for either  name  or  email  but unicode. \n Querying is simple as well: \n >>>  list ( collection . User . find ()) \n [<User u'admin'>] \n >>>  collection . User . find_one ({ 'name' :   u 'admin' }) \n <User u'admin'> \n \n \n \n \n PyMongo Compatibility Layer \u00b6 \n If you just want to use PyMongo, you can do that with MongoKit as well.  You\nmay use this process if you need the best performance to get.  Note that this\nexample does not show how to couple it with Flask, see the above MongoKit code\nfor examples: \n from   MongoKit   import   Connection \n\n connection   =   Connection () \n \n \n To insert data you can use the  insert  method.  We have to get a\ncollection first, this is somewhat the same as a table in the SQL world. \n >>>  collection   =   connection [ 'test' ] . users \n >>>  user   =   { 'name' :   u 'admin' ,   'email' :   u 'admin@localhost' } \n >>>  collection . insert ( user ) \n \n \n MongoKit will automatically commit for us. \n To query your database, you use the collection directly: \n >>>  list ( collection . find ()) \n [{u'_id': ObjectId('4c271729e13823182f000000'), u'name': u'admin', u'email': u'admin@localhost'}] \n >>>  collection . find_one ({ 'name' :   u 'admin' }) \n {u'_id': ObjectId('4c271729e13823182f000000'), u'name': u'admin', u'email': u'admin@localhost'} \n \n \n These results are also dict-like objects: \n >>>  r   =   collection . find_one ({ 'name' :   u 'admin' }) \n >>>  r [ 'email' ] \n u'admin@localhost' \n \n \n For more information about MongoKit, head over to the\n website . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n MongoKit in Flask \n Declarative \n PyMongo Compatibility Layer \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Lazily Loading Views \n           Next:  Adding a favicon \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/lazyloading/", "text": "\n   \n     \n     \n   \n     Lazily Loading Views \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Lazily Loading Views \u00b6 \n Flask is usually used with the decorators.  Decorators are simple and you\nhave the URL right next to the function that is called for that specific\nURL.  However there is a downside to this approach: it means all your code\nthat uses decorators has to be imported upfront or Flask will never\nactually find your function. \n This can be a problem if your application has to import quick.  It might\nhave to do that on systems like Google\u2019s App Engine or other systems.  So\nif you suddenly notice that your application outgrows this approach you\ncan fall back to a centralized URL mapping. \n The system that enables having a central URL map is the\n add_url_rule()  function.  Instead of using decorators,\nyou have a file that sets up the application with all URLs. \n \n Converting to Centralized URL Map \u00b6 \n Imagine the current application looks somewhat like this: \n from   flask   import   Flask \n app   =   Flask ( __name__ ) \n\n @app . route ( '/' ) \n def   index (): \n     pass \n\n @app . route ( '/user/<username>' ) \n def   user ( username ): \n     pass \n \n \n Then, with the centralized approach you would have one file with the views\n( views.py ) but without any decorator: \n def   index (): \n     pass \n\n def   user ( username ): \n     pass \n \n \n And then a file that sets up an application which maps the functions to\nURLs: \n from   flask   import   Flask \n from   yourapplication   import   views \n app   =   Flask ( __name__ ) \n app . add_url_rule ( '/' ,   view_func = views . index ) \n app . add_url_rule ( '/user/<username>' ,   view_func = views . user ) \n \n \n \n \n Loading Late \u00b6 \n So far we only split up the views and the routing, but the module is still\nloaded upfront.  The trick is to actually load the view function as needed.\nThis can be accomplished with a helper class that behaves just like a\nfunction but internally imports the real function on first use: \n from   werkzeug   import   import_string ,   cached_property \n\n class   LazyView ( object ): \n\n     def   __init__ ( self ,   import_name ): \n         self . __module__ ,   self . __name__   =   import_name . rsplit ( '.' ,   1 ) \n         self . import_name   =   import_name \n\n     @cached_property \n     def   view ( self ): \n         return   import_string ( self . import_name ) \n\n     def   __call__ ( self ,   * args ,   ** kwargs ): \n         return   self . view ( * args ,   ** kwargs ) \n \n \n What\u2019s important here is is that  __module__  and  __name__  are properly\nset.  This is used by Flask internally to figure out how to name the\nURL rules in case you don\u2019t provide a name for the rule yourself. \n Then you can define your central place to combine the views like this: \n from   flask   import   Flask \n from   yourapplication.helpers   import   LazyView \n app   =   Flask ( __name__ ) \n app . add_url_rule ( '/' , \n                  view_func = LazyView ( 'yourapplication.views.index' )) \n app . add_url_rule ( '/user/<username>' , \n                  view_func = LazyView ( 'yourapplication.views.user' )) \n \n \n You can further optimize this in terms of amount of keystrokes needed to\nwrite this by having a function that calls into\n add_url_rule()  by prefixing a string with the project\nname and a dot, and by wrapping  view_func  in a  LazyView  as needed. \n def   url ( import_name ,   url_rules = [],   ** options ): \n     view   =   LazyView ( 'yourapplication.'   +   import_name ) \n     for   url_rule   in   url_rules : \n         app . add_url_rule ( url_rule ,   view_func = view ,   ** options ) \n\n # add a single route to the index view \n url ( 'views.index' ,   [ '/' ]) \n\n # add two routes to a single function endpoint \n url_rules   =   [ '/user/' , '/user/<username>' ] \n url ( 'views.user' ,   url_rules ) \n \n \n One thing to keep in mind is that before and after request handlers have\nto be in a file that is imported upfront to work properly on the first\nrequest.  The same goes for any kind of remaining decorator. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Lazily Loading Views \n Converting to Centralized URL Map \n Loading Late \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Custom Error Pages \n           Next:  MongoKit in Flask \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/errorpages/", "text": "\n   \n     \n     \n   \n     Custom Error Pages \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Custom Error Pages \u00b6 \n Flask comes with a handy  abort()  function that aborts a\nrequest with an HTTP error code early.  It will also provide a plain black\nand white error page for you with a basic description, but nothing fancy. \n Depending on the error code it is less or more likely for the user to\nactually see such an error. \n \n Common Error Codes \u00b6 \n The following error codes are some that are often displayed to the user,\neven if the application behaves correctly: \n \n 404 Not Found \n The good old \u201cchap, you made a mistake typing that URL\u201d message.  So\ncommon that even novices to the internet know that 404 means: damn,\nthe thing I was looking for is not there.  It\u2019s a very good idea to\nmake sure there is actually something useful on a 404 page, at least a\nlink back to the index. \n 403 Forbidden \n If you have some kind of access control on your website, you will have\nto send a 403 code for disallowed resources.  So make sure the user\nis not lost when they try to access a forbidden resource. \n 410 Gone \n Did you know that there the \u201c404 Not Found\u201d has a brother named \u201c410\nGone\u201d?  Few people actually implement that, but the idea is that\nresources that previously existed and got deleted answer with 410\ninstead of 404.  If you are not deleting documents permanently from\nthe database but just mark them as deleted, do the user a favour and\nuse the 410 code instead and display a message that what they were\nlooking for was deleted for all eternity. \n 500 Internal Server Error \n Usually happens on programming errors or if the server is overloaded.\nA terribly good idea is to have a nice page there, because your\napplication  will  fail sooner or later (see also:\n Application Errors ). \n \n \n \n Error Handlers \u00b6 \n An error handler is a function that returns a response when a type of error is\nraised, similar to how a view is a function that returns a response when a\nrequest URL is matched. It is passed the instance of the error being handled,\nwhich is most likely a  HTTPException . An error\nhandler for \u201c500 Internal Server Error\u201d will be passed uncaught exceptions in\naddition to explicit 500 errors. \n An error handler is registered with the  errorhandler() \ndecorator or the  register_error_handler()  method. A handler\ncan be registered for a status code, like 404, or for an exception class. \n The status code of the response will not be set to the handler\u2019s code. Make\nsure to provide the appropriate HTTP status code when returning a response from\na handler. \n A handler for \u201c500 Internal Server Error\u201d will not be used when running in\ndebug mode. Instead, the interactive debugger will be shown. \n Here is an example implementation for a \u201c404 Page Not Found\u201d exception: \n from   flask   import   render_template \n\n @app . errorhandler ( 404 ) \n def   page_not_found ( e ): \n     # note that we set the 404 status explicitly \n     return   render_template ( '404.html' ),   404 \n \n \n When using the  application factory pattern : \n from   flask   import   Flask ,   render_template \n\n def   page_not_found ( e ): \n   return   render_template ( '404.html' ),   404 \n\n def   create_app ( config_filename ): \n     app   =   Flask ( __name__ ) \n     app . register_error_handler ( 404 ,   page_not_found ) \n     return   app \n \n \n An example template might be this: \n {%   extends   \"layout.html\"   %} \n {%   block   title   %} Page Not Found {%   endblock   %} \n {%   block   body   %} \n   < h1 > Page Not Found </ h1 > \n   < p > What you were looking for is just not there.\n   < p >< a   href = \" {{   url_for ( 'index' )   }} \" > go somewhere nice </ a > \n {%   endblock   %} \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Custom Error Pages \n Common Error Codes \n Error Handlers \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  AJAX with jQuery \n           Next:  Lazily Loading Views \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/flashing/", "text": "\n   \n     \n     \n   \n     Message Flashing \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Message Flashing \u00b6 \n Good applications and user interfaces are all about feedback.  If the user\ndoes not get enough feedback they will probably end up hating the\napplication.  Flask provides a really simple way to give feedback to a\nuser with the flashing system.  The flashing system basically makes it\npossible to record a message at the end of a request and access it next\nrequest and only next request.  This is usually combined with a layout\ntemplate that does this. Note that browsers and sometimes web servers enforce\na limit on cookie sizes. This means that flashing messages that are too\nlarge for session cookies causes message flashing to fail silently. \n \n Simple Flashing \u00b6 \n So here is a full example: \n from   flask   import   Flask ,   flash ,   redirect ,   render_template ,  \\\n      request ,   url_for \n\n app   =   Flask ( __name__ ) \n app . secret_key   =   b '_5#y2L\"F4Q8z \\n\\xec ]/' \n\n @app . route ( '/' ) \n def   index (): \n     return   render_template ( 'index.html' ) \n\n @app . route ( '/login' ,   methods = [ 'GET' ,   'POST' ]) \n def   login (): \n     error   =   None \n     if   request . method   ==   'POST' : \n         if   request . form [ 'username' ]   !=   'admin'   or  \\\n                 request . form [ 'password' ]   !=   'secret' : \n             error   =   'Invalid credentials' \n         else : \n             flash ( 'You were successfully logged in' ) \n             return   redirect ( url_for ( 'index' )) \n     return   render_template ( 'login.html' ,   error = error ) \n \n \n And here is the  layout.html  template which does the magic: \n <!doctype html> \n < title > My Application </ title > \n {%   with   messages   =   get_flashed_messages ()   %} \n   {%   if   messages   %} \n     < ul   class = flashes > \n     {%   for   message   in   messages   %} \n       < li > {{   message   }} </ li > \n     {%   endfor   %} \n     </ ul > \n   {%   endif   %} \n {%   endwith   %} \n {%   block   body   %}{%   endblock   %} \n \n \n Here is the  index.html  template which inherits from  layout.html : \n {%   extends   \"layout.html\"   %} \n {%   block   body   %} \n   < h1 > Overview </ h1 > \n   < p > Do you want to  < a   href = \" {{   url_for ( 'login' )   }} \" > log in? </ a > \n {%   endblock   %} \n \n \n And here is the  login.html  template which also inherits from\n layout.html : \n {%   extends   \"layout.html\"   %} \n {%   block   body   %} \n   < h1 > Login </ h1 > \n   {%   if   error   %} \n     < p   class = error >< strong > Error: </ strong >   {{   error   }} \n   {%   endif   %} \n   < form   method = post > \n     < dl > \n       < dt > Username:\n       < dd >< input   type = text   name = username   value = \" {{ \n           request.form.username   }} \" > \n       < dt > Password:\n       < dd >< input   type = password   name = password > \n     </ dl > \n     < p >< input   type = submit   value = Login > \n   </ form > \n {%   endblock   %} \n \n \n \n \n Flashing With Categories \u00b6 \n \n Changelog \n New in version 0.3. \n \n It is also possible to provide categories when flashing a message.  The\ndefault category if nothing is provided is  'message' .  Alternative\ncategories can be used to give the user better feedback.  For example\nerror messages could be displayed with a red background. \n To flash a message with a different category, just use the second argument\nto the  flash()  function: \n flash ( u 'Invalid password provided' ,   'error' ) \n \n \n Inside the template you then have to tell the\n get_flashed_messages()  function to also return the\ncategories.  The loop looks slightly different in that situation then: \n {%   with   messages   =   get_flashed_messages ( with_categories = true )   %} \n   {%   if   messages   %} \n     < ul   class = flashes > \n     {%   for   category ,   message   in   messages   %} \n       < li   class = \" {{   category   }} \" > {{   message   }} </ li > \n     {%   endfor   %} \n     </ ul > \n   {%   endif   %} \n {%   endwith   %} \n \n \n This is just one example of how to render these flashed messages.  One\nmight also use the category to add a prefix such as\n <strong>Error:</strong>  to the message. \n \n \n Filtering Flash Messages \u00b6 \n \n Changelog \n New in version 0.9. \n \n Optionally you can pass a list of categories which filters the results of\n get_flashed_messages() .  This is useful if you wish to\nrender each category in a separate block. \n {%   with   errors   =   get_flashed_messages ( category_filter =[ \"error\" ])   %} \n {%   if   errors   %} \n < div   class = \"alert-message block-message error\" > \n   < a   class = \"close\"   href = \"#\" > \u00d7 </ a > \n   < ul > \n     {% -  for   msg   in   errors   %} \n     < li > {{   msg   }} </ li > \n     {%   endfor  - %} \n   </ ul > \n </ div > \n {%   endif   %} \n {%   endwith   %} \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Message Flashing \n Simple Flashing \n Flashing With Categories \n Filtering Flash Messages \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Template Inheritance \n           Next:  AJAX with jQuery \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/jquery/", "text": "\n   \n     \n     \n   \n     AJAX with jQuery \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n AJAX with jQuery \u00b6 \n jQuery  is a small JavaScript library commonly used to simplify working\nwith the DOM and JavaScript in general.  It is the perfect tool to make\nweb applications more dynamic by exchanging JSON between server and\nclient. \n JSON itself is a very lightweight transport format, very similar to how\nPython primitives (numbers, strings, dicts and lists) look like which is\nwidely supported and very easy to parse.  It became popular a few years\nago and quickly replaced XML as transport format in web applications. \n \n Loading jQuery \u00b6 \n In order to use jQuery, you have to download it first and place it in the\nstatic folder of your application and then ensure it\u2019s loaded.  Ideally\nyou have a layout template that is used for all pages where you just have\nto add a script statement to the bottom of your  <body>  to load jQuery: \n < script   type = text/javascript   src = \"{{ \n   url_for('static', filename='jquery.js') }}\" ></ script > \n \n \n Another method is using Google\u2019s  AJAX Libraries API  to load jQuery: \n < script   src = \"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\" ></ script > \n < script > window . jQuery   ||   document . write ( '<script src=\"{{ \n   url_for(' static ', filename=' jquery . js ') }}\">\\x3C/script>' )</ script > \n \n \n In this case you have to put jQuery into your static folder as a fallback, but it will\nfirst try to load it directly from Google. This has the advantage that your\nwebsite will probably load faster for users if they went to at least one\nother website before using the same jQuery version from Google because it\nwill already be in the browser cache. \n \n \n Where is My Site? \u00b6 \n Do you know where your application is?  If you are developing the answer\nis quite simple: it\u2019s on localhost port something and directly on the root\nof that server.  But what if you later decide to move your application to\na different location?  For example to  http://example.com/myapp ?  On\nthe server side this never was a problem because we were using the handy\n url_for()  function that could answer that question for\nus, but if we are using jQuery we should not hardcode the path to\nthe application but make that dynamic, so how can we do that? \n A simple method would be to add a script tag to our page that sets a\nglobal variable to the prefix to the root of the application.  Something\nlike this: \n < script   type = text/javascript > \n   $SCRIPT_ROOT   =   {{   request.script_root | tojson | safe   }} ; \n </ script > \n \n \n The  |safe  is necessary in Flask before 0.10 so that Jinja does not\nescape the JSON encoded string with HTML rules.  Usually this would be\nnecessary, but we are inside a  script  block here where different rules\napply. \n \n Information for Pros \n In HTML the  script  tag is declared  CDATA  which means that entities\nwill not be parsed.  Everything until  </script>  is handled as script.\nThis also means that there must never be any  </  between the script\ntags.   |tojson  is kind enough to do the right thing here and\nescape slashes for you ( {{   \"</script>\"|tojson|safe   }}  is rendered as\n \"<\\/script>\" ). \n In Flask 0.10 it goes a step further and escapes all HTML tags with\nunicode escapes.  This makes it possible for Flask to automatically\nmark the result as HTML safe. \n \n \n \n JSON View Functions \u00b6 \n Now let\u2019s create a server side function that accepts two URL arguments of\nnumbers which should be added together and then sent back to the\napplication in a JSON object.  This is a really ridiculous example and is\nsomething you usually would do on the client side alone, but a simple\nexample that shows how you would use jQuery and Flask nonetheless: \n from   flask   import   Flask ,   jsonify ,   render_template ,   request \n app   =   Flask ( __name__ ) \n\n @app . route ( '/_add_numbers' ) \n def   add_numbers (): \n     a   =   request . args . get ( 'a' ,   0 ,   type = int ) \n     b   =   request . args . get ( 'b' ,   0 ,   type = int ) \n     return   jsonify ( result = a   +   b ) \n\n @app . route ( '/' ) \n def   index (): \n     return   render_template ( 'index.html' ) \n \n \n As you can see I also added an  index  method here that renders a\ntemplate.  This template will load jQuery as above and have a little form\nwe can add two numbers and a link to trigger the function on the server\nside. \n Note that we are using the  get()  method here\nwhich will never fail.  If the key is missing a default value (here  0 )\nis returned.  Furthermore it can convert values to a specific type (like\nin our case  int ).  This is especially handy for code that is\ntriggered by a script (APIs, JavaScript etc.) because you don\u2019t need\nspecial error reporting in that case. \n \n \n The HTML \u00b6 \n Your index.html template either has to extend a  layout.html  template with\njQuery loaded and the  $SCRIPT_ROOT  variable set, or do that on the top.\nHere\u2019s the HTML code needed for our little application ( index.html ).\nNotice that we also drop the script directly into the HTML here.  It is\nusually a better idea to have that in a separate script file: \n < script   type = text/javascript > \n   $ ( function ()   { \n     $ ( 'a#calculate' ). bind ( 'click' ,   function ()   { \n       $ . getJSON ( $SCRIPT_ROOT   +   '/_add_numbers' ,   { \n         a :   $ ( 'input[name=\"a\"]' ). val (), \n         b :   $ ( 'input[name=\"b\"]' ). val () \n       },   function ( data )   { \n         $ ( \"#result\" ). text ( data . result ); \n       }); \n       return   false ; \n     }); \n   }); \n </ script > \n < h1 > jQuery Example </ h1 > \n < p >< input   type = text   size = 5   name = a >  +\n    < input   type = text   size = 5   name = b >  =\n    < span   id = result > ? </ span > \n < p >< a   href = #   id = calculate > calculate server side </ a > \n \n \n I won\u2019t go into detail here about how jQuery works, just a very quick\nexplanation of the little bit of code above: \n \n $(function()   {   ...   })  specifies code that should run once the\nbrowser is done loading the basic parts of the page. \n $('selector')  selects an element and lets you operate on it. \n element.bind('event',   func)  specifies a function that should run\nwhen the user clicked on the element.  If that function returns\n false , the default behavior will not kick in (in this case, navigate\nto the  #  URL). \n $.getJSON(url,   data,   func)  sends a  GET  request to  url  and will\nsend the contents of the  data  object as query parameters.  Once the\ndata arrived, it will call the given function with the return value as\nargument.  Note that we can use the  $SCRIPT_ROOT  variable here that\nwe set earlier. \n \n Check out the  example source  for a full\napplication demonstrating the code on this page, as well as the same\nthing using  XMLHttpRequest  and  fetch . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n AJAX with jQuery \n Loading jQuery \n Where is My Site? \n JSON View Functions \n The HTML \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Message Flashing \n           Next:  Custom Error Pages \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/templateinheritance/", "text": "\n   \n     \n     \n   \n     Template Inheritance \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Template Inheritance \u00b6 \n The most powerful part of Jinja is template inheritance. Template inheritance\nallows you to build a base \u201cskeleton\u201d template that contains all the common\nelements of your site and defines  blocks  that child templates can override. \n Sounds complicated but is very basic. It\u2019s easiest to understand it by starting\nwith an example. \n \n Base Template \u00b6 \n This template, which we\u2019ll call  layout.html , defines a simple HTML skeleton\ndocument that you might use for a simple two-column page. It\u2019s the job of\n\u201cchild\u201d templates to fill the empty blocks with content: \n <!doctype html> \n < html > \n   < head > \n     {%   block   head   %} \n     < link   rel = \"stylesheet\"   href = \" {{   url_for ( 'static' ,   filename = 'style.css' )   }} \" > \n     < title > {%   block   title   %}{%   endblock   %}  - My Webpage </ title > \n     {%   endblock   %} \n   </ head > \n   < body > \n     < div   id = \"content\" > {%   block   content   %}{%   endblock   %} </ div > \n     < div   id = \"footer\" > \n       {%   block   footer   %} \n       &copy;  Copyright 2010 by  < a   href = \"http://domain.invalid/\" > you </ a > .\n       {%   endblock   %} \n     </ div > \n   </ body > \n </ html > \n \n \n In this example, the  {%   block   %}  tags define four blocks that child templates\ncan fill in. All the  block  tag does is tell the template engine that a\nchild template may override those portions of the template. \n \n \n Child Template \u00b6 \n A child template might look like this: \n {%   extends   \"layout.html\"   %} \n {%   block   title   %} Index {%   endblock   %} \n {%   block   head   %} \n   {{   super ()   }} \n   < style   type = \"text/css\" > \n     . important   {   color :   #336699 ;   } \n   </ style > \n {%   endblock   %} \n {%   block   content   %} \n   < h1 > Index </ h1 > \n   < p   class = \"important\" > \n    Welcome on my awesome homepage.\n {%   endblock   %} \n \n \n The  {%   extends   %}  tag is the key here. It tells the template engine that\nthis template \u201cextends\u201d another template.  When the template system evaluates\nthis template, first it locates the parent.  The extends tag must be the\nfirst tag in the template.  To render the contents of a block defined in\nthe parent template, use  {{   super()   }} . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Template Inheritance \n Base Template \n Child Template \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Form Validation with WTForms \n           Next:  Message Flashing \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/wtforms/", "text": "\n   \n     \n     \n   \n     Form Validation with WTForms \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Form Validation with WTForms \u00b6 \n When you have to work with form data submitted by a browser view, code\nquickly becomes very hard to read.  There are libraries out there designed\nto make this process easier to manage.  One of them is  WTForms  which we\nwill handle here.  If you find yourself in the situation of having many\nforms, you might want to give it a try. \n When you are working with WTForms you have to define your forms as classes\nfirst.  I recommend breaking up the application into multiple modules\n( Larger Applications ) for that and adding a separate module for the\nforms. \n \n Getting the most out of WTForms with an Extension \n The  Flask-WTF  extension expands on this pattern and adds a\nfew little helpers that make working with forms and Flask more\nfun.  You can get it from  PyPI . \n \n \n The Forms \u00b6 \n This is an example form for a typical registration page: \n from   wtforms   import   Form ,   BooleanField ,   StringField ,   PasswordField ,   validators \n\n class   RegistrationForm ( Form ): \n     username   =   StringField ( 'Username' ,   [ validators . Length ( min = 4 ,   max = 25 )]) \n     email   =   StringField ( 'Email Address' ,   [ validators . Length ( min = 6 ,   max = 35 )]) \n     password   =   PasswordField ( 'New Password' ,   [ \n         validators . DataRequired (), \n         validators . EqualTo ( 'confirm' ,   message = 'Passwords must match' ) \n     ]) \n     confirm   =   PasswordField ( 'Repeat Password' ) \n     accept_tos   =   BooleanField ( 'I accept the TOS' ,   [ validators . DataRequired ()]) \n \n \n \n \n In the View \u00b6 \n In the view function, the usage of this form looks like this: \n @app . route ( '/register' ,   methods = [ 'GET' ,   'POST' ]) \n def   register (): \n     form   =   RegistrationForm ( request . form ) \n     if   request . method   ==   'POST'   and   form . validate (): \n         user   =   User ( form . username . data ,   form . email . data , \n                     form . password . data ) \n         db_session . add ( user ) \n         flash ( 'Thanks for registering' ) \n         return   redirect ( url_for ( 'login' )) \n     return   render_template ( 'register.html' ,   form = form ) \n \n \n Notice we\u2019re implying that the view is using SQLAlchemy here\n( SQLAlchemy in Flask ), but that\u2019s not a requirement, of course.  Adapt\nthe code as necessary. \n Things to remember: \n \n create the form from the request  form  value if\nthe data is submitted via the HTTP  POST  method and\n args  if the data is submitted as  GET . \n to validate the data, call the  validate() \nmethod, which will return  True  if the data validates,  False \notherwise. \n to access individual values from the form, access  form.<NAME>.data . \n \n \n \n Forms in Templates \u00b6 \n Now to the template side.  When you pass the form to the templates, you can\neasily render them there.  Look at the following example template to see\nhow easy this is.  WTForms does half the form generation for us already.\nTo make it even nicer, we can write a macro that renders a field with\nlabel and a list of errors if there are any. \n Here\u2019s an example  _formhelpers.html  template with such a macro: \n {%   macro   render_field ( field )   %} \n   < dt > {{   field.label   }} \n   < dd > {{   field (** kwargs )| safe   }} \n   {%   if   field.errors   %} \n     < ul   class = errors > \n     {%   for   error   in   field.errors   %} \n       < li > {{   error   }} </ li > \n     {%   endfor   %} \n     </ ul > \n   {%   endif   %} \n   </ dd > \n {%   endmacro   %} \n \n \n This macro accepts a couple of keyword arguments that are forwarded to\nWTForm\u2019s field function, which renders the field for us.  The keyword\narguments will be inserted as HTML attributes.  So, for example, you can\ncall  render_field(form.username,   class='username')  to add a class to\nthe input element.  Note that WTForms returns standard Python unicode\nstrings, so we have to tell Jinja2 that this data is already HTML-escaped\nwith the  |safe  filter. \n Here is the  register.html  template for the function we used above, which\ntakes advantage of the  _formhelpers.html  template: \n {%   from   \"_formhelpers.html\"   import   render_field   %} \n < form   method = post > \n   < dl > \n     {{   render_field ( form.username )   }} \n     {{   render_field ( form.email )   }} \n     {{   render_field ( form.password )   }} \n     {{   render_field ( form.confirm )   }} \n     {{   render_field ( form.accept_tos )   }} \n   </ dl > \n   < p >< input   type = submit   value = Register > \n </ form > \n \n \n For more information about WTForms, head over to the  WTForms\nwebsite . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Form Validation with WTForms \n The Forms \n In the View \n Forms in Templates \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  View Decorators \n           Next:  Template Inheritance \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/tutorial/static/", "text": "\n   \n     \n     \n   \n     Static Files \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Tutorial  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Static Files \u00b6 \n The authentication views and templates work, but they look very plain\nright now. Some  CSS  can be added to add style to the HTML layout you\nconstructed. The style won\u2019t change, so it\u2019s a  static  file rather than\na template. \n Flask automatically adds a  static  view that takes a path relative\nto the  flaskr/static  directory and serves it. The  base.html \ntemplate already has a link to the  style.css  file: \n {{   url_for ( 'static' ,   filename = 'style.css' )   }} \n \n \n Besides CSS, other types of static files might be files with JavaScript\nfunctions, or a logo image. They are all placed under the\n flaskr/static  directory and referenced with\n url_for('static',   filename='...') . \n This tutorial isn\u2019t focused on how to write CSS, so you can just copy\nthe following into the  flaskr/static/style.css  file: \n \n flaskr/static/style.css \u00b6 \n html   {   font-family :   sans-serif ;   background :   #eee ;   padding :   1 rem ;   } \n body   {   max-width :   960 px ;   margin :   0   auto ;   background :   white ;   } \n h1   {   font-family :   serif ;   color :   #377ba8 ;   margin :   1 rem   0 ;   } \n a   {   color :   #377ba8 ;   } \n hr   {   border :   none ;   border-top :   1 px   solid   lightgray ;   } \n nav   {   background :   lightgray ;   display :   flex ;   align-items :   center ;   padding :   0   0.5 rem ;   } \n nav   h1   {   flex :   auto ;   margin :   0 ;   } \n nav   h1   a   {   text-decoration :   none ;   padding :   0.25 rem   0.5 rem ;   } \n nav   ul    {   display :   flex ;   list-style :   none ;   margin :   0 ;   padding :   0 ;   } \n nav   ul   li   a ,   nav   ul   li   span ,   header   . action   {   display :   block ;   padding :   0.5 rem ;   } \n . content   {   padding :   0   1 rem   1 rem ;   } \n . content   >   header   {   border-bottom :   1 px   solid   lightgray ;   display :   flex ;   align-items :   flex-end ;   } \n . content   >   header   h1   {   flex :   auto ;   margin :   1 rem   0   0.25 rem   0 ;   } \n . flash   {   margin :   1 em   0 ;   padding :   1 em ;   background :   #cae6f6 ;   border :   1 px   solid   #377ba8 ;   } \n . post   >   header   {   display :   flex ;   align-items :   flex-end ;   font-size :   0.85 em ;   } \n . post   >   header   >   div : first-of-type   {   flex :   auto ;   } \n . post   >   header   h1   {   font-size :   1.5 em ;   margin-bottom :   0 ;   } \n . post   . about   {   color :   slategray ;   font-style :   italic ;   } \n . post   . body   {   white-space :   pre-line ;   } \n . content : last-child   {   margin-bottom :   0 ;   } \n . content   form   {   margin :   1 em   0 ;   display :   flex ;   flex-direction :   column ;   } \n . content   label   {   font-weight :   bold ;   margin-bottom :   0.5 em ;   } \n . content   input ,   . content   textarea   {   margin-bottom :   1 em ;   } \n . content   textarea   {   min-height :   12 em ;   resize :   vertical ;   } \n input . danger   {   color :   #cc2f2e ;   } \n input [ type = submit ]   {   align-self :   start ;   min-width :   10 em ;   } \n \n \n \n You can find a less compact version of  style.css  in the\n example code . \n Go to  http://127.0.0.1:5000/auth/login  and the page should look like the\nscreenshot below. \n \n You can read more about CSS from  Mozilla\u2019s documentation . If\nyou change a static file, refresh the browser page. If the change\ndoesn\u2019t show up, try clearing your browser\u2019s cache. \n Continue to  Blog Blueprint . \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             Navigation \n \n   Overview \n     \n       Tutorial \n         \n           Previous:  Templates \n           Next:  Blog Blueprint \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/deploying/uwsgi/", "text": "\n   \n     \n     \n   \n     uWSGI \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Deployment Options  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n uWSGI \u00b6 \n uWSGI is a deployment option on servers like  nginx ,  lighttpd , and\n cherokee ; see  FastCGI  and  Standalone WSGI Containers \nfor other options.  To use your WSGI application with uWSGI protocol you will\nneed a uWSGI server first. uWSGI is both a protocol and an application server;\nthe application server can serve uWSGI, FastCGI, and HTTP protocols. \n The most popular uWSGI server is  uwsgi , which we will use for this\nguide.  Make sure to have it installed to follow along. \n \n Watch Out \n Please make sure in advance that any  app.run()  calls you might\nhave in your application file are inside an  if   __name__   == \n '__main__':  block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to uWSGI. \n \n \n Starting your app with uwsgi \u00b6 \n uwsgi  is designed to operate on WSGI callables found in python modules. \n Given a flask application in myapp.py, use the following command: \n $ uwsgi -s /tmp/yourapplication.sock --manage-script-name --mount /yourapplication=myapp:app\n \n \n The  --manage-script-name  will move the handling of  SCRIPT_NAME  to uwsgi,\nsince its smarter about that. It is used together with the  --mount  directive\nwhich will make requests to  /yourapplication  be directed to  myapp:app .\nIf your application is accessible at root level, you can use a single  / \ninstead of  /yourapplication .  myapp  refers to the name of the file of\nyour flask application (without extension) or the module which provides  app .\n app  is the callable inside of your application (usually the line reads\n app   =   Flask(__name__) . \n If you want to deploy your flask application inside of a virtual environment,\nyou need to also add  --virtualenv   /path/to/virtual/environment . You might\nalso need to add  --plugin   python  or  --plugin   python3  depending on which\npython version you use for your project. \n \n \n Configuring nginx \u00b6 \n A basic flask nginx configuration looks like this: \n location = /yourapplication { rewrite ^ /yourapplication/; }\nlocation /yourapplication { try_files $uri @yourapplication; }\nlocation @yourapplication {\n  include uwsgi_params;\n  uwsgi_pass unix:/tmp/yourapplication.sock;\n}\n \n \n This configuration binds the application to  /yourapplication .  If you want\nto have it in the URL root its a bit simpler: \n location / { try_files $uri @yourapplication; }\nlocation @yourapplication {\n    include uwsgi_params;\n    uwsgi_pass unix:/tmp/yourapplication.sock;\n}\n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n uWSGI \n Starting your app with uwsgi \n Configuring nginx \n \n \n \n Navigation \n \n   Overview \n     \n       Deployment Options \n         \n           Previous:  Standalone WSGI Containers \n           Next:  mod_wsgi (Apache) \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/deploying/mod_wsgi/", "text": "\n   \n     \n     \n   \n     mod_wsgi (Apache) \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Deployment Options  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n mod_wsgi (Apache) \u00b6 \n If you are using the  Apache  webserver, consider using  mod_wsgi . \n \n Watch Out \n Please make sure in advance that any  app.run()  calls you might\nhave in your application file are inside an  if   __name__   == \n '__main__':  block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to mod_wsgi. \n \n \n Installing  mod_wsgi \u00b6 \n If you don\u2019t have  mod_wsgi  installed yet you have to either install it\nusing a package manager or compile it yourself.  The mod_wsgi\n installation instructions  cover source installations on UNIX systems. \n If you are using Ubuntu/Debian you can apt-get it and activate it as\nfollows: \n # apt-get install libapache2-mod-wsgi\n \n \n If you are using a yum based distribution (Fedora, OpenSUSE, etc..) you\ncan install it as follows: \n # yum install mod_wsgi\n \n \n On FreeBSD install  mod_wsgi  by compiling the  www/mod_wsgi  port or by\nusing pkg_add: \n # pkg install ap22-mod_wsgi2\n \n \n If you are using pkgsrc you can install  mod_wsgi  by compiling the\n www/ap2-wsgi  package. \n If you encounter segfaulting child processes after the first apache\nreload you can safely ignore them.  Just restart the server. \n \n \n Creating a  .wsgi  file \u00b6 \n To run your application you need a  yourapplication.wsgi  file.  This file\ncontains the code  mod_wsgi  is executing on startup to get the application\nobject.  The object called  application  in that file is then used as\napplication. \n For most applications the following file should be sufficient: \n from   yourapplication   import   app   as   application \n \n \n If you don\u2019t have a factory function for application creation but a singleton\ninstance you can directly import that one as  application . \n Store that file somewhere that you will find it again (e.g.:\n /var/www/yourapplication ) and make sure that  yourapplication  and all\nthe libraries that are in use are on the python load path.  If you don\u2019t\nwant to install it system wide consider using a  virtual python \ninstance.  Keep in mind that you will have to actually install your\napplication into the virtualenv as well.  Alternatively there is the\noption to just patch the path in the  .wsgi  file before the import: \n import   sys \n sys . path . insert ( 0 ,   '/path/to/the/application' ) \n \n \n \n \n Configuring Apache \u00b6 \n The last thing you have to do is to create an Apache configuration file\nfor your application.  In this example we are telling  mod_wsgi  to\nexecute the application under a different user for security reasons: \n <VirtualHost   * > \n     ServerName  example.com\n\n     WSGIDaemonProcess  yourapplication  user =user1  group =group1 threads=5\n     WSGIScriptAlias  /  /var/www/yourapplication/yourapplication.wsgi \n\n     <Directory   /var/www/yourapplication > \n         WSGIProcessGroup  yourapplication\n         WSGIApplicationGroup  %{GLOBAL}\n         Order  deny,allow\n         Allow  from  all \n     </Directory> \n </VirtualHost> \n \n \n Note: WSGIDaemonProcess isn\u2019t implemented in Windows and Apache will\nrefuse to run with the above configuration. On a Windows system, eliminate those lines: \n <VirtualHost   * > \n         ServerName  example.com\n         WSGIScriptAlias  / C:\\yourdir\\yourapp.wsgi\n         <Directory   C:\\yourdir > \n                 Order  deny,allow\n                 Allow  from  all \n         </Directory> \n </VirtualHost> \n \n \n Note: There have been some changes in access control configuration for  Apache 2.4 . \n Most notably, the syntax for directory permissions has changed from httpd 2.2 \n Order  allow,deny\n Allow  from  all \n \n \n to httpd 2.4 syntax \n Require   all  granted\n \n \n For more information consult the  mod_wsgi documentation . \n \n \n Troubleshooting \u00b6 \n If your application does not run, follow this guide to troubleshoot: \n \n Problem:  application does not run, errorlog shows SystemExit ignored \n You have an  app.run()  call in your application file that is not\nguarded by an  if   __name__   ==   '__main__':  condition.  Either\nremove that  run()  call from the file and move it\ninto a separate  run.py  file or put it into such an if block. \n Problem:  application gives permission errors \n Probably caused by your application running as the wrong user.  Make\nsure the folders the application needs access to have the proper\nprivileges set and the application runs as the correct user\n( user  and  group  parameter to the  WSGIDaemonProcess \ndirective) \n Problem:  application dies with an error on print \n Keep in mind that mod_wsgi disallows doing anything with\n sys.stdout  and  sys.stderr .  You can disable this\nprotection from the config by setting the  WSGIRestrictStdout  to\n off : \n WSGIRestrictStdout   Off \n \n \n Alternatively you can also replace the standard out in the .wsgi file\nwith a different stream: \n import   sys \n sys . stdout   =   sys . stderr \n \n \n \n Problem:  accessing resources gives IO errors \n Your application probably is a single .py file you symlinked into\nthe site-packages folder.  Please be aware that this does not work,\ninstead you either have to put the folder into the pythonpath the\nfile is stored in, or convert your application into a package. \n The reason for this is that for non-installed packages, the module\nfilename is used to locate the resources and for symlinks the wrong\nfilename is picked up. \n \n \n \n \n Support for Automatic Reloading \u00b6 \n To help deployment tools you can activate support for automatic\nreloading.  Whenever something changes the  .wsgi  file,  mod_wsgi  will\nreload all the daemon processes for us. \n For that, just add the following directive to your  Directory  section: \n WSGIScriptReloading   On \n \n \n \n \n Working with Virtual Environments \u00b6 \n Virtual environments have the advantage that they never install the\nrequired dependencies system wide so you have a better control over what\nis used where.  If you want to use a virtual environment with mod_wsgi\nyou have to modify your  .wsgi  file slightly. \n Add the following lines to the top of your  .wsgi  file: \n activate_this   =   '/path/to/env/bin/activate_this.py' \n execfile ( activate_this ,   dict ( __file__ = activate_this )) \n \n \n For Python 3 add the following lines to the top of your  .wsgi  file: \n activate_this   =   '/path/to/env/bin/activate_this.py' \n with   open ( activate_this )   as   file_ : \n     exec ( file_ . read (),   dict ( __file__ = activate_this )) \n \n \n This sets up the load paths according to the settings of the virtual\nenvironment.  Keep in mind that the path has to be absolute. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n mod_wsgi (Apache) \n Installing  mod_wsgi \n Creating a  .wsgi  file \n Configuring Apache \n Troubleshooting \n Support for Automatic Reloading \n Working with Virtual Environments \n \n \n \n Navigation \n \n   Overview \n     \n       Deployment Options \n         \n           Previous:  uWSGI \n           Next:  FastCGI \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/deploying/cgi/", "text": "\n   \n     \n     \n   \n     CGI \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Deployment Options  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n CGI \u00b6 \n If all other deployment methods do not work, CGI will work for sure.\nCGI is supported by all major servers but usually has a sub-optimal\nperformance. \n This is also the way you can use a Flask application on Google\u2019s  App\nEngine , where execution happens in a CGI-like environment. \n \n Watch Out \n Please make sure in advance that any  app.run()  calls you might\nhave in your application file are inside an  if   __name__   == \n '__main__':  block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to CGI / app engine. \n With CGI, you will also have to make sure that your code does not contain\nany  print  statements, or that  sys.stdout  is overridden by something\nthat doesn\u2019t write into the HTTP response. \n \n \n Creating a  .cgi  file \u00b6 \n First you need to create the CGI application file.  Let\u2019s call it\n yourapplication.cgi : \n #!/usr/bin/python \n from   wsgiref.handlers   import   CGIHandler \n from   yourapplication   import   app \n\n CGIHandler () . run ( app ) \n \n \n \n \n Server Setup \u00b6 \n Usually there are two ways to configure the server.  Either just copy the\n .cgi  into a  cgi-bin  (and use  mod_rewrite  or something similar to\nrewrite the URL) or let the server point to the file directly. \n In Apache for example you can put something like this into the config: \n ScriptAlias   /app   /path/to/the/application.cgi \n \n \n On shared webhosting, though, you might not have access to your Apache config.\nIn this case, a file called  .htaccess , sitting in the public directory you want\nyour app to be available, works too but the  ScriptAlias  directive won\u2019t\nwork in that case: \n RewriteEngine   On \n RewriteCond  %{REQUEST_FILENAME} !-f # Don't interfere with static files\n RewriteRule  ^(.*)$  /path/to/the/application.cgi/ $1 [L]\n \n \n For more information consult the documentation of your webserver. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n CGI \n Creating a  .cgi  file \n Server Setup \n \n \n \n Navigation \n \n   Overview \n     \n       Deployment Options \n         \n           Previous:  FastCGI \n           Next:  Becoming Big \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/api/", "text": "\n   \n     \n     \n   \n     API \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n API \u00b6 \n This part of the documentation covers all the interfaces of Flask.  For\nparts where Flask depends on external libraries, we document the most\nimportant right here and provide links to the canonical documentation. \n \n Application Object \u00b6 \n \n \n class  flask. Flask ( import_name ,  static_url_path=None ,  static_folder='static' ,  static_host=None ,  host_matching=False ,  subdomain_matching=False ,  template_folder='templates' ,  instance_path=None ,  instance_relative_config=False ,  root_path=None ) \u00b6 \n The flask object implements a WSGI application and acts as the central\nobject.  It is passed the name of the module or package of the\napplication.  Once it is created it will act as a central registry for\nthe view functions, the URL rules, template configuration and much more. \n The name of the package is used to resolve resources from inside the\npackage or the folder the module is contained in depending on if the\npackage parameter resolves to an actual python package (a folder with\nan  __init__.py  file inside) or a standard module (just a  .py  file). \n For more information about resource loading, see  open_resource() . \n Usually you create a  Flask  instance in your main module or\nin the  __init__.py  file of your package like this: \n from   flask   import   Flask \n app   =   Flask ( __name__ ) \n \n \n \n About the First Parameter \n The idea of the first parameter is to give Flask an idea of what\nbelongs to your application.  This name is used to find resources\non the filesystem, can be used by extensions to improve debugging\ninformation and a lot more. \n So it\u2019s important what you provide there.  If you are using a single\nmodule,  __name__  is always the correct value.  If you however are\nusing a package, it\u2019s usually recommended to hardcode the name of\nyour package there. \n For example if your application is defined in  yourapplication/app.py \nyou should create it with one of the two versions below: \n app   =   Flask ( 'yourapplication' ) \n app   =   Flask ( __name__ . split ( '.' )[ 0 ]) \n \n \n Why is that?  The application will work even with  __name__ , thanks\nto how resources are looked up.  However it will make debugging more\npainful.  Certain extensions can make assumptions based on the\nimport name of your application.  For example the Flask-SQLAlchemy\nextension will look for the code in your application that triggered\nan SQL query in debug mode.  If the import name is not properly set\nup, that debugging information is lost.  (For example it would only\npick up SQL queries in  yourapplication.app  and not\n yourapplication.views.frontend ) \n \n \n New in version 1.0:  The  host_matching  and  static_host  parameters were added. \n \n \n New in version 1.0:  The  subdomain_matching  parameter was added. Subdomain\nmatching needs to be enabled manually now. Setting\n SERVER_NAME  does not implicitly enable it. \n \n \n Changelog \n New in version 0.11:  The  root_path  parameter was added. \n \n \n New in version 0.8:  The  instance_path  and  instance_relative_config  parameters were\nadded. \n \n \n New in version 0.7:  The  static_url_path ,  static_folder , and  template_folder \nparameters were added. \n \n \n \n \n \n Parameters: \n import_name  \u2013 the name of the application package \n static_url_path  \u2013 can be used to specify a different path for the\nstatic files on the web.  Defaults to the name\nof the  static_folder  folder. \n static_folder  \u2013 the folder with static files that should be served\nat  static_url_path .  Defaults to the  'static' \nfolder in the root path of the application. \n static_host  \u2013 the host to use when adding the static route.\nDefaults to None. Required when using  host_matching=True \nwith a  static_folder  configured. \n host_matching  \u2013 set  url_map.host_matching  attribute.\nDefaults to False. \n subdomain_matching  \u2013 consider the subdomain relative to\n SERVER_NAME  when matching routes. Defaults to False. \n template_folder  \u2013 the folder that contains the templates that should\nbe used by the application.  Defaults to\n 'templates'  folder in the root path of the\napplication. \n instance_path  \u2013 An alternative instance path for the application.\nBy default the folder  'instance'  next to the\npackage or module is assumed to be the instance\npath. \n instance_relative_config  \u2013 if set to  True  relative filenames\nfor loading the config are assumed to\nbe relative to the instance path instead\nof the application root. \n root_path  \u2013 Flask by default will automatically calculate the path\nto the root of the application.  In certain situations\nthis cannot be achieved (for instance if the package\nis a Python 3 namespace package) and needs to be\nmanually defined. \n \n \n \n \n \n \n \n add_template_filter ( f ,  name=None ) \u00b6 \n Register a custom template filter.  Works exactly like the\n template_filter()  decorator. \n \n \n \n \n Parameters: name  \u2013 the optional name of the filter, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n add_template_global ( f ,  name=None ) \u00b6 \n Register a custom template global function. Works exactly like the\n template_global()  decorator. \n \n Changelog \n New in version 0.10. \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the global function, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n add_template_test ( f ,  name=None ) \u00b6 \n Register a custom template test.  Works exactly like the\n template_test()  decorator. \n \n Changelog \n New in version 0.10. \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the test, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n add_url_rule ( rule ,  endpoint=None ,  view_func=None ,  provide_automatic_options=None ,  **options ) \u00b6 \n Connects a URL rule.  Works exactly like the  route() \ndecorator.  If a view_func is provided it will be registered with the\nendpoint. \n Basically this example: \n @app . route ( '/' ) \n def   index (): \n     pass \n \n \n Is equivalent to the following: \n def   index (): \n     pass \n app . add_url_rule ( '/' ,   'index' ,   index ) \n \n \n If the view_func is not provided you will need to connect the endpoint\nto a view function like so: \n app . view_functions [ 'index' ]   =   index \n \n \n Internally  route()  invokes  add_url_rule()  so if you want\nto customize the behavior via subclassing you only need to change\nthis method. \n For more information refer to  URL Route Registrations . \n \n Changelog \n Changed in version 0.6:  OPTIONS  is added automatically as method. \n \n \n Changed in version 0.2:  view_func  parameter added. \n \n \n \n \n \n Parameters: \n rule  \u2013 the URL rule as string \n endpoint  \u2013 the endpoint for the registered URL rule.  Flask\nitself assumes the name of the view function as\nendpoint \n view_func  \u2013 the function to call when serving a request to the\nprovided endpoint \n provide_automatic_options  \u2013 controls whether the  OPTIONS \nmethod should be added automatically. This can also be controlled\nby setting the  view_func.provide_automatic_options   =   False \nbefore adding the rule. \n options  \u2013 the options to be forwarded to the underlying\n Rule  object.  A change\nto Werkzeug is handling of method options.  methods\nis a list of methods this rule should be limited\nto ( GET ,  POST  etc.).  By default a rule\njust listens for  GET  (and implicitly  HEAD ).\nStarting with Flask 0.6,  OPTIONS  is implicitly\nadded and handled by the standard request handling. \n \n \n \n \n \n \n\n \n \n after_request ( f ) \u00b6 \n Register a function to be run after each request. \n Your function must take one parameter, an instance of\n response_class  and return a new response object or the\nsame (see  process_response() ). \n As of Flask 0.7 this function might not be executed at the end of the\nrequest in case an unhandled exception occurred. \n \n\n \n \n after_request_funcs  = None \u00b6 \n A dictionary with lists of functions that should be called after\neach request.  The key of the dictionary is the name of the blueprint\nthis function is active for,  None  for all requests.  This can for\nexample be used to close database connections. To register a function\nhere, use the  after_request()  decorator. \n \n\n \n \n app_context ( ) \u00b6 \n Create an  AppContext . Use as a  with \nblock to push the context, which will make  current_app \npoint at this application. \n An application context is automatically pushed by\n RequestContext.push() \nwhen handling a request, and when running a CLI command. Use\nthis to manually create a context outside of these situations. \n with   app . app_context (): \n     init_db () \n \n \n See  The Application Context . \n \n Changelog \n New in version 0.9. \n \n \n\n \n \n app_ctx_globals_class \u00b6 \n alias of  flask.ctx._AppCtxGlobals \n \n\n \n \n auto_find_instance_path ( ) \u00b6 \n Tries to locate the instance path if it was not provided to the\nconstructor of the application class.  It will basically calculate\nthe path to a folder named  instance  next to your main file or\nthe package. \n \n Changelog \n New in version 0.8. \n \n \n\n \n \n before_first_request ( f ) \u00b6 \n Registers a function to be run before the first request to this\ninstance of the application. \n The function will be called without any arguments and its return\nvalue is ignored. \n \n Changelog \n New in version 0.8. \n \n \n\n \n \n before_first_request_funcs  = None \u00b6 \n A list of functions that will be called at the beginning of the\nfirst request to this instance. To register a function, use the\n before_first_request()  decorator. \n \n Changelog \n New in version 0.8. \n \n \n\n \n \n before_request ( f ) \u00b6 \n Registers a function to run before each request. \n For example, this can be used to open a database connection, or to load\nthe logged in user from the session. \n The function will be called without any arguments. If it returns a\nnon-None value, the value is handled as if it was the return value from\nthe view, and further request handling is stopped. \n \n\n \n \n before_request_funcs  = None \u00b6 \n A dictionary with lists of functions that will be called at the\nbeginning of each request. The key of the dictionary is the name of\nthe blueprint this function is active for, or  None  for all\nrequests. To register a function, use the  before_request() \ndecorator. \n \n\n \n \n blueprints  = None \u00b6 \n all the attached blueprints in a dictionary by name.  Blueprints\ncan be attached multiple times so this dictionary does not tell\nyou how often they got attached. \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n cli  = None \u00b6 \n The click command line context for this application.  Commands\nregistered here show up in the  flask  command once the\napplication has been discovered.  The default commands are\nprovided by Flask itself and can be overridden. \n This is an instance of a  click.Group  object. \n \n\n \n \n config  = None \u00b6 \n The configuration dictionary as  Config .  This behaves\nexactly like a regular dictionary but supports additional methods\nto load a config from files. \n \n\n \n \n config_class \u00b6 \n alias of  flask.config.Config \n \n\n \n \n context_processor ( f ) \u00b6 \n Registers a template context processor function. \n \n\n \n \n create_global_jinja_loader ( ) \u00b6 \n Creates the loader for the Jinja2 environment.  Can be used to\noverride just the loader and keeping the rest unchanged.  It\u2019s\ndiscouraged to override this function.  Instead one should override\nthe  jinja_loader()  function instead. \n The global loader dispatches between the loaders of the application\nand the individual blueprints. \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n create_jinja_environment ( ) \u00b6 \n Creates the Jinja2 environment based on  jinja_options \nand  select_jinja_autoescape() .  Since 0.7 this also adds\nthe Jinja2 globals and filters after initialization.  Override\nthis function to customize the behavior. \n \n Changelog \n Changed in version 0.11:  Environment.auto_reload  set in accordance with\n TEMPLATES_AUTO_RELOAD  configuration option. \n \n \n New in version 0.5. \n \n \n\n \n \n create_url_adapter ( request ) \u00b6 \n Creates a URL adapter for the given request. The URL adapter\nis created at a point where the request context is not yet set\nup so the request is passed explicitly. \n \n Changed in version 1.0:  SERVER_NAME  no longer implicitly enables subdomain\nmatching. Use  subdomain_matching  instead. \n \n \n Changelog \n Changed in version 0.9:  This can now also be called without a request object when the\nURL adapter is created for the application context. \n \n \n New in version 0.6. \n \n \n\n \n \n debug \u00b6 \n Whether debug mode is enabled. When using  flask   run  to start\nthe development server, an interactive debugger will be shown for\nunhandled exceptions, and the server will be reloaded when code\nchanges. This maps to the  DEBUG  config key. This is\nenabled when  env  is  'development'  and is overridden\nby the  FLASK_DEBUG  environment variable. It may not behave as\nexpected if set in code. \n Do not enable debug mode when deploying in production. \n Default:  True  if  env  is  'development' , or\n False  otherwise. \n \n\n \n \n default_config  = {'APPLICATION_ROOT': '/', 'DEBUG': None, 'ENV': None, 'EXPLAIN_TEMPLATE_LOADING': False, 'JSONIFY_MIMETYPE': 'application/json', 'JSONIFY_PRETTYPRINT_REGULAR': False, 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'MAX_CONTENT_LENGTH': None, 'MAX_COOKIE_SIZE': 4093, 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(31), 'PREFERRED_URL_SCHEME': 'http', 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'PROPAGATE_EXCEPTIONS': None, 'SECRET_KEY': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(0, 43200), 'SERVER_NAME': None, 'SESSION_COOKIE_DOMAIN': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_NAME': 'session', 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_SAMESITE': None, 'SESSION_COOKIE_SECURE': False, 'SESSION_REFRESH_EACH_REQUEST': True, 'TEMPLATES_AUTO_RELOAD': None, 'TESTING': False, 'TRAP_BAD_REQUEST_ERRORS': None, 'TRAP_HTTP_EXCEPTIONS': False, 'USE_X_SENDFILE': False} \u00b6 \n Default configuration parameters. \n \n\n \n \n dispatch_request ( ) \u00b6 \n Does the request dispatching.  Matches the URL and returns the\nreturn value of the view or error handler.  This does not have to\nbe a response object.  In order to convert the return value to a\nproper response object, call  make_response() . \n \n Changelog \n Changed in version 0.7:  This no longer does the exception handling, this code was\nmoved to the new  full_dispatch_request() . \n \n \n\n \n \n do_teardown_appcontext ( exc=<object object> ) \u00b6 \n Called right before the application context is popped. \n When handling a request, the application context is popped\nafter the request context. See  do_teardown_request() . \n This calls all functions decorated with\n teardown_appcontext() . Then the\n appcontext_tearing_down  signal is sent. \n This is called by\n AppContext.pop() . \n \n Changelog \n New in version 0.9. \n \n \n\n \n \n do_teardown_request ( exc=<object object> ) \u00b6 \n Called after the request is dispatched and the response is\nreturned, right before the request context is popped. \n This calls all functions decorated with\n teardown_request() , and  Blueprint.teardown_request() \nif a blueprint handled the request. Finally, the\n request_tearing_down  signal is sent. \n This is called by\n RequestContext.pop() ,\nwhich may be delayed during testing to maintain access to\nresources. \n \n \n \n \n Parameters: exc  \u2013 An unhandled exception raised while dispatching the\nrequest. Detected from the current exception information if\nnot passed. Passed to each teardown function. \n \n \n \n \n Changelog \n Changed in version 0.9:  Added the  exc  argument. \n \n \n\n \n \n endpoint ( endpoint ) \u00b6 \n A decorator to register a function as an endpoint.\nExample: \n @app . endpoint ( 'example.endpoint' ) \n def   example (): \n     return   \"example\" \n \n \n \n \n \n \n Parameters: endpoint  \u2013 the name of the endpoint \n \n \n \n \n\n \n \n env \u00b6 \n What environment the app is running in. Flask and extensions may\nenable behaviors based on the environment, such as enabling debug\nmode. This maps to the  ENV  config key. This is set by the\n FLASK_ENV  environment variable and may not behave as\nexpected if set in code. \n Do not enable development when deploying in production. \n Default:  'production' \n \n\n \n \n error_handler_spec  = None \u00b6 \n A dictionary of all registered error handlers.  The key is  None \nfor error handlers active on the application, otherwise the key is\nthe name of the blueprint.  Each key points to another dictionary\nwhere the key is the status code of the http exception.  The\nspecial key  None  points to a list of tuples where the first item\nis the class for the instance check and the second the error handler\nfunction. \n To register an error handler, use the  errorhandler() \ndecorator. \n \n\n \n \n errorhandler ( code_or_exception ) \u00b6 \n Register a function to handle errors by code or exception class. \n A decorator that is used to register a function given an\nerror code.  Example: \n @app . errorhandler ( 404 ) \n def   page_not_found ( error ): \n     return   'This page does not exist' ,   404 \n \n \n You can also register handlers for arbitrary exceptions: \n @app . errorhandler ( DatabaseError ) \n def   special_exception_handler ( error ): \n     return   'Database connection failed' ,   500 \n \n \n \n Changelog \n New in version 0.7:  Use  register_error_handler()  instead of modifying\n error_handler_spec  directly, for application wide error\nhandlers. \n \n \n New in version 0.7:  One can now additionally also register custom exception types\nthat do not necessarily have to be a subclass of the\n HTTPException  class. \n \n \n \n \n \n Parameters: code_or_exception  \u2013 the code as integer for the handler, or\nan arbitrary exception \n \n \n \n \n\n \n \n extensions  = None \u00b6 \n a place where extensions can store application specific state.  For\nexample this is where an extension could store database engines and\nsimilar things.  For backwards compatibility extensions should register\nthemselves like this: \n if   not   hasattr ( app ,   'extensions' ): \n     app . extensions   =   {} \n app . extensions [ 'extensionname' ]   =   SomeObject () \n \n \n The key must match the name of the extension module. For example in\ncase of a \u201cFlask-Foo\u201d extension in  flask_foo , the key would be\n 'foo' . \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n full_dispatch_request ( ) \u00b6 \n Dispatches the request and on top of that performs request\npre and postprocessing as well as HTTP exception catching and\nerror handling. \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n get_send_file_max_age ( filename ) \u00b6 \n Provides default cache_timeout for the  send_file()  functions. \n By default, this function returns  SEND_FILE_MAX_AGE_DEFAULT  from\nthe configuration of  current_app . \n Static file functions such as  send_from_directory()  use this\nfunction, and  send_file()  calls this function on\n current_app  when the given cache_timeout is  None . If a\ncache_timeout is given in  send_file() , that timeout is used;\notherwise, this method is called. \n This allows subclasses to change the behavior when sending files based\non the filename.  For example, to set the cache timeout for .js files\nto 60 seconds: \n class   MyFlask ( flask . Flask ): \n     def   get_send_file_max_age ( self ,   name ): \n         if   name . lower () . endswith ( '.js' ): \n             return   60 \n         return   flask . Flask . get_send_file_max_age ( self ,   name ) \n \n \n \n Changelog \n New in version 0.9. \n \n \n\n \n \n got_first_request \u00b6 \n This attribute is set to  True  if the application started\nhandling the first request. \n \n Changelog \n New in version 0.8. \n \n \n\n \n \n handle_exception ( e ) \u00b6 \n Default exception handling that kicks in when an exception\noccurs that is not caught.  In debug mode the exception will\nbe re-raised immediately, otherwise it is logged and the handler\nfor a 500 internal server error is used.  If no such handler\nexists, a default 500 internal server error message is displayed. \n \n Changelog \n New in version 0.3. \n \n \n\n \n \n handle_http_exception ( e ) \u00b6 \n Handles an HTTP exception.  By default this will invoke the\nregistered error handlers and fall back to returning the\nexception as response. \n \n Changelog \n New in version 0.3. \n \n \n\n \n \n handle_url_build_error ( error ,  endpoint ,  values ) \u00b6 \n Handle  BuildError  on  url_for() . \n \n\n \n \n handle_user_exception ( e ) \u00b6 \n This method is called whenever an exception occurs that should be\nhandled.  A special case are\n HTTPException s which are forwarded by\nthis function to the  handle_http_exception()  method.  This\nfunction will either return a response value or reraise the\nexception with the same traceback. \n \n Changed in version 1.0:  Key errors raised from request data like  form  show the the bad\nkey in debug mode rather than a generic bad request message. \n \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n has_static_folder \u00b6 \n This is  True  if the package bound object\u2019s container has a\nfolder for static files. \n \n Changelog \n New in version 0.5. \n \n \n\n \n \n import_name  = None \u00b6 \n The name of the package or module that this app belongs to. Do not\nchange this once it is set by the constructor. \n \n\n \n \n inject_url_defaults ( endpoint ,  values ) \u00b6 \n Injects the URL defaults for the given endpoint directly into\nthe values dictionary passed.  This is used internally and\nautomatically called on URL building. \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n instance_path  = None \u00b6 \n Holds the path to the instance folder. \n \n Changelog \n New in version 0.8. \n \n \n\n \n \n iter_blueprints ( ) \u00b6 \n Iterates over all blueprints by the order they were registered. \n \n Changelog \n New in version 0.11. \n \n \n\n \n \n jinja_env \u00b6 \n The Jinja2 environment used to load templates. \n \n\n \n \n jinja_environment \u00b6 \n alias of  flask.templating.Environment \n \n\n \n \n jinja_loader \u00b6 \n The Jinja loader for this package bound object. \n \n Changelog \n New in version 0.5. \n \n \n\n \n \n jinja_options  = {'extensions': ['jinja2.ext.autoescape', 'jinja2.ext.with_']} \u00b6 \n Options that are passed directly to the Jinja2 environment. \n \n\n \n \n json_decoder \u00b6 \n alias of  flask.json.JSONDecoder \n \n\n \n \n json_encoder \u00b6 \n alias of  flask.json.JSONEncoder \n \n\n \n \n log_exception ( exc_info ) \u00b6 \n Logs an exception.  This is called by  handle_exception() \nif debugging is disabled and right before the handler is called.\nThe default implementation logs the exception as error on the\n logger . \n \n Changelog \n New in version 0.8. \n \n \n\n \n \n logger \u00b6 \n The  'flask.app'  logger, a standard Python\n Logger . \n In debug mode, the logger\u2019s  level  will be set\nto  DEBUG . \n If there are no handlers configured, a default handler will be added.\nSee  Logging  for more information. \n \n Changed in version 1.0:  Behavior was simplified. The logger is always named\n flask.app . The level is only set during configuration, it\ndoesn\u2019t check  app.debug  each time. Only one format is used,\nnot different ones depending on  app.debug . No handlers are\nremoved, and a handler is only added if no handlers are already\nconfigured. \n \n \n Changelog \n New in version 0.3. \n \n \n\n \n \n make_config ( instance_relative=False ) \u00b6 \n Used to create the config attribute by the Flask constructor.\nThe  instance_relative  parameter is passed in from the constructor\nof Flask (there named  instance_relative_config ) and indicates if\nthe config should be relative to the instance path or the root path\nof the application. \n \n Changelog \n New in version 0.8. \n \n \n\n \n \n make_default_options_response ( ) \u00b6 \n This method is called to create the default  OPTIONS  response.\nThis can be changed through subclassing to change the default\nbehavior of  OPTIONS  responses. \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n make_null_session ( ) \u00b6 \n Creates a new instance of a missing session.  Instead of overriding\nthis method we recommend replacing the  session_interface . \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n make_response ( rv ) \u00b6 \n Convert the return value from a view function to an instance of\n response_class . \n \n \n \n \n Parameters: rv  \u2013  the return value from the view function. The view function\nmust return a response. Returning  None , or the view ending\nwithout returning, is not allowed. The following types are allowed\nfor  view_rv : \n \n str  ( unicode  in Python 2) \n A response object is created with the string encoded to UTF-8\nas the body. \n bytes  ( str  in Python 2) \n A response object is created with the bytes as the body. \n tuple \n Either  (body,   status,   headers) ,  (body,   status) , or\n (body,   headers) , where  body  is any of the other types\nallowed here,  status  is a string or an integer, and\n headers  is a dictionary or a list of  (key,   value) \ntuples. If  body  is a  response_class  instance,\n status  overwrites the exiting value and  headers  are\nextended. \n response_class \n The object is returned unchanged. \n other  Response  class \n The object is coerced to  response_class . \n callable() \n The function is called as a WSGI application. The result is\nused to create a response object. \n \n \n \n \n \n \n Changelog \n Changed in version 0.9:  Previously a tuple was interpreted as the arguments for the\nresponse object. \n \n \n\n \n \n make_shell_context ( ) \u00b6 \n Returns the shell context for an interactive shell for this\napplication.  This runs all the registered shell context\nprocessors. \n \n Changelog \n New in version 0.11. \n \n \n\n \n \n name \u00b6 \n The name of the application.  This is usually the import name\nwith the difference that it\u2019s guessed from the run file if the\nimport name is main.  This name is used as a display name when\nFlask needs the name of the application.  It can be set and overridden\nto change the value. \n \n Changelog \n New in version 0.8. \n \n \n\n \n \n open_instance_resource ( resource ,  mode='rb' ) \u00b6 \n Opens a resource from the application\u2019s instance folder\n( instance_path ).  Otherwise works like\n open_resource() .  Instance resources can also be opened for\nwriting. \n \n \n \n \n Parameters: \n resource  \u2013 the name of the resource.  To access resources within\nsubfolders use forward slashes as separator. \n mode  \u2013 resource file opening mode, default is \u2018rb\u2019. \n \n \n \n \n \n \n\n \n \n open_resource ( resource ,  mode='rb' ) \u00b6 \n Opens a resource from the application\u2019s resource folder.  To see\nhow this works, consider the following folder structure: \n / myapplication . py \n / schema . sql \n / static \n     / style . css \n / templates \n     / layout . html \n     / index . html \n \n \n If you want to open the  schema.sql  file you would do the\nfollowing: \n with   app . open_resource ( 'schema.sql' )   as   f : \n     contents   =   f . read () \n     do_something_with ( contents ) \n \n \n \n \n \n \n Parameters: \n resource  \u2013 the name of the resource.  To access resources within\nsubfolders use forward slashes as separator. \n mode  \u2013 resource file opening mode, default is \u2018rb\u2019. \n \n \n \n \n \n \n\n \n \n open_session ( request ) \u00b6 \n Creates or opens a new session.  Default implementation stores all\nsession data in a signed cookie.  This requires that the\n secret_key  is set.  Instead of overriding this method\nwe recommend replacing the  session_interface . \n \n \n \n \n Parameters: request  \u2013 an instance of  request_class . \n \n \n \n \n\n \n \n permanent_session_lifetime \u00b6 \n A  timedelta  which is used to set the expiration\ndate of a permanent session.  The default is 31 days which makes a\npermanent session survive for roughly one month. \n This attribute can also be configured from the config with the\n PERMANENT_SESSION_LIFETIME  configuration key.  Defaults to\n timedelta(days=31) \n \n\n \n \n preprocess_request ( ) \u00b6 \n Called before the request is dispatched. Calls\n url_value_preprocessors  registered with the app and the\ncurrent blueprint (if any). Then calls  before_request_funcs \nregistered with the app and the blueprint. \n If any  before_request()  handler returns a non-None value, the\nvalue is handled as if it was the return value from the view, and\nfurther request handling is stopped. \n \n\n \n \n preserve_context_on_exception \u00b6 \n Returns the value of the  PRESERVE_CONTEXT_ON_EXCEPTION \nconfiguration value in case it\u2019s set, otherwise a sensible default\nis returned. \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n process_response ( response ) \u00b6 \n Can be overridden in order to modify the response object\nbefore it\u2019s sent to the WSGI server.  By default this will\ncall all the  after_request()  decorated functions. \n \n Changelog \n Changed in version 0.5:  As of Flask 0.5 the functions registered for after request\nexecution are called in reverse order of registration. \n \n \n \n \n \n Parameters: response  \u2013 a  response_class  object. \n \n Returns: a new response object or the same, has to be an\ninstance of  response_class . \n \n \n \n \n\n \n \n propagate_exceptions \u00b6 \n Returns the value of the  PROPAGATE_EXCEPTIONS  configuration\nvalue in case it\u2019s set, otherwise a sensible default is returned. \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n register_blueprint ( blueprint ,  **options ) \u00b6 \n Register a  Blueprint  on the application. Keyword\narguments passed to this method will override the defaults set on the\nblueprint. \n Calls the blueprint\u2019s  register()  method after\nrecording the blueprint in the application\u2019s  blueprints . \n \n \n \n \n Parameters: \n blueprint  \u2013 The blueprint to register. \n url_prefix  \u2013 Blueprint routes will be prefixed with this. \n subdomain  \u2013 Blueprint routes will match on this subdomain. \n url_defaults  \u2013 Blueprint routes will use these default values for\nview arguments. \n options  \u2013 Additional keyword arguments are passed to\n BlueprintSetupState . They can be\naccessed in  record()  callbacks. \n \n \n \n \n \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n register_error_handler ( code_or_exception ,  f ) \u00b6 \n Alternative error attach function to the  errorhandler() \ndecorator that is more straightforward to use for non decorator\nusage. \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n request_class \u00b6 \n alias of  flask.wrappers.Request \n \n\n \n \n request_context ( environ ) \u00b6 \n Create a  RequestContext  representing a\nWSGI environment. Use a  with  block to push the context,\nwhich will make  request  point at this request. \n See  The Request Context . \n Typically you should not call this from your own code. A request\ncontext is automatically pushed by the  wsgi_app()  when\nhandling a request. Use  test_request_context()  to create\nan environment and context instead of this method. \n \n \n \n \n Parameters: environ  \u2013 a WSGI environment \n \n \n \n \n\n \n \n response_class \u00b6 \n alias of  flask.wrappers.Response \n \n\n \n \n root_path  = None \u00b6 \n Absolute path to the package on the filesystem. Used to look up\nresources contained in the package. \n \n\n \n \n route ( rule ,  **options ) \u00b6 \n A decorator that is used to register a view function for a\ngiven URL rule.  This does the same thing as  add_url_rule() \nbut is intended for decorator usage: \n @app . route ( '/' ) \n def   index (): \n     return   'Hello World' \n \n \n For more information refer to  URL Route Registrations . \n \n \n \n \n Parameters: \n rule  \u2013 the URL rule as string \n endpoint  \u2013 the endpoint for the registered URL rule.  Flask\nitself assumes the name of the view function as\nendpoint \n options  \u2013 the options to be forwarded to the underlying\n Rule  object.  A change\nto Werkzeug is handling of method options.  methods\nis a list of methods this rule should be limited\nto ( GET ,  POST  etc.).  By default a rule\njust listens for  GET  (and implicitly  HEAD ).\nStarting with Flask 0.6,  OPTIONS  is implicitly\nadded and handled by the standard request handling. \n \n \n \n \n \n \n\n \n \n run ( host=None ,  port=None ,  debug=None ,  load_dotenv=True ,  **options ) \u00b6 \n Runs the application on a local development server. \n Do not use  run()  in a production setting. It is not intended to\nmeet security and performance requirements for a production server.\nInstead, see  Deployment Options  for WSGI server recommendations. \n If the  debug  flag is set the server will automatically reload\nfor code changes and show a debugger in case an exception happened. \n If you want to run the application in debug mode, but disable the\ncode execution on the interactive debugger, you can pass\n use_evalex=False  as parameter.  This will keep the debugger\u2019s\ntraceback screen active, but disable code execution. \n It is not recommended to use this function for development with\nautomatic reloading as this is badly supported.  Instead you should\nbe using the  flask  command line script\u2019s  run  support. \n \n Keep in Mind \n Flask will suppress any server error with a generic error page\nunless it is in debug mode.  As such to enable just the\ninteractive debugger without the code reloading, you have to\ninvoke  run()  with  debug=True  and  use_reloader=False .\nSetting  use_debugger  to  True  without being in debug mode\nwon\u2019t catch any exceptions because there won\u2019t be any to\ncatch. \n \n \n \n \n \n Parameters: \n host  \u2013 the hostname to listen on. Set this to  '0.0.0.0'  to\nhave the server available externally as well. Defaults to\n '127.0.0.1'  or the host in the  SERVER_NAME  config variable\nif present. \n port  \u2013 the port of the webserver. Defaults to  5000  or the\nport defined in the  SERVER_NAME  config variable if present. \n debug  \u2013 if given, enable or disable debug mode. See\n debug . \n load_dotenv  \u2013 Load the nearest  .env  and  .flaskenv \nfiles to set environment variables. Will also change the working\ndirectory to the directory containing the first file found. \n options  \u2013 the options to be forwarded to the underlying Werkzeug\nserver. See  werkzeug.serving.run_simple()  for more\ninformation. \n \n \n \n \n \n \n Changed in version 1.0:  If installed, python-dotenv will be used to load environment\nvariables from  .env  and  .flaskenv  files. \n If set, the  FLASK_ENV  and  FLASK_DEBUG \nenvironment variables will override  env  and\n debug . \n Threaded mode is enabled by default. \n \n \n Changelog \n Changed in version 0.10:  The default port is now picked from the  SERVER_NAME \nvariable. \n \n \n\n \n \n save_session ( session ,  response ) \u00b6 \n Saves the session if it needs updates.  For the default\nimplementation, check  open_session() .  Instead of overriding this\nmethod we recommend replacing the  session_interface . \n \n \n \n \n Parameters: \n session  \u2013 the session to be saved (a\n SecureCookie \nobject) \n response  \u2013 an instance of  response_class \n \n \n \n \n \n \n\n \n \n secret_key \u00b6 \n If a secret key is set, cryptographic components can use this to\nsign cookies and other things. Set this to a complex random value\nwhen you want to use the secure cookie for instance. \n This attribute can also be configured from the config with the\n SECRET_KEY  configuration key. Defaults to  None . \n \n\n \n \n select_jinja_autoescape ( filename ) \u00b6 \n Returns  True  if autoescaping should be active for the given\ntemplate name. If no template name is given, returns  True . \n \n Changelog \n New in version 0.5. \n \n \n\n \n \n send_file_max_age_default \u00b6 \n A  timedelta  which is used as default cache_timeout\nfor the  send_file()  functions. The default is 12 hours. \n This attribute can also be configured from the config with the\n SEND_FILE_MAX_AGE_DEFAULT  configuration key. This configuration\nvariable can also be set with an integer value used as seconds.\nDefaults to  timedelta(hours=12) \n \n\n \n \n send_static_file ( filename ) \u00b6 \n Function used internally to send static files from the static\nfolder to the browser. \n \n Changelog \n New in version 0.5. \n \n \n\n \n \n session_cookie_name \u00b6 \n The secure cookie uses this for the name of the session cookie. \n This attribute can also be configured from the config with the\n SESSION_COOKIE_NAME  configuration key.  Defaults to  'session' \n \n\n \n \n session_interface  = <flask.sessions.SecureCookieSessionInterface object> \u00b6 \n the session interface to use.  By default an instance of\n SecureCookieSessionInterface  is used here. \n \n Changelog \n New in version 0.8. \n \n \n\n \n \n shell_context_processor ( f ) \u00b6 \n Registers a shell context processor function. \n \n Changelog \n New in version 0.11. \n \n \n\n \n \n shell_context_processors  = None \u00b6 \n A list of shell context processor functions that should be run\nwhen a shell context is created. \n \n Changelog \n New in version 0.11. \n \n \n\n \n \n should_ignore_error ( error ) \u00b6 \n This is called to figure out if an error should be ignored\nor not as far as the teardown system is concerned.  If this\nfunction returns  True  then the teardown handlers will not be\npassed the error. \n \n Changelog \n New in version 0.10. \n \n \n\n \n \n static_folder \u00b6 \n The absolute path to the configured static folder. \n \n\n \n \n static_url_path \u00b6 \n The URL prefix that the static route will be registered for. \n \n\n \n \n teardown_appcontext ( f ) \u00b6 \n Registers a function to be called when the application context\nends.  These functions are typically also called when the request\ncontext is popped. \n Example: \n ctx   =   app . app_context () \n ctx . push () \n ... \n ctx . pop () \n \n \n When  ctx.pop()  is executed in the above example, the teardown\nfunctions are called just before the app context moves from the\nstack of active contexts.  This becomes relevant if you are using\nsuch constructs in tests. \n Since a request context typically also manages an application\ncontext it would also be called when you pop a request context. \n When a teardown function was called because of an unhandled exception\nit will be passed an error object. If an  errorhandler()  is\nregistered, it will handle the exception and the teardown will not\nreceive it. \n The return values of teardown functions are ignored. \n \n Changelog \n New in version 0.9. \n \n \n\n \n \n teardown_appcontext_funcs  = None \u00b6 \n A list of functions that are called when the application context\nis destroyed.  Since the application context is also torn down\nif the request ends this is the place to store code that disconnects\nfrom databases. \n \n Changelog \n New in version 0.9. \n \n \n\n \n \n teardown_request ( f ) \u00b6 \n Register a function to be run at the end of each request,\nregardless of whether there was an exception or not.  These functions\nare executed when the request context is popped, even if not an\nactual request was performed. \n Example: \n ctx   =   app . test_request_context () \n ctx . push () \n ... \n ctx . pop () \n \n \n When  ctx.pop()  is executed in the above example, the teardown\nfunctions are called just before the request context moves from the\nstack of active contexts.  This becomes relevant if you are using\nsuch constructs in tests. \n Generally teardown functions must take every necessary step to avoid\nthat they will fail.  If they do execute code that might fail they\nwill have to surround the execution of these code by try/except\nstatements and log occurring errors. \n When a teardown function was called because of an exception it will\nbe passed an error object. \n The return values of teardown functions are ignored. \n \n Debug Note \n In debug mode Flask will not tear down a request on an exception\nimmediately.  Instead it will keep it alive so that the interactive\ndebugger can still access it.  This behavior can be controlled\nby the  PRESERVE_CONTEXT_ON_EXCEPTION  configuration variable. \n \n \n\n \n \n teardown_request_funcs  = None \u00b6 \n A dictionary with lists of functions that are called after\neach request, even if an exception has occurred. The key of the\ndictionary is the name of the blueprint this function is active for,\n None  for all requests. These functions are not allowed to modify\nthe request, and their return values are ignored. If an exception\noccurred while processing the request, it gets passed to each\nteardown_request function. To register a function here, use the\n teardown_request()  decorator. \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n template_context_processors  = None \u00b6 \n A dictionary with list of functions that are called without argument\nto populate the template context.  The key of the dictionary is the\nname of the blueprint this function is active for,  None  for all\nrequests.  Each returns a dictionary that the template context is\nupdated with.  To register a function here, use the\n context_processor()  decorator. \n \n\n \n \n template_filter ( name=None ) \u00b6 \n A decorator that is used to register custom template filter.\nYou can specify a name for the filter, otherwise the function\nname will be used. Example: \n @app . template_filter () \n def   reverse ( s ): \n     return   s [:: - 1 ] \n \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the filter, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n template_folder  = None \u00b6 \n Location of the template files to be added to the template lookup.\n None  if templates should not be added. \n \n\n \n \n template_global ( name=None ) \u00b6 \n A decorator that is used to register a custom template global function.\nYou can specify a name for the global function, otherwise the function\nname will be used. Example: \n @app . template_global () \n def   double ( n ): \n     return   2   *   n \n \n \n \n Changelog \n New in version 0.10. \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the global function, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n template_test ( name=None ) \u00b6 \n A decorator that is used to register custom template test.\nYou can specify a name for the test, otherwise the function\nname will be used. Example: \n @app . template_test () \n def   is_prime ( n ): \n     if   n   ==   2 : \n         return   True \n     for   i   in   range ( 2 ,   int ( math . ceil ( math . sqrt ( n )))   +   1 ): \n         if   n   %   i   ==   0 : \n             return   False \n     return   True \n \n \n \n Changelog \n New in version 0.10. \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the test, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n templates_auto_reload \u00b6 \n Reload templates when they are changed. Used by\n create_jinja_environment() . \n This attribute can be configured with  TEMPLATES_AUTO_RELOAD . If\nnot set, it will be enabled in debug mode. \n \n New in version 1.0:  This property was added but the underlying config and behavior\nalready existed. \n \n \n Changelog \n\n \n \n test_cli_runner ( **kwargs ) \u00b6 \n Create a CLI runner for testing CLI commands.\nSee  Testing CLI Commands . \n Returns an instance of  test_cli_runner_class , by default\n FlaskCliRunner . The Flask app object is\npassed as the first argument. \n \n New in version 1.0. \n \n \n Changelog \n\n \n \n test_cli_runner_class  = None \u00b6 \n The  CliRunner  subclass, by default\n FlaskCliRunner  that is used by\n test_cli_runner() . Its  __init__  method should take a\nFlask app object as the first argument. \n \n New in version 1.0. \n \n \n Changelog \n\n \n \n test_client ( use_cookies=True ,  **kwargs ) \u00b6 \n Creates a test client for this application.  For information\nabout unit testing head over to  Testing Flask Applications . \n Note that if you are testing for assertions or exceptions in your\napplication code, you must set  app.testing   =   True  in order for the\nexceptions to propagate to the test client.  Otherwise, the exception\nwill be handled by the application (not visible to the test client) and\nthe only indication of an AssertionError or other exception will be a\n500 status code response to the test client.  See the  testing \nattribute.  For example: \n app . testing   =   True \n client   =   app . test_client () \n \n \n The test client can be used in a  with  block to defer the closing down\nof the context until the end of the  with  block.  This is useful if\nyou want to access the context locals for testing: \n with   app . test_client ()   as   c : \n     rv   =   c . get ( '/?vodka=42' ) \n     assert   request . args [ 'vodka' ]   ==   '42' \n \n \n Additionally, you may pass optional keyword arguments that will then\nbe passed to the application\u2019s  test_client_class  constructor.\nFor example: \n from   flask.testing   import   FlaskClient \n\n class   CustomClient ( FlaskClient ): \n     def   __init__ ( self ,   * args ,   ** kwargs ): \n         self . _authentication   =   kwargs . pop ( \"authentication\" ) \n         super ( CustomClient , self ) . __init__ (   * args ,   ** kwargs ) \n\n app . test_client_class   =   CustomClient \n client   =   app . test_client ( authentication = 'Basic ....' ) \n \n \n See  FlaskClient  for more information. \n \n Changelog \n Changed in version 0.11:  Added  **kwargs  to support passing additional keyword arguments to\nthe constructor of  test_client_class . \n \n \n New in version 0.7:  The  use_cookies  parameter was added as well as the ability\nto override the client to be used by setting the\n test_client_class  attribute. \n \n \n Changed in version 0.4:  added support for  with  block usage for the client. \n \n \n\n \n \n test_client_class  = None \u00b6 \n the test client that is used with when  test_client  is used. \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n test_request_context ( *args ,  **kwargs ) \u00b6 \n Create a  RequestContext  for a WSGI\nenvironment created from the given values. This is mostly useful\nduring testing, where you may want to run a function that uses\nrequest data without dispatching a full request. \n See  The Request Context . \n Use a  with  block to push the context, which will make\n request  point at the request for the created\nenvironment. \n with   test_request_context ( ... ): \n     generate_report () \n \n \n When using the shell, it may be easier to push and pop the\ncontext manually to avoid indentation. \n ctx   =   app . test_request_context ( ... ) \n ctx . push () \n ... \n ctx . pop () \n \n \n Takes the same arguments as Werkzeug\u2019s\n EnvironBuilder , with some defaults from\nthe application. See the linked Werkzeug docs for most of the\navailable arguments. Flask-specific behavior is listed here. \n \n \n \n \n Parameters: \n path  \u2013 URL path being requested. \n base_url  \u2013 Base URL where the app is being served, which\n path  is relative to. If not given, built from\n PREFERRED_URL_SCHEME ,  subdomain ,\n SERVER_NAME , and  APPLICATION_ROOT . \n subdomain  \u2013 Subdomain name to append to\n SERVER_NAME . \n url_scheme  \u2013 Scheme to use instead of\n PREFERRED_URL_SCHEME . \n data  \u2013 The request body, either as a string or a dict of\nform keys and values. \n json  \u2013 If given, this is serialized as JSON and passed as\n data . Also defaults  content_type  to\n application/json . \n args  \u2013 other positional arguments passed to\n EnvironBuilder . \n kwargs  \u2013 other keyword arguments passed to\n EnvironBuilder . \n \n \n \n \n \n \n\n \n \n testing \u00b6 \n The testing flag.  Set this to  True  to enable the test mode of\nFlask extensions (and in the future probably also Flask itself).\nFor example this might activate test helpers that have an\nadditional runtime cost which should not be enabled by default. \n If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the\ndefault it\u2019s implicitly enabled. \n This attribute can also be configured from the config with the\n TESTING  configuration key.  Defaults to  False . \n \n\n \n \n trap_http_exception ( e ) \u00b6 \n Checks if an HTTP exception should be trapped or not.  By default\nthis will return  False  for all exceptions except for a bad request\nkey error if  TRAP_BAD_REQUEST_ERRORS  is set to  True .  It\nalso returns  True  if  TRAP_HTTP_EXCEPTIONS  is set to  True . \n This is called for all HTTP exceptions raised by a view function.\nIf it returns  True  for any exception the error handler for this\nexception is not called and it shows up as regular exception in the\ntraceback.  This is helpful for debugging implicitly raised HTTP\nexceptions. \n \n Changed in version 1.0:  Bad request errors are not trapped by default in debug mode. \n \n \n Changelog \n New in version 0.8. \n \n \n\n \n \n update_template_context ( context ) \u00b6 \n Update the template context with some commonly used variables.\nThis injects request, session, config and g into the template\ncontext as well as everything template context processors want\nto inject.  Note that the as of Flask 0.6, the original values\nin the context will not be overridden if a context processor\ndecides to return a value with the same key. \n \n \n \n \n Parameters: context  \u2013 the context as a dictionary that is updated in place\nto add extra variables. \n \n \n \n \n\n \n \n url_build_error_handlers  = None \u00b6 \n A list of functions that are called when  url_for()  raises a\n BuildError .  Each function registered here\nis called with  error ,  endpoint  and  values .  If a function\nreturns  None  or raises a  BuildError  the next function is\ntried. \n \n Changelog \n New in version 0.9. \n \n \n\n \n \n url_default_functions  = None \u00b6 \n A dictionary with lists of functions that can be used as URL value\npreprocessors.  The key  None  here is used for application wide\ncallbacks, otherwise the key is the name of the blueprint.\nEach of these functions has the chance to modify the dictionary\nof URL values before they are used as the keyword arguments of the\nview function.  For each function registered this one should also\nprovide a  url_defaults()  function that adds the parameters\nautomatically again that were removed that way. \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n url_defaults ( f ) \u00b6 \n Callback function for URL defaults for all view functions of the\napplication.  It\u2019s called with the endpoint and values and should\nupdate the values passed in place. \n \n\n \n \n url_map  = None \u00b6 \n The  Map  for this instance.  You can use\nthis to change the routing converters after the class was created\nbut before any routes are connected.  Example: \n from   werkzeug.routing   import   BaseConverter \n\n class   ListConverter ( BaseConverter ): \n     def   to_python ( self ,   value ): \n         return   value . split ( ',' ) \n     def   to_url ( self ,   values ): \n         return   ',' . join ( super ( ListConverter ,   self ) . to_url ( value ) \n                         for   value   in   values ) \n\n app   =   Flask ( __name__ ) \n app . url_map . converters [ 'list' ]   =   ListConverter \n \n \n \n\n \n \n url_rule_class \u00b6 \n alias of  werkzeug.routing.Rule \n \n\n \n \n url_value_preprocessor ( f ) \u00b6 \n Register a URL value preprocessor function for all view\nfunctions in the application. These functions will be called before the\n before_request()  functions. \n The function can modify the values captured from the matched url before\nthey are passed to the view. For example, this can be used to pop a\ncommon language code value and place it in  g  rather than pass it to\nevery view. \n The function is passed the endpoint name and values dict. The return\nvalue is ignored. \n \n\n \n \n url_value_preprocessors  = None \u00b6 \n A dictionary with lists of functions that are called before the\n before_request_funcs  functions. The key of the dictionary is\nthe name of the blueprint this function is active for, or  None \nfor all requests. To register a function, use\n url_value_preprocessor() . \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n use_x_sendfile \u00b6 \n Enable this if you want to use the X-Sendfile feature.  Keep in\nmind that the server has to support this.  This only affects files\nsent with the  send_file()  method. \n \n Changelog \n New in version 0.2. \n \n This attribute can also be configured from the config with the\n USE_X_SENDFILE  configuration key.  Defaults to  False . \n \n\n \n \n view_functions  = None \u00b6 \n A dictionary of all view functions registered.  The keys will\nbe function names which are also used to generate URLs and\nthe values are the function objects themselves.\nTo register a view function, use the  route()  decorator. \n \n\n \n \n wsgi_app ( environ ,  start_response ) \u00b6 \n The actual WSGI application. This is not implemented in\n __call__()  so that middlewares can be applied without\nlosing a reference to the app object. Instead of doing this: \n app   =   MyMiddleware ( app ) \n \n \n It\u2019s a better idea to do this instead: \n app . wsgi_app   =   MyMiddleware ( app . wsgi_app ) \n \n \n Then you still have the original application object around and\ncan continue to call methods on it. \n \n Changelog \n Changed in version 0.7:  Teardown events for the request and app contexts are called\neven if an unhandled error occurs. Other events may not be\ncalled depending on when an error occurs during dispatch.\nSee  Callbacks and Errors . \n \n \n \n \n \n Parameters: \n environ  \u2013 A WSGI environment. \n start_response  \u2013 A callable accepting a status code,\na list of headers, and an optional exception context to\nstart the response. \n \n \n \n \n \n \n\n \n\n \n \n Blueprint Objects \u00b6 \n \n \n class  flask. Blueprint ( name ,  import_name ,  static_folder=None ,  static_url_path=None ,  template_folder=None ,  url_prefix=None ,  subdomain=None ,  url_defaults=None ,  root_path=None ) \u00b6 \n Represents a blueprint.  A blueprint is an object that records\nfunctions that will be called with the\n BlueprintSetupState  later to register functions\nor other things on the main application.  See  Modular Applications with Blueprints  for more\ninformation. \n \n Changelog \n New in version 0.7. \n \n \n \n add_app_template_filter ( f ,  name=None ) \u00b6 \n Register a custom template filter, available application wide.  Like\n Flask.add_template_filter()  but for a blueprint.  Works exactly\nlike the  app_template_filter()  decorator. \n \n \n \n \n Parameters: name  \u2013 the optional name of the filter, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n add_app_template_global ( f ,  name=None ) \u00b6 \n Register a custom template global, available application wide.  Like\n Flask.add_template_global()  but for a blueprint.  Works exactly\nlike the  app_template_global()  decorator. \n \n Changelog \n New in version 0.10. \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the global, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n add_app_template_test ( f ,  name=None ) \u00b6 \n Register a custom template test, available application wide.  Like\n Flask.add_template_test()  but for a blueprint.  Works exactly\nlike the  app_template_test()  decorator. \n \n Changelog \n New in version 0.10. \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the test, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n add_url_rule ( rule ,  endpoint=None ,  view_func=None ,  **options ) \u00b6 \n Like  Flask.add_url_rule()  but for a blueprint.  The endpoint for\nthe  url_for()  function is prefixed with the name of the blueprint. \n \n\n \n \n after_app_request ( f ) \u00b6 \n Like  Flask.after_request()  but for a blueprint.  Such a function\nis executed after each request, even if outside of the blueprint. \n \n\n \n \n after_request ( f ) \u00b6 \n Like  Flask.after_request()  but for a blueprint.  This function\nis only executed after each request that is handled by a function of\nthat blueprint. \n \n\n \n \n app_context_processor ( f ) \u00b6 \n Like  Flask.context_processor()  but for a blueprint.  Such a\nfunction is executed each request, even if outside of the blueprint. \n \n\n \n \n app_errorhandler ( code ) \u00b6 \n Like  Flask.errorhandler()  but for a blueprint.  This\nhandler is used for all requests, even if outside of the blueprint. \n \n\n \n \n app_template_filter ( name=None ) \u00b6 \n Register a custom template filter, available application wide.  Like\n Flask.template_filter()  but for a blueprint. \n \n \n \n \n Parameters: name  \u2013 the optional name of the filter, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n app_template_global ( name=None ) \u00b6 \n Register a custom template global, available application wide.  Like\n Flask.template_global()  but for a blueprint. \n \n Changelog \n New in version 0.10. \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the global, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n app_template_test ( name=None ) \u00b6 \n Register a custom template test, available application wide.  Like\n Flask.template_test()  but for a blueprint. \n \n Changelog \n New in version 0.10. \n \n \n \n \n \n Parameters: name  \u2013 the optional name of the test, otherwise the\nfunction name will be used. \n \n \n \n \n\n \n \n app_url_defaults ( f ) \u00b6 \n Same as  url_defaults()  but application wide. \n \n\n \n \n app_url_value_preprocessor ( f ) \u00b6 \n Same as  url_value_preprocessor()  but application wide. \n \n\n \n \n before_app_first_request ( f ) \u00b6 \n Like  Flask.before_first_request() .  Such a function is\nexecuted before the first request to the application. \n \n\n \n \n before_app_request ( f ) \u00b6 \n Like  Flask.before_request() .  Such a function is executed\nbefore each request, even if outside of a blueprint. \n \n\n \n \n before_request ( f ) \u00b6 \n Like  Flask.before_request()  but for a blueprint.  This function\nis only executed before each request that is handled by a function of\nthat blueprint. \n \n\n \n \n context_processor ( f ) \u00b6 \n Like  Flask.context_processor()  but for a blueprint.  This\nfunction is only executed for requests handled by a blueprint. \n \n\n \n \n endpoint ( endpoint ) \u00b6 \n Like  Flask.endpoint()  but for a blueprint.  This does not\nprefix the endpoint with the blueprint name, this has to be done\nexplicitly by the user of this method.  If the endpoint is prefixed\nwith a  .  it will be registered to the current blueprint, otherwise\nit\u2019s an application independent endpoint. \n \n\n \n \n errorhandler ( code_or_exception ) \u00b6 \n Registers an error handler that becomes active for this blueprint\nonly.  Please be aware that routing does not happen local to a\nblueprint so an error handler for 404 usually is not handled by\na blueprint unless it is caused inside a view function.  Another\nspecial case is the 500 internal server error which is always looked\nup from the application. \n Otherwise works as the  errorhandler()  decorator\nof the  Flask  object. \n \n\n \n \n get_send_file_max_age ( filename ) \u00b6 \n Provides default cache_timeout for the  send_file()  functions. \n By default, this function returns  SEND_FILE_MAX_AGE_DEFAULT  from\nthe configuration of  current_app . \n Static file functions such as  send_from_directory()  use this\nfunction, and  send_file()  calls this function on\n current_app  when the given cache_timeout is  None . If a\ncache_timeout is given in  send_file() , that timeout is used;\notherwise, this method is called. \n This allows subclasses to change the behavior when sending files based\non the filename.  For example, to set the cache timeout for .js files\nto 60 seconds: \n class   MyFlask ( flask . Flask ): \n     def   get_send_file_max_age ( self ,   name ): \n         if   name . lower () . endswith ( '.js' ): \n             return   60 \n         return   flask . Flask . get_send_file_max_age ( self ,   name ) \n \n \n \n Changelog \n New in version 0.9. \n \n \n\n \n \n has_static_folder \u00b6 \n This is  True  if the package bound object\u2019s container has a\nfolder for static files. \n \n Changelog \n New in version 0.5. \n \n \n\n \n \n import_name  = None \u00b6 \n The name of the package or module that this app belongs to. Do not\nchange this once it is set by the constructor. \n \n\n \n \n jinja_loader \u00b6 \n The Jinja loader for this package bound object. \n \n Changelog \n New in version 0.5. \n \n \n\n \n \n json_decoder  = None \u00b6 \n Blueprint local JSON decoder class to use.\nSet to  None  to use the app\u2019s  json_decoder . \n \n\n \n \n json_encoder  = None \u00b6 \n Blueprint local JSON decoder class to use.\nSet to  None  to use the app\u2019s  json_encoder . \n \n\n \n \n make_setup_state ( app ,  options ,  first_registration=False ) \u00b6 \n Creates an instance of  BlueprintSetupState() \nobject that is later passed to the register callback functions.\nSubclasses can override this to return a subclass of the setup state. \n \n\n \n \n open_resource ( resource ,  mode='rb' ) \u00b6 \n Opens a resource from the application\u2019s resource folder.  To see\nhow this works, consider the following folder structure: \n / myapplication . py \n / schema . sql \n / static \n     / style . css \n / templates \n     / layout . html \n     / index . html \n \n \n If you want to open the  schema.sql  file you would do the\nfollowing: \n with   app . open_resource ( 'schema.sql' )   as   f : \n     contents   =   f . read () \n     do_something_with ( contents ) \n \n \n \n \n \n \n Parameters: \n resource  \u2013 the name of the resource.  To access resources within\nsubfolders use forward slashes as separator. \n mode  \u2013 resource file opening mode, default is \u2018rb\u2019. \n \n \n \n \n \n \n\n \n \n record ( func ) \u00b6 \n Registers a function that is called when the blueprint is\nregistered on the application.  This function is called with the\nstate as argument as returned by the  make_setup_state() \nmethod. \n \n\n \n \n record_once ( func ) \u00b6 \n Works like  record()  but wraps the function in another\nfunction that will ensure the function is only called once.  If the\nblueprint is registered a second time on the application, the\nfunction passed is not called. \n \n\n \n \n register ( app ,  options ,  first_registration=False ) \u00b6 \n Called by  Flask.register_blueprint()  to register all views\nand callbacks registered on the blueprint with the application. Creates\na  BlueprintSetupState  and calls each  record()  callback\nwith it. \n \n \n \n \n Parameters: \n app  \u2013 The application this blueprint is being registered with. \n options  \u2013 Keyword arguments forwarded from\n register_blueprint() . \n first_registration  \u2013 Whether this is the first time this\nblueprint has been registered on the application. \n \n \n \n \n \n \n\n \n \n register_error_handler ( code_or_exception ,  f ) \u00b6 \n Non-decorator version of the  errorhandler()  error attach\nfunction, akin to the  register_error_handler() \napplication-wide function of the  Flask  object but\nfor error handlers limited to this blueprint. \n \n Changelog \n New in version 0.11. \n \n \n\n \n \n root_path  = None \u00b6 \n Absolute path to the package on the filesystem. Used to look up\nresources contained in the package. \n \n\n \n \n route ( rule ,  **options ) \u00b6 \n Like  Flask.route()  but for a blueprint.  The endpoint for the\n url_for()  function is prefixed with the name of the blueprint. \n \n\n \n \n send_static_file ( filename ) \u00b6 \n Function used internally to send static files from the static\nfolder to the browser. \n \n Changelog \n New in version 0.5. \n \n \n\n \n \n static_folder \u00b6 \n The absolute path to the configured static folder. \n \n\n \n \n static_url_path \u00b6 \n The URL prefix that the static route will be registered for. \n \n\n \n \n teardown_app_request ( f ) \u00b6 \n Like  Flask.teardown_request()  but for a blueprint.  Such a\nfunction is executed when tearing down each request, even if outside of\nthe blueprint. \n \n\n \n \n teardown_request ( f ) \u00b6 \n Like  Flask.teardown_request()  but for a blueprint.  This\nfunction is only executed when tearing down requests handled by a\nfunction of that blueprint.  Teardown request functions are executed\nwhen the request context is popped, even when no actual request was\nperformed. \n \n\n \n \n template_folder  = None \u00b6 \n Location of the template files to be added to the template lookup.\n None  if templates should not be added. \n \n\n \n \n url_defaults ( f ) \u00b6 \n Callback function for URL defaults for this blueprint.  It\u2019s called\nwith the endpoint and values and should update the values passed\nin place. \n \n\n \n \n url_value_preprocessor ( f ) \u00b6 \n Registers a function as URL value preprocessor for this\nblueprint.  It\u2019s called before the view functions are called and\ncan modify the url values provided. \n \n\n \n\n \n \n Incoming Request Data \u00b6 \n \n \n class  flask. Request ( environ ,  populate_request=True ,  shallow=False ) \u00b6 \n The request object used by default in Flask.  Remembers the\nmatched endpoint and view arguments. \n It is what ends up as  request .  If you want to replace\nthe request object used you can subclass this and set\n request_class  to your subclass. \n The request object is a  Request  subclass and\nprovides all of the attributes Werkzeug defines plus a few Flask\nspecific ones. \n \n \n environ \u00b6 \n The underlying WSGI environment. \n \n\n \n \n path \u00b6 \n \n\n \n \n full_path \u00b6 \n \n\n \n \n script_root \u00b6 \n \n\n \n \n url \u00b6 \n \n\n \n \n base_url \u00b6 \n \n\n \n \n url_root \u00b6 \n Provides different ways to look at the current  IRI .  Imagine your application is\nlistening on the following application root: \n http : // www . example . com / myapplication \n \n \n And a user requests the following URI: \n http://www.example.com/myapplication/%CF%80/page.html?x=y\n \n \n In this case the values of the above mentioned attributes would be\nthe following: \n \n \n \n \n \n \n path \n u'/\u03c0/page.html' \n \n full_path \n u'/\u03c0/page.html?x=y' \n \n script_root \n u'/myapplication' \n \n base_url \n u'http://www.example.com/myapplication/\u03c0/page.html' \n \n url \n u'http://www.example.com/myapplication/\u03c0/page.html?x=y' \n \n url_root \n u'http://www.example.com/myapplication/' \n \n \n \n \n\n \n \n accept_charsets \u00b6 \n List of charsets this client supports as\n CharsetAccept  object. \n \n\n \n \n accept_encodings \u00b6 \n List of encodings this client accepts.  Encodings in a HTTP term\nare compression encodings such as gzip.  For charsets have a look at\n accept_charset . \n \n\n \n \n accept_languages \u00b6 \n List of languages this client accepts as\n LanguageAccept  object. \n \n\n \n \n accept_mimetypes \u00b6 \n List of mimetypes this client supports as\n MIMEAccept  object. \n \n\n \n \n access_route \u00b6 \n If a forwarded header exists this is a list of all ip addresses\nfrom the client ip to the last proxy server. \n \n\n \n \n classmethod  application ( f ) \u00b6 \n Decorate a function as responder that accepts the request as first\nargument.  This works like the  responder()  decorator but the\nfunction is passed the request object as first argument and the\nrequest object will be closed automatically: \n @Request . application \n def   my_wsgi_app ( request ): \n     return   Response ( 'Hello World!' ) \n \n \n As of Werkzeug 0.14 HTTP exceptions are automatically caught and\nconverted to responses instead of failing. \n \n \n \n \n Parameters: f  \u2013 the WSGI callable to decorate \n \n Returns: a new WSGI callable \n \n \n \n \n\n \n \n args \u00b6 \n The parsed URL parameters (the part in the URL after the question\nmark). \n By default an\n ImmutableMultiDict \nis returned from this function.  This can be changed by setting\n parameter_storage_class  to a different type.  This might\nbe necessary if the order of the form data is important. \n \n\n \n \n authorization \u00b6 \n The  Authorization  object in parsed form. \n \n\n \n \n base_url \n Like  url  but without the querystring\nSee also:  trusted_hosts . \n \n\n \n \n blueprint \u00b6 \n The name of the current blueprint \n \n\n \n \n cache_control \u00b6 \n A  RequestCacheControl  object\nfor the incoming cache control headers. \n \n\n \n \n close ( ) \u00b6 \n Closes associated resources of this request object.  This\ncloses all file handles explicitly.  You can also use the request\nobject in a with statement which will automatically close it. \n \n Changelog \n New in version 0.9. \n \n \n\n \n \n content_encoding \u00b6 \n The Content-Encoding entity-header field is used as a modifier to the\nmedia-type.  When present, its value indicates what additional content\ncodings have been applied to the entity-body, and thus what decoding\nmechanisms must be applied in order to obtain the media-type\nreferenced by the Content-Type header field. \n \n Changelog \n New in version 0.9. \n \n \n\n \n \n content_length \u00b6 \n The Content-Length entity-header field indicates the size of the\nentity-body in bytes or, in the case of the HEAD method, the size of\nthe entity-body that would have been sent had the request been a\nGET. \n \n\n \n \n content_md5 \u00b6 \n \n The Content-MD5 entity-header field, as defined in RFC 1864, is an\nMD5 digest of the entity-body for the purpose of providing an\nend-to-end message integrity check (MIC) of the entity-body.  (Note:\na MIC is good for detecting accidental modification of the\nentity-body in transit, but is not proof against malicious attacks.) \n \n Changelog \n New in version 0.9. \n \n \n\n \n \n content_type \u00b6 \n The Content-Type entity-header field indicates the media type of\nthe entity-body sent to the recipient or, in the case of the HEAD\nmethod, the media type that would have been sent had the request\nbeen a GET. \n \n\n \n \n cookies \u00b6 \n A  dict  with the contents of all cookies transmitted with\nthe request. \n \n\n \n \n data \u00b6 \n Contains the incoming request data as string in case it came with\na mimetype Werkzeug does not handle. \n \n\n \n \n date \u00b6 \n The Date general-header field represents the date and time at which\nthe message was originated, having the same semantics as orig-date\nin RFC 822. \n \n\n \n \n dict_storage_class \u00b6 \n alias of  werkzeug.datastructures.ImmutableTypeConversionDict \n \n\n \n \n endpoint \u00b6 \n The endpoint that matched the request.  This in combination with\n view_args  can be used to reconstruct the same or a\nmodified URL.  If an exception happened when matching, this will\nbe  None . \n \n\n \n \n files \u00b6 \n MultiDict  object containing\nall uploaded files.  Each key in  files  is the name from the\n <input   type=\"file\"   name=\"\"> .  Each value in  files  is a\nWerkzeug  FileStorage  object. \n It basically behaves like a standard file object you know from Python,\nwith the difference that it also has a\n save()  function that can\nstore the file on the filesystem. \n Note that  files  will only contain data if the request method was\nPOST, PUT or PATCH and the  <form>  that posted to the request had\n enctype=\"multipart/form-data\" .  It will be empty otherwise. \n See the  MultiDict  /\n FileStorage  documentation for\nmore details about the used data structure. \n \n\n \n \n form \u00b6 \n The form parameters.  By default an\n ImmutableMultiDict \nis returned from this function.  This can be changed by setting\n parameter_storage_class  to a different type.  This might\nbe necessary if the order of the form data is important. \n Please keep in mind that file uploads will not end up here, but instead\nin the  files  attribute. \n \n Changelog \n Changed in version 0.9:  Previous to Werkzeug 0.9 this would only contain form data for POST\nand PUT requests. \n \n \n\n \n \n form_data_parser_class \u00b6 \n alias of  werkzeug.formparser.FormDataParser \n \n\n \n \n classmethod  from_values ( *args ,  **kwargs ) \u00b6 \n Create a new request object based on the values provided.  If\nenviron is given missing values are filled from there.  This method is\nuseful for small scripts when you need to simulate a request from an URL.\nDo not use this method for unittesting, there is a full featured client\nobject ( Client ) that allows to create multipart requests,\nsupport for cookies etc. \n This accepts the same options as the\n EnvironBuilder . \n \n Changelog \n Changed in version 0.5:  This method now accepts the same arguments as\n EnvironBuilder .  Because of this the\n environ  parameter is now called  environ_overrides . \n \n \n \n \n \n Returns: request object \n \n \n \n \n\n \n \n full_path \n Requested path as unicode, including the query string. \n \n\n \n \n get_data ( cache=True ,  as_text=False ,  parse_form_data=False ) \u00b6 \n This reads the buffered incoming data from the client into one\nbytestring.  By default this is cached but that behavior can be\nchanged by setting  cache  to  False . \n Usually it\u2019s a bad idea to call this method without checking the\ncontent length first as a client could send dozens of megabytes or more\nto cause memory problems on the server. \n Note that if the form data was already parsed this method will not\nreturn anything as form data parsing does not cache the data like\nthis method does.  To implicitly invoke form data parsing function\nset  parse_form_data  to  True .  When this is done the return value\nof this method will be an empty string if the form parser handles\nthe data.  This generally is not necessary as if the whole data is\ncached (which is the default) the form parser will used the cached\ndata to parse the form data.  Please be generally aware of checking\nthe content length first in any case before calling this method\nto avoid exhausting server memory. \n If  as_text  is set to  True  the return value will be a decoded\nunicode string. \n \n Changelog \n New in version 0.9. \n \n \n\n \n \n get_json ( force=False ,  silent=False ,  cache=True ) \u00b6 \n Parse and return the data as JSON. If the mimetype does not\nindicate JSON ( application/json , see\n is_json() ), this returns  None  unless  force  is\ntrue. If parsing fails,  on_json_loading_failed()  is called\nand its return value is used as the return value. \n \n \n \n \n Parameters: \n force  \u2013 Ignore the mimetype and always try to parse JSON. \n silent  \u2013 Silence parsing errors and return  None \ninstead. \n cache  \u2013 Store the parsed JSON to return for subsequent\ncalls. \n \n \n \n \n \n \n\n \n \n headers \u00b6 \n The headers from the WSGI environ as immutable\n EnvironHeaders . \n \n\n \n \n host \u00b6 \n Just the host including the port if available.\nSee also:  trusted_hosts . \n \n\n \n \n host_url \u00b6 \n Just the host with scheme as IRI.\nSee also:  trusted_hosts . \n \n\n \n \n if_match \u00b6 \n An object containing all the etags in the  If-Match  header. \n \n \n \n \n Return type: ETags \n \n \n \n \n\n \n \n if_modified_since \u00b6 \n The parsed  If-Modified-Since  header as datetime object. \n \n\n \n \n if_none_match \u00b6 \n An object containing all the etags in the  If-None-Match  header. \n \n \n \n \n Return type: ETags \n \n \n \n \n\n \n \n if_range \u00b6 \n The parsed  If-Range  header. \n \n Changelog \n New in version 0.7. \n \n \n \n \n \n Return type: IfRange \n \n \n \n \n\n \n \n if_unmodified_since \u00b6 \n The parsed  If-Unmodified-Since  header as datetime object. \n \n\n \n \n is_json \u00b6 \n Check if the mimetype indicates JSON data, either\n application/json  or  application/*+json . \n \n Changelog \n New in version 0.11. \n \n \n\n \n \n is_multiprocess \u00b6 \n boolean that is  True  if the application is served by\na WSGI server that spawns multiple processes. \n \n\n \n \n is_multithread \u00b6 \n boolean that is  True  if the application is served by\na multithreaded WSGI server. \n \n\n \n \n is_run_once \u00b6 \n boolean that is  True  if the application will be executed only\nonce in a process lifetime.  This is the case for CGI for example,\nbut it\u2019s not guaranteed that the execution only happens one time. \n \n\n \n \n is_secure \u00b6 \n True  if the request is secure. \n \n\n \n \n is_xhr \u00b6 \n True if the request was triggered via a JavaScript XMLHttpRequest.\nThis only works with libraries that support the  X-Requested-With \nheader and set it to \u201cXMLHttpRequest\u201d.  Libraries that do that are\nprototype, jQuery and Mochikit and probably some more. \n \n Deprecated since version 0.13:  X-Requested-With  is not standard and is unreliable. \n \n \n Changelog \n\n \n \n json \u00b6 \n This will contain the parsed JSON data if the mimetype indicates\nJSON ( application/json , see  is_json() ), otherwise it\nwill be  None . \n \n\n \n \n list_storage_class \u00b6 \n alias of  werkzeug.datastructures.ImmutableList \n \n\n \n \n make_form_data_parser ( ) \u00b6 \n Creates the form data parser. Instantiates the\n form_data_parser_class  with some parameters. \n \n Changelog \n New in version 0.8. \n \n \n\n \n \n max_content_length \u00b6 \n Read-only view of the  MAX_CONTENT_LENGTH  config key. \n \n\n \n \n max_forwards \u00b6 \n The Max-Forwards request-header field provides a mechanism with the\nTRACE and OPTIONS methods to limit the number of proxies or gateways\nthat can forward the request to the next inbound server. \n \n\n \n \n method \u00b6 \n The request method. (For example  'GET'  or  'POST' ). \n \n\n \n \n mimetype \u00b6 \n Like  content_type , but without parameters (eg, without\ncharset, type etc.) and always lowercase.  For example if the content\ntype is  text/HTML;   charset=utf-8  the mimetype would be\n 'text/html' . \n \n\n \n \n mimetype_params \u00b6 \n The mimetype parameters as dict.  For example if the content\ntype is  text/html;   charset=utf-8  the params would be\n {'charset':   'utf-8'} . \n \n\n \n \n on_json_loading_failed ( e ) \u00b6 \n Called if  get_json()  parsing fails and isn\u2019t silenced. If\nthis method returns a value, it is used as the return value for\n get_json() . The default implementation raises a\n BadRequest  exception. \n \n Changelog \n Changed in version 0.10:  Raise a  BadRequest  error instead of returning an error\nmessage as JSON. If you want that behavior you can add it by\nsubclassing. \n \n \n New in version 0.8. \n \n \n\n \n \n parameter_storage_class \u00b6 \n alias of  werkzeug.datastructures.ImmutableMultiDict \n \n\n \n \n path \n Requested path as unicode.  This works a bit like the regular path\ninfo in the WSGI environment but will always include a leading slash,\neven if the URL root is accessed. \n \n\n \n \n pragma \u00b6 \n The Pragma general-header field is used to include\nimplementation-specific directives that might apply to any recipient\nalong the request/response chain.  All pragma directives specify\noptional behavior from the viewpoint of the protocol; however, some\nsystems MAY require that behavior be consistent with the directives. \n \n\n \n \n query_string \u00b6 \n The URL parameters as raw bytestring. \n \n\n \n \n range \u00b6 \n The parsed  Range  header. \n \n Changelog \n New in version 0.7. \n \n \n \n \n \n Return type: Range \n \n \n \n \n\n \n \n referrer \u00b6 \n The Referer[sic] request-header field allows the client to specify,\nfor the server\u2019s benefit, the address (URI) of the resource from which\nthe Request-URI was obtained (the \u201creferrer\u201d, although the header\nfield is misspelled). \n \n\n \n \n remote_addr \u00b6 \n The remote address of the client. \n \n\n \n \n remote_user \u00b6 \n If the server supports user authentication, and the script is\nprotected, this attribute contains the username the user has\nauthenticated as. \n \n\n \n \n routing_exception  = None \u00b6 \n If matching the URL failed, this is the exception that will be\nraised / was raised as part of the request handling.  This is\nusually a  NotFound  exception or\nsomething similar. \n \n\n \n \n scheme \u00b6 \n URL scheme (http or https). \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n script_root \n The root path of the script without the trailing slash. \n \n\n \n \n stream \u00b6 \n If the incoming form data was not encoded with a known mimetype\nthe data is stored unmodified in this stream for consumption.  Most\nof the time it is a better idea to use  data  which will give\nyou that data as a string.  The stream only returns the data once. \n Unlike  input_stream  this stream is properly guarded that you\ncan\u2019t accidentally read past the length of the input.  Werkzeug will\ninternally always refer to this stream to read data which makes it\npossible to wrap this object with a stream that does filtering. \n \n Changelog \n Changed in version 0.9:  This stream is now always available but might be consumed by the\nform parser later on.  Previously the stream was only set if no\nparsing happened. \n \n \n\n \n \n url \n The reconstructed current URL as IRI.\nSee also:  trusted_hosts . \n \n\n \n \n url_charset \u00b6 \n The charset that is assumed for URLs.  Defaults to the value\nof  charset . \n \n Changelog \n New in version 0.6. \n \n \n\n \n \n url_root \n The full URL root (with hostname), this is the application\nroot as IRI.\nSee also:  trusted_hosts . \n \n\n \n \n url_rule  = None \u00b6 \n The internal URL rule that matched the request.  This can be\nuseful to inspect which methods are allowed for the URL from\na before/after handler ( request.url_rule.methods ) etc.\nThough if the request\u2019s method was invalid for the URL rule,\nthe valid list is available in  routing_exception.valid_methods \ninstead (an attribute of the Werkzeug exception  MethodNotAllowed )\nbecause the request was never internally bound. \n \n Changelog \n New in version 0.6. \n \n \n\n \n \n user_agent \u00b6 \n The current user agent. \n \n\n \n \n values \u00b6 \n A  werkzeug.datastructures.CombinedMultiDict  that combines\n args  and  form . \n \n\n \n \n view_args  = None \u00b6 \n A dict of view arguments that matched the request.  If an exception\nhappened when matching, this will be  None . \n \n\n \n \n want_form_data_parsed \u00b6 \n Returns True if the request method carries content.  As of\nWerkzeug 0.9 this will be the case if a content type is transmitted. \n \n Changelog \n New in version 0.8. \n \n \n\n \n\n \n \n flask. request \u00b6 \n To access incoming request data, you can use the global  request \nobject.  Flask parses incoming request data for you and gives you\naccess to it through that global object.  Internally Flask makes\nsure that you always get the correct data for the active thread if you\nare in a multithreaded environment. \n This is a proxy.  See  Notes On Proxies  for more information. \n The request object is an instance of a  Request \nsubclass and provides all of the attributes Werkzeug defines.  This\njust shows a quick overview of the most important ones. \n \n\n \n \n Response Objects \u00b6 \n \n \n class  flask. Response ( response=None ,  status=None ,  headers=None ,  mimetype=None ,  content_type=None ,  direct_passthrough=False ) \u00b6 \n The response object that is used by default in Flask.  Works like the\nresponse object from Werkzeug but is set to have an HTML mimetype by\ndefault.  Quite often you don\u2019t have to create this object yourself because\n make_response()  will take care of that for you. \n If you want to replace the response object used you can subclass this and\nset  response_class  to your subclass. \n \n Changed in version 1.0:  JSON support is added to the response, like the request. This is useful\nwhen testing to get the test client response data as JSON. \n \n \n Changed in version 1.0:  Added  max_cookie_size . \n \n \n Changelog \n \n headers \u00b6 \n A  Headers  object representing the response headers. \n \n\n \n \n status \u00b6 \n A string with a response status. \n \n\n \n \n status_code \u00b6 \n The response status as integer. \n \n\n \n \n data \u00b6 \n A descriptor that calls  get_data()  and  set_data() .  This\nshould not be used and will eventually get deprecated. \n \n\n \n \n get_json ( force=False ,  silent=False ,  cache=True ) \u00b6 \n Parse and return the data as JSON. If the mimetype does not\nindicate JSON ( application/json , see\n is_json() ), this returns  None  unless  force  is\ntrue. If parsing fails,  on_json_loading_failed()  is called\nand its return value is used as the return value. \n \n \n \n \n Parameters: \n force  \u2013 Ignore the mimetype and always try to parse JSON. \n silent  \u2013 Silence parsing errors and return  None \ninstead. \n cache  \u2013 Store the parsed JSON to return for subsequent\ncalls. \n \n \n \n \n \n \n\n \n \n is_json \u00b6 \n Check if the mimetype indicates JSON data, either\n application/json  or  application/*+json . \n \n Changelog \n New in version 0.11. \n \n \n\n \n \n max_cookie_size \u00b6 \n Read-only view of the  MAX_COOKIE_SIZE  config key. \n See  max_cookie_size  in\nWerkzeug\u2019s docs. \n \n\n \n \n mimetype \u00b6 \n The mimetype (content type without charset etc.) \n \n\n \n \n set_cookie ( key ,  value='' ,  max_age=None ,  expires=None ,  path='/' ,  domain=None ,  secure=False ,  httponly=False ,  samesite=None ) \u00b6 \n Sets a cookie. The parameters are the same as in the cookie  Morsel \nobject in the Python standard library but it accepts unicode data, too. \n A warning is raised if the size of the cookie header exceeds\n max_cookie_size , but the header will still be set. \n \n \n \n \n Parameters: \n key  \u2013 the key (name) of the cookie to be set. \n value  \u2013 the value of the cookie. \n max_age  \u2013 should be a number of seconds, or  None  (default) if\nthe cookie should last only as long as the client\u2019s\nbrowser session. \n expires  \u2013 should be a  datetime  object or UNIX timestamp. \n path  \u2013 limits the cookie to a given path, per default it will\nspan the whole domain. \n domain  \u2013 if you want to set a cross-domain cookie.  For example,\n domain=\".example.com\"  will set a cookie that is\nreadable by the domain  www.example.com ,\n foo.example.com  etc.  Otherwise, a cookie will only\nbe readable by the domain that set it. \n secure  \u2013 If  True , the cookie will only be available via HTTPS \n httponly  \u2013 disallow JavaScript to access the cookie.  This is an\nextension to the cookie standard and probably not\nsupported by all browsers. \n samesite  \u2013 Limits the scope of the cookie such that it will only\nbe attached to requests if those requests are\n\u201csame-site\u201d. \n \n \n \n \n \n \n\n \n\n \n \n Sessions \u00b6 \n If you have set  Flask.secret_key  (or configured it from\n SECRET_KEY ) you can use sessions in Flask applications. A session makes\nit possible to remember information from one request to another. The way Flask\ndoes this is by using a signed cookie. The user can look at the session\ncontents, but can\u2019t modify it unless they know the secret key, so make sure to\nset that to something complex and unguessable. \n To access the current session you can use the  session  object: \n \n \n class  flask. session \u00b6 \n The session object works pretty much like an ordinary dict, with the\ndifference that it keeps track on modifications. \n This is a proxy.  See  Notes On Proxies  for more information. \n The following attributes are interesting: \n \n \n new \u00b6 \n True  if the session is new,  False  otherwise. \n \n\n \n \n modified \u00b6 \n True  if the session object detected a modification.  Be advised\nthat modifications on mutable structures are not picked up\nautomatically, in that situation you have to explicitly set the\nattribute to  True  yourself.  Here an example: \n # this change is not picked up because a mutable object (here \n # a list) is changed. \n session [ 'objects' ] . append ( 42 ) \n # so mark it as modified yourself \n session . modified   =   True \n \n \n \n\n \n \n permanent \u00b6 \n If set to  True  the session lives for\n permanent_session_lifetime  seconds.  The\ndefault is 31 days.  If set to  False  (which is the default) the\nsession will be deleted when the user closes the browser. \n \n\n \n\n \n \n Session Interface \u00b6 \n \n Changelog \n New in version 0.8. \n \n The session interface provides a simple way to replace the session\nimplementation that Flask is using. \n \n \n class  flask.sessions. SessionInterface \u00b6 \n The basic interface you have to implement in order to replace the\ndefault session interface which uses werkzeug\u2019s securecookie\nimplementation.  The only methods you have to implement are\n open_session()  and  save_session() , the others have\nuseful defaults which you don\u2019t need to change. \n The session object returned by the  open_session()  method has to\nprovide a dictionary like interface plus the properties and methods\nfrom the  SessionMixin .  We recommend just subclassing a dict\nand adding that mixin: \n class   Session ( dict ,   SessionMixin ): \n     pass \n \n \n If  open_session()  returns  None  Flask will call into\n make_null_session()  to create a session that acts as replacement\nif the session support cannot work because some requirement is not\nfulfilled.  The default  NullSession  class that is created\nwill complain that the secret key was not set. \n To replace the session interface on an application all you have to do\nis to assign  flask.Flask.session_interface : \n app   =   Flask ( __name__ ) \n app . session_interface   =   MySessionInterface () \n \n \n \n Changelog \n New in version 0.8. \n \n \n \n get_cookie_domain ( app ) \u00b6 \n Returns the domain that should be set for the session cookie. \n Uses  SESSION_COOKIE_DOMAIN  if it is configured, otherwise\nfalls back to detecting the domain based on  SERVER_NAME . \n Once detected (or if not set at all),  SESSION_COOKIE_DOMAIN  is\nupdated to avoid re-running the logic. \n \n\n \n \n get_cookie_httponly ( app ) \u00b6 \n Returns True if the session cookie should be httponly.  This\ncurrently just returns the value of the  SESSION_COOKIE_HTTPONLY \nconfig var. \n \n\n \n \n get_cookie_path ( app ) \u00b6 \n Returns the path for which the cookie should be valid.  The\ndefault implementation uses the value from the  SESSION_COOKIE_PATH \nconfig var if it\u2019s set, and falls back to  APPLICATION_ROOT  or\nuses  /  if it\u2019s  None . \n \n\n \n \n get_cookie_samesite ( app ) \u00b6 \n Return  'Strict'  or  'Lax'  if the cookie should use the\n SameSite  attribute. This currently just returns the value of\nthe  SESSION_COOKIE_SAMESITE  setting. \n \n\n \n \n get_cookie_secure ( app ) \u00b6 \n Returns True if the cookie should be secure.  This currently\njust returns the value of the  SESSION_COOKIE_SECURE  setting. \n \n\n \n \n get_expiration_time ( app ,  session ) \u00b6 \n A helper method that returns an expiration date for the session\nor  None  if the session is linked to the browser session.  The\ndefault implementation returns now + the permanent session\nlifetime configured on the application. \n \n\n \n \n is_null_session ( obj ) \u00b6 \n Checks if a given object is a null session.  Null sessions are\nnot asked to be saved. \n This checks if the object is an instance of  null_session_class \nby default. \n \n\n \n \n make_null_session ( app ) \u00b6 \n Creates a null session which acts as a replacement object if the\nreal session support could not be loaded due to a configuration\nerror.  This mainly aids the user experience because the job of the\nnull session is to still support lookup without complaining but\nmodifications are answered with a helpful error message of what\nfailed. \n This creates an instance of  null_session_class  by default. \n \n\n \n \n null_session_class \u00b6 \n make_null_session()  will look here for the class that should\nbe created when a null session is requested.  Likewise the\n is_null_session()  method will perform a typecheck against\nthis type. \n alias of  NullSession \n \n\n \n \n open_session ( app ,  request ) \u00b6 \n This method has to be implemented and must either return  None \nin case the loading failed because of a configuration error or an\ninstance of a session object which implements a dictionary like\ninterface + the methods and attributes on  SessionMixin . \n \n\n \n \n pickle_based  = False \u00b6 \n A flag that indicates if the session interface is pickle based.\nThis can be used by Flask extensions to make a decision in regards\nto how to deal with the session object. \n \n Changelog \n New in version 0.10. \n \n \n\n \n \n save_session ( app ,  session ,  response ) \u00b6 \n This is called for actual sessions returned by  open_session() \nat the end of the request.  This is still called during a request\ncontext so if you absolutely need access to the request you can do\nthat. \n \n\n \n \n should_set_cookie ( app ,  session ) \u00b6 \n Used by session backends to determine if a  Set-Cookie  header\nshould be set for this session cookie for this response. If the session\nhas been modified, the cookie is set. If the session is permanent and\nthe  SESSION_REFRESH_EACH_REQUEST  config is true, the cookie is\nalways set. \n This check is usually skipped if the session was deleted. \n \n Changelog \n New in version 0.11. \n \n \n\n \n\n \n \n class  flask.sessions. SecureCookieSessionInterface \u00b6 \n The default session interface that stores sessions in signed cookies\nthrough the  itsdangerous  module. \n \n \n static  digest_method ( ) \u00b6 \n the hash function to use for the signature.  The default is sha1 \n \n\n \n \n key_derivation  = 'hmac' \u00b6 \n the name of the itsdangerous supported key derivation.  The default\nis hmac. \n \n\n \n \n open_session ( app ,  request ) \u00b6 \n This method has to be implemented and must either return  None \nin case the loading failed because of a configuration error or an\ninstance of a session object which implements a dictionary like\ninterface + the methods and attributes on  SessionMixin . \n \n\n \n \n salt  = 'cookie-session' \u00b6 \n the salt that should be applied on top of the secret key for the\nsigning of cookie based sessions. \n \n\n \n \n save_session ( app ,  session ,  response ) \u00b6 \n This is called for actual sessions returned by  open_session() \nat the end of the request.  This is still called during a request\ncontext so if you absolutely need access to the request you can do\nthat. \n \n\n \n \n serializer  = <flask.json.tag.TaggedJSONSerializer object> \u00b6 \n A python serializer for the payload.  The default is a compact\nJSON derived serializer with support for some extra Python types\nsuch as datetime objects or tuples. \n \n\n \n \n session_class \u00b6 \n alias of  SecureCookieSession \n \n\n \n\n \n \n class  flask.sessions. SecureCookieSession ( initial=None ) \u00b6 \n Base class for sessions based on signed cookies. \n This session backend will set the  modified  and\n accessed  attributes. It cannot reliably track whether a\nsession is new (vs. empty), so  new  remains hard coded to\n False . \n \n \n accessed  = False \u00b6 \n header, which allows caching proxies to cache different pages for\ndifferent users. \n \n\n \n \n get ( k [ ,  d ] )  \u2192 D[k] if k in D, else d.  d defaults to None. \u00b6 \n \n\n \n \n modified  = False \u00b6 \n When data is changed, this is set to  True . Only the session\ndictionary itself is tracked; if the session contains mutable\ndata (for example a nested dict) then this must be set to\n True  manually when modifying that data. The session cookie\nwill only be written to the response if this is  True . \n \n\n \n \n setdefault ( k [ ,  d ] )  \u2192 D.get(k,d), also set D[k]=d if k not in D \u00b6 \n \n\n \n\n \n \n class  flask.sessions. NullSession ( initial=None ) \u00b6 \n Class used to generate nicer error messages if sessions are not\navailable.  Will still allow read-only access to the empty session\nbut fail on setting. \n \n\n \n \n class  flask.sessions. SessionMixin \u00b6 \n Expands a basic dictionary with session attributes. \n \n \n accessed  = True \u00b6 \n Some implementations can detect when session data is read or\nwritten and set this when that happens. The mixin default is hard\ncoded to  True . \n \n\n \n \n modified  = True \u00b6 \n Some implementations can detect changes to the session and set\nthis when that happens. The mixin default is hard coded to\n True . \n \n\n \n \n permanent \u00b6 \n This reflects the  '_permanent'  key in the dict. \n \n\n \n\n \n Notice \n The  PERMANENT_SESSION_LIFETIME  config key can also be an integer\nstarting with Flask 0.8.  Either catch this down yourself or use\nthe  permanent_session_lifetime  attribute on the\napp which converts the result to an integer automatically. \n \n \n \n Test Client \u00b6 \n \n \n class  flask.testing. FlaskClient ( *args ,  **kwargs ) \u00b6 \n Works like a regular Werkzeug test client but has some knowledge about\nhow Flask works to defer the cleanup of the request context stack to the\nend of a  with  body when used in a  with  statement.  For general\ninformation about how to use this class refer to\n werkzeug.test.Client . \n \n Changelog \n Changed in version 0.12:  app.test_client()  includes preset default environment, which can be\nset after instantiation of the  app.test_client()  object in\n client.environ_base . \n \n Basic usage is outlined in the  Testing Flask Applications  chapter. \n \n \n open ( *args ,  **kwargs ) \u00b6 \n Takes the same arguments as the  EnvironBuilder  class with\nsome additions:  You can provide a  EnvironBuilder  or a WSGI\nenvironment as only argument instead of the  EnvironBuilder \narguments and two optional keyword arguments ( as_tuple ,  buffered )\nthat change the type of the return value or the way the application is\nexecuted. \n \n Changelog \n Changed in version 0.5:  If a dict is provided as file in the dict for the  data  parameter\nthe content type has to be called  content_type  now instead of\n mimetype .  This change was made for consistency with\n werkzeug.FileWrapper . \n \n The  follow_redirects  parameter was added to  open() . \n \n Additional parameters: \n \n \n \n \n Parameters: \n as_tuple  \u2013 Returns a tuple in the form  (environ,   result) \n buffered  \u2013 Set this to True to buffer the application run.\nThis will automatically close the application for\nyou as well. \n follow_redirects  \u2013 Set this to True if the  Client  should\nfollow HTTP redirects. \n \n \n \n \n \n \n\n \n \n session_transaction ( *args ,  **kwargs ) \u00b6 \n When used in combination with a  with  statement this opens a\nsession transaction.  This can be used to modify the session that\nthe test client uses.  Once the  with  block is left the session is\nstored back. \n with   client . session_transaction ()   as   session : \n     session [ 'value' ]   =   42 \n \n \n Internally this is implemented by going through a temporary test\nrequest context and since session handling could depend on\nrequest variables this function accepts the same arguments as\n test_request_context()  which are directly\npassed through. \n \n\n \n\n \n \n Test CLI Runner \u00b6 \n \n \n class  flask.testing. FlaskCliRunner ( app ,  **kwargs ) \u00b6 \n A  CliRunner  for testing a Flask app\u2019s\nCLI commands. Typically created using\n test_cli_runner() . See  Testing CLI Commands . \n \n \n invoke ( cli=None ,  args=None ,  **kwargs ) \u00b6 \n Invokes a CLI command in an isolated environment. See\n CliRunner.invoke  for\nfull method documentation. See  Testing CLI Commands  for examples. \n If the  obj  argument is not given, passes an instance of\n ScriptInfo  that knows how to load the Flask\napp being tested. \n \n \n \n \n Parameters: \n cli  \u2013 Command object to invoke. Default is the app\u2019s\n cli  group. \n args  \u2013 List of strings to invoke the command with. \n \n \n \n Returns: a  Result  object. \n \n \n \n \n \n\n \n\n \n \n Application Globals \u00b6 \n To share data that is valid for one request only from one function to\nanother, a global variable is not good enough because it would break in\nthreaded environments.  Flask provides you with a special object that\nensures it is only valid for the active request and that will return\ndifferent values for each request.  In a nutshell: it does the right\nthing, like it does for  request  and  session . \n \n \n flask. g \u00b6 \n A namespace object that can store data during an\n application context . This is an instance of\n Flask.app_ctx_globals_class , which defaults to\n ctx._AppCtxGlobals . \n This is a good place to store resources during a request. During\ntesting, you can use the  Faking Resources and Context  pattern to\npre-configure such resources. \n This is a proxy. See  Notes On Proxies  for more information. \n \n Changelog \n Changed in version 0.10:  Bound to the application context instead of the request context. \n \n \n\n \n \n class  flask.ctx. _AppCtxGlobals \u00b6 \n A plain object. Used as a namespace for storing data during an\napplication context. \n Creating an app context automatically creates this object, which is\nmade available as the  g  proxy. \n \n \n 'key' in g \n Check whether an attribute is present. \n \n Changelog \n New in version 0.10. \n \n \n\n \n \n iter(g) \n Return an iterator over the attribute names. \n \n Changelog \n New in version 0.10. \n \n \n\n \n \n get ( name ,  default=None ) \u00b6 \n Get an attribute by name, or a default value. Like\n dict.get() . \n \n \n \n \n Parameters: \n name  \u2013 Name of attribute to get. \n default  \u2013 Value to return if the attribute is not present. \n \n \n \n \n \n \n Changelog \n New in version 0.10. \n \n \n\n \n \n pop ( name ,  default=<object object> ) \u00b6 \n Get and remove an attribute by name. Like  dict.pop() . \n \n \n \n \n Parameters: \n name  \u2013 Name of attribute to pop. \n default  \u2013 Value to return if the attribute is not present,\ninstead of raise a  KeyError . \n \n \n \n \n \n \n Changelog \n New in version 0.11. \n \n \n\n \n \n setdefault ( name ,  default=None ) \u00b6 \n Get the value of an attribute if it is present, otherwise\nset and return a default value. Like  dict.setdefault() . \n \n \n \n \n Parameters: name  \u2013 Name of attribute to get. \n \n Param: default: Value to set and return if the attribute is not\npresent. \n \n \n \n \n Changelog \n New in version 0.11. \n \n \n\n \n\n \n \n Useful Functions and Classes \u00b6 \n \n \n flask. current_app \u00b6 \n A proxy to the application handling the current request. This is\nuseful to access the application without needing to import it, or if\nit can\u2019t be imported, such as when using the application factory\npattern or in blueprints and extensions. \n This is only available when an\n application context  is pushed. This happens\nautomatically during requests and CLI commands. It can be controlled\nmanually with  app_context() . \n This is a proxy. See  Notes On Proxies  for more information. \n \n\n \n \n flask. has_request_context ( ) \u00b6 \n If you have code that wants to test if a request context is there or\nnot this function can be used.  For instance, you may want to take advantage\nof request information if the request object is available, but fail\nsilently if it is unavailable. \n class   User ( db . Model ): \n\n     def   __init__ ( self ,   username ,   remote_addr = None ): \n         self . username   =   username \n         if   remote_addr   is   None   and   has_request_context (): \n             remote_addr   =   request . remote_addr \n         self . remote_addr   =   remote_addr \n \n \n Alternatively you can also just test any of the context bound objects\n(such as  request  or  g  for truthness): \n class   User ( db . Model ): \n\n     def   __init__ ( self ,   username ,   remote_addr = None ): \n         self . username   =   username \n         if   remote_addr   is   None   and   request : \n             remote_addr   =   request . remote_addr \n         self . remote_addr   =   remote_addr \n \n \n \n Changelog \n New in version 0.7. \n \n \n\n \n \n flask. copy_current_request_context ( f ) \u00b6 \n A helper function that decorates a function to retain the current\nrequest context.  This is useful when working with greenlets.  The moment\nthe function is decorated a copy of the request context is created and\nthen pushed when the function is called. \n Example: \n import   gevent \n from   flask   import   copy_current_request_context \n\n @app . route ( '/' ) \n def   index (): \n     @copy_current_request_context \n     def   do_some_work (): \n         # do some work here, it can access flask.request like you \n         # would otherwise in the view function. \n         ... \n     gevent . spawn ( do_some_work ) \n     return   'Regular response' \n \n \n \n Changelog \n New in version 0.10. \n \n \n\n \n \n flask. has_app_context ( ) \u00b6 \n Works like  has_request_context()  but for the application\ncontext.  You can also just do a boolean check on the\n current_app  object instead. \n \n Changelog \n New in version 0.9. \n \n \n\n \n \n flask. url_for ( endpoint ,  **values ) \u00b6 \n Generates a URL to the given endpoint with the method provided. \n Variable arguments that are unknown to the target endpoint are appended\nto the generated URL as query arguments.  If the value of a query argument\nis  None , the whole pair is skipped.  In case blueprints are active\nyou can shortcut references to the same blueprint by prefixing the\nlocal endpoint with a dot ( . ). \n This will reference the index function local to the current blueprint: \n url_for ( '.index' ) \n \n \n For more information, head over to the  Quickstart . \n To integrate applications,  Flask  has a hook to intercept URL build\nerrors through  Flask.url_build_error_handlers .  The  url_for \nfunction results in a  BuildError  when the current\napp does not have a URL for the given endpoint and values.  When it does, the\n current_app  calls its  url_build_error_handlers  if\nit is not  None , which can return a string to use as the result of\n url_for  (instead of  url_for \u2019s default to raise the\n BuildError  exception) or re-raise the exception.\nAn example: \n def   external_url_handler ( error ,   endpoint ,   values ): \n     \"Looks up an external URL when `url_for` cannot build a URL.\" \n     # This is an example of hooking the build_error_handler. \n     # Here, lookup_url is some utility function you've built \n     # which looks up the endpoint in some external URL registry. \n     url   =   lookup_url ( endpoint ,   ** values ) \n     if   url   is   None : \n         # External lookup did not have a URL. \n         # Re-raise the BuildError, in context of original traceback. \n         exc_type ,   exc_value ,   tb   =   sys . exc_info () \n         if   exc_value   is   error : \n             raise   exc_type ,   exc_value ,   tb \n         else : \n             raise   error \n     # url_for will use this result, instead of raising BuildError. \n     return   url \n\n app . url_build_error_handlers . append ( external_url_handler ) \n \n \n Here,  error  is the instance of  BuildError , and\n endpoint  and  values  are the arguments passed into  url_for .  Note\nthat this is for building URLs outside the current application, and not for\nhandling 404 NotFound errors. \n \n Changelog \n New in version 0.10:  The  _scheme  parameter was added. \n \n \n New in version 0.9:  The  _anchor  and  _method  parameters were added. \n \n \n New in version 0.9:  Calls  Flask.handle_build_error()  on\n BuildError . \n \n \n \n \n \n Parameters: \n endpoint  \u2013 the endpoint of the URL (name of the function) \n values  \u2013 the variable arguments of the URL rule \n _external  \u2013 if set to  True , an absolute URL is generated. Server\naddress can be changed via  SERVER_NAME  configuration variable which\ndefaults to  localhost . \n _scheme  \u2013 a string specifying the desired URL scheme. The  _external \nparameter must be set to  True  or a  ValueError  is raised. The default\nbehavior uses the same scheme as the current request, or\n PREFERRED_URL_SCHEME  from the  app configuration  if no\nrequest context is available. As of Werkzeug 0.10, this also can be set\nto an empty string to build protocol-relative URLs. \n _anchor  \u2013 if provided this is added as anchor to the URL. \n _method  \u2013 if provided this explicitly specifies an HTTP method. \n \n \n \n \n \n \n\n \n \n flask. abort ( status ,  *args ,  **kwargs ) \u00b6 \n Raises an  HTTPException  for the given status code or WSGI\napplication: \n abort ( 404 )    # 404 Not Found \n abort ( Response ( 'Hello World' )) \n \n \n Can be passed a WSGI application or a status code.  If a status code is\ngiven it\u2019s looked up in the list of exceptions and will raise that\nexception, if passed a WSGI application it will wrap it in a proxy WSGI\nexception and raise that: \n abort ( 404 ) \n abort ( Response ( 'Hello World' )) \n \n \n \n\n \n \n flask. redirect ( location ,  code=302 ,  Response=None ) \u00b6 \n Returns a response object (a WSGI application) that, if called,\nredirects the client to the target location.  Supported codes are 301,\n302, 303, 305, and 307.  300 is not supported because it\u2019s not a real\nredirect and 304 because it\u2019s the answer for a request with a request\nwith defined If-Modified-Since headers. \n \n Changelog \n New in version 0.10:  The class used for the Response object can now be passed in. \n \n \n New in version 0.6:  The location can now be a unicode string that is encoded using\nthe  iri_to_uri()  function. \n \n \n \n \n \n Parameters: \n location  \u2013 the location the response should redirect to. \n code  \u2013 the redirect status code. defaults to 302. \n Response  ( class ) \u2013 a Response class to use when instantiating a\nresponse. The default is  werkzeug.wrappers.Response  if\nunspecified. \n \n \n \n \n \n \n\n \n \n flask. make_response ( *args ) \u00b6 \n Sometimes it is necessary to set additional headers in a view.  Because\nviews do not have to return response objects but can return a value that\nis converted into a response object by Flask itself, it becomes tricky to\nadd headers to it.  This function can be called instead of using a return\nand you will get a response object which you can use to attach headers. \n If view looked like this and you want to add a new header: \n def   index (): \n     return   render_template ( 'index.html' ,   foo = 42 ) \n \n \n You can now do something like this: \n def   index (): \n     response   =   make_response ( render_template ( 'index.html' ,   foo = 42 )) \n     response . headers [ 'X-Parachutes' ]   =   'parachutes are cool' \n     return   response \n \n \n This function accepts the very same arguments you can return from a\nview function.  This for example creates a response with a 404 error\ncode: \n response   =   make_response ( render_template ( 'not_found.html' ),   404 ) \n \n \n The other use case of this function is to force the return value of a\nview function into a response which is helpful with view\ndecorators: \n response   =   make_response ( view_function ()) \n response . headers [ 'X-Parachutes' ]   =   'parachutes are cool' \n \n \n Internally this function does the following things: \n \n if no arguments are passed, it creates a new response argument \n if one argument is passed,  flask.Flask.make_response() \nis invoked with it. \n if more than one argument is passed, the arguments are passed\nto the  flask.Flask.make_response()  function as tuple. \n \n \n Changelog \n New in version 0.6. \n \n \n\n \n \n flask. after_this_request ( f ) \u00b6 \n Executes a function after this request.  This is useful to modify\nresponse objects.  The function is passed the response object and has\nto return the same or a new one. \n Example: \n @app . route ( '/' ) \n def   index (): \n     @after_this_request \n     def   add_header ( response ): \n         response . headers [ 'X-Foo' ]   =   'Parachute' \n         return   response \n     return   'Hello World!' \n \n \n This is more useful if a function other than the view function wants to\nmodify a response.  For instance think of a decorator that wants to add\nsome headers without converting the return value into a response object. \n \n Changelog \n New in version 0.9. \n \n \n\n \n \n flask. send_file ( filename_or_fp ,  mimetype=None ,  as_attachment=False ,  attachment_filename=None ,  add_etags=True ,  cache_timeout=None ,  conditional=False ,  last_modified=None ) \u00b6 \n Sends the contents of a file to the client.  This will use the\nmost efficient method available and configured.  By default it will\ntry to use the WSGI server\u2019s file_wrapper support.  Alternatively\nyou can set the application\u2019s  use_x_sendfile  attribute\nto  True  to directly emit an  X-Sendfile  header.  This however\nrequires support of the underlying webserver for  X-Sendfile . \n By default it will try to guess the mimetype for you, but you can\nalso explicitly provide one.  For extra security you probably want\nto send certain files as attachment (HTML for instance).  The mimetype\nguessing requires a  filename  or an  attachment_filename  to be\nprovided. \n ETags will also be attached automatically if a  filename  is provided. You\ncan turn this off by setting  add_etags=False . \n If  conditional=True  and  filename  is provided, this method will try to\nupgrade the response stream to support range requests.  This will allow\nthe request to be answered with partial content response. \n Please never pass filenames to this function from user sources;\nyou should use  send_from_directory()  instead. \n \n Changed in version 1.0:  UTF-8 filenames, as specified in  RFC 2231 , are supported. \n \n \n Changelog \n Changed in version 0.12:  The filename is no longer automatically inferred from file objects. If\nyou want to use automatic mimetype and etag support, pass a filepath via\n filename_or_fp  or  attachment_filename . \n \n \n Changed in version 0.12:  The  attachment_filename  is preferred over  filename  for MIME-type\ndetection. \n \n \n Changed in version 0.9:  cache_timeout pulls its default from application config, when None. \n \n \n Changed in version 0.7:  mimetype guessing and etag support for file objects was\ndeprecated because it was unreliable.  Pass a filename if you are\nable to, otherwise attach an etag yourself.  This functionality\nwill be removed in Flask 1.0 \n \n \n New in version 0.5:  The  add_etags ,  cache_timeout  and  conditional  parameters were\nadded.  The default behavior is now to attach etags. \n \n \n New in version 0.2. \n \n \n \n \n \n Parameters: \n filename_or_fp  \u2013 the filename of the file to send.\nThis is relative to the  root_path \nif a relative path is specified.\nAlternatively a file object might be provided in\nwhich case  X-Sendfile  might not work and fall\nback to the traditional method.  Make sure that the\nfile pointer is positioned at the start of data to\nsend before calling  send_file() . \n mimetype  \u2013 the mimetype of the file if provided. If a file path is\ngiven, auto detection happens as fallback, otherwise an\nerror will be raised. \n as_attachment  \u2013 set to  True  if you want to send this file with\na  Content-Disposition:   attachment  header. \n attachment_filename  \u2013 the filename for the attachment if it\ndiffers from the file\u2019s filename. \n add_etags  \u2013 set to  False  to disable attaching of etags. \n conditional  \u2013 set to  True  to enable conditional responses. \n cache_timeout  \u2013 the timeout in seconds for the headers. When  None \n(default), this value is set by\n get_send_file_max_age()  of\n current_app . \n last_modified  \u2013 set the  Last-Modified  header to this value,\na  datetime  or timestamp.\nIf a file was passed, this overrides its mtime. \n \n \n \n \n \n \n\n \n \n flask. send_from_directory ( directory ,  filename ,  **options ) \u00b6 \n Send a file from a given directory with  send_file() .  This\nis a secure way to quickly expose static files from an upload folder\nor something similar. \n Example usage: \n @app . route ( '/uploads/<path:filename>' ) \n def   download_file ( filename ): \n     return   send_from_directory ( app . config [ 'UPLOAD_FOLDER' ], \n                                filename ,   as_attachment = True ) \n \n \n \n Sending files and Performance \n It is strongly recommended to activate either  X-Sendfile  support in\nyour webserver or (if no authentication happens) to tell the webserver\nto serve files for the given path on its own without calling into the\nweb application for improved performance. \n \n \n Changelog \n New in version 0.5. \n \n \n \n \n \n Parameters: \n directory  \u2013 the directory where all the files are stored. \n filename  \u2013 the filename relative to that directory to\ndownload. \n options  \u2013 optional keyword arguments that are directly\nforwarded to  send_file() . \n \n \n \n \n \n \n\n \n \n flask. safe_join ( directory ,  *pathnames ) \u00b6 \n Safely join  directory  and zero or more untrusted  pathnames \ncomponents. \n Example usage: \n @app . route ( '/wiki/<path:filename>' ) \n def   wiki_page ( filename ): \n     filename   =   safe_join ( app . config [ 'WIKI_FOLDER' ],   filename ) \n     with   open ( filename ,   'rb' )   as   fd : \n         content   =   fd . read ()    # Read and process the file content... \n \n \n \n \n \n \n Parameters: \n directory  \u2013 the trusted base directory. \n pathnames  \u2013 the untrusted pathnames relative to that directory. \n \n \n \n Raises: NotFound  if one or more passed\npaths fall out of its boundaries. \n \n \n \n \n \n\n \n \n flask. escape ( s )  \u2192 markup \u00b6 \n Convert the characters &, <, >, \u2018, and \u201d in string s to HTML-safe\nsequences.  Use this if you need to display text that might contain\nsuch characters in HTML.  Marks return value as markup string. \n \n\n \n \n class  flask. Markup \u00b6 \n Marks a string as being safe for inclusion in HTML/XML output without\nneeding to be escaped.  This implements the  __html__  interface a couple\nof frameworks and web applications use.   Markup  is a direct\nsubclass of  unicode  and provides all the methods of  unicode  just that\nit escapes arguments passed and always returns  Markup . \n The  escape  function returns markup objects so that double escaping can\u2019t\nhappen. \n The constructor of the  Markup  class can be used for three\ndifferent things:  When passed an unicode object it\u2019s assumed to be safe,\nwhen passed an object with an HTML representation (has an  __html__ \nmethod) that representation is used, otherwise the object passed is\nconverted into a unicode string and then assumed to be safe: \n >>>  Markup ( \"Hello <em>World</em>!\" ) \n Markup(u'Hello <em>World</em>!') \n >>>  class   Foo ( object ): \n ...    def   __html__ ( self ): \n ...     return   '<a href=\"#\">foo</a>' \n ... \n >>>  Markup ( Foo ()) \n Markup(u'<a href=\"#\">foo</a>') \n \n \n If you want object passed being always treated as unsafe you can use the\n escape()  classmethod to create a  Markup  object: \n >>>  Markup . escape ( \"Hello <em>World</em>!\" ) \n Markup(u'Hello &lt;em&gt;World&lt;/em&gt;!') \n \n \n Operations on a markup string are markup aware which means that all\narguments are passed through the  escape()  function: \n >>>  em   =   Markup ( \"<em> %s </em>\" ) \n >>>  em   %   \"foo & bar\" \n Markup(u'<em>foo &amp; bar</em>') \n >>>  strong   =   Markup ( \"<strong> %(text)s </strong>\" ) \n >>>  strong   %   { 'text' :   '<blink>hacker here</blink>' } \n Markup(u'<strong>&lt;blink&gt;hacker here&lt;/blink&gt;</strong>') \n >>>  Markup ( \"<em>Hello</em> \" )   +   \"<foo>\" \n Markup(u'<em>Hello</em> &lt;foo&gt;') \n \n \n \n \n classmethod  escape ( s ) \u00b6 \n Escape the string.  Works like  escape()  with the difference\nthat for subclasses of  Markup  this function would return the\ncorrect subclass. \n \n\n \n \n striptags ( ) \u00b6 \n Unescape markup into an text_type string and strip all tags.  This\nalso resolves known HTML4 and XHTML entities.  Whitespace is\nnormalized to one: \n >>>  Markup ( \"Main &raquo;  <em>About</em>\" ) . striptags () \n u'Main \\xbb About' \n \n \n \n\n \n \n unescape ( ) \u00b6 \n Unescape markup again into an text_type string.  This also resolves\nknown HTML4 and XHTML entities: \n >>>  Markup ( \"Main &raquo; <em>About</em>\" ) . unescape () \n u'Main \\xbb <em>About</em>' \n \n \n \n\n \n\n \n \n Message Flashing \u00b6 \n \n \n flask. flash ( message ,  category='message' ) \u00b6 \n Flashes a message to the next request.  In order to remove the\nflashed message from the session and to display it to the user,\nthe template has to call  get_flashed_messages() . \n \n Changelog \n Changed in version 0.3:  category  parameter added. \n \n \n \n \n \n Parameters: \n message  \u2013 the message to be flashed. \n category  \u2013 the category for the message.  The following values\nare recommended:  'message'  for any kind of message,\n 'error'  for errors,  'info'  for information\nmessages and  'warning'  for warnings.  However any\nkind of string can be used as category. \n \n \n \n \n \n \n\n \n \n flask. get_flashed_messages ( with_categories=False ,  category_filter=[] ) \u00b6 \n Pulls all flashed messages from the session and returns them.\nFurther calls in the same request to the function will return\nthe same messages.  By default just the messages are returned,\nbut when  with_categories  is set to  True , the return value will\nbe a list of tuples in the form  (category,   message)  instead. \n Filter the flashed messages to one or more categories by providing those\ncategories in  category_filter .  This allows rendering categories in\nseparate html blocks.  The  with_categories  and  category_filter \narguments are distinct: \n \n with_categories  controls whether categories are returned with message\ntext ( True  gives a tuple, where  False  gives just the message text). \n category_filter  filters the messages down to only those matching the\nprovided categories. \n \n See  Message Flashing  for examples. \n \n Changelog \n Changed in version 0.9:  category_filter  parameter added. \n \n \n Changed in version 0.3:  with_categories  parameter added. \n \n \n \n \n \n Parameters: \n with_categories  \u2013 set to  True  to also receive categories. \n category_filter  \u2013 whitelist of categories to limit return values \n \n \n \n \n \n \n\n \n \n JSON Support \u00b6 \n Flask uses  simplejson  for the JSON implementation.  Since simplejson\nis provided by both the standard library as well as extension, Flask will\ntry simplejson first and then fall back to the stdlib json module.  On top\nof that it will delegate access to the current application\u2019s JSON encoders\nand decoders for easier customization. \n So for starters instead of doing: \n try : \n     import   simplejson   as   json \n except   ImportError : \n     import   json \n \n \n You can instead just do this: \n from   flask   import   json \n \n \n For usage examples, read the  json  documentation in the standard\nlibrary.  The following extensions are by default applied to the stdlib\u2019s\nJSON module: \n \n datetime  objects are serialized as  RFC 822  strings. \n Any object with an  __html__  method (like  Markup )\nwill have that method called and then the return value is serialized\nas string. \n \n The  htmlsafe_dumps()  function of this json module is also available\nas filter called  |tojson  in Jinja2.  Note that inside  script \ntags no escaping must take place, so make sure to disable escaping\nwith  |safe  if you intend to use it inside  script  tags unless\nyou are using Flask 0.10 which implies that: \n < script   type = text/javascript > \n     doSomethingWith ( {{   user.username | tojson | safe   }} ); \n </ script > \n \n \n \n Auto-Sort JSON Keys \n The configuration variable  JSON_SORT_KEYS  ( Configuration Handling ) can be\nset to false to stop Flask from auto-sorting keys.  By default sorting\nis enabled and outside of the app context sorting is turned on. \n Notice that disabling key sorting can cause issues when using content\nbased HTTP caches and Python\u2019s hash randomization feature. \n \n \n \n flask.json. jsonify ( *args ,  **kwargs ) \u00b6 \n This function wraps  dumps()  to add a few enhancements that make\nlife easier.  It turns the JSON output into a  Response \nobject with the  application/json  mimetype.  For convenience, it\nalso converts multiple arguments into an array or multiple keyword arguments\ninto a dict.  This means that both  jsonify(1,2,3)  and\n jsonify([1,2,3])  serialize to  [1,2,3] . \n For clarity, the JSON serialization behavior has the following differences\nfrom  dumps() : \n \n Single argument: Passed straight through to  dumps() . \n Multiple arguments: Converted to an array before being passed to\n dumps() . \n Multiple keyword arguments: Converted to a dict before being passed to\n dumps() . \n Both args and kwargs: Behavior undefined and will throw an exception. \n \n Example usage: \n from   flask   import   jsonify \n\n @app . route ( '/_get_current_user' ) \n def   get_current_user (): \n     return   jsonify ( username = g . user . username , \n                    email = g . user . email , \n                    id = g . user . id ) \n \n \n This will send a JSON response like this to the browser: \n { \n     \"username\" :   \"admin\" , \n     \"email\" :   \"admin@localhost\" , \n     \"id\" :   42 \n } \n \n \n \n Changelog \n Changed in version 0.11:  Added support for serializing top-level arrays. This introduces a\nsecurity risk in ancient browsers. See  JSON Security  for details. \n \n This function\u2019s response will be pretty printed if the\n JSONIFY_PRETTYPRINT_REGULAR  config parameter is set to True or the\nFlask app is running in debug mode. Compressed (not pretty) formatting\ncurrently means no indents and no spaces after separators. \n \n Changelog \n New in version 0.2. \n \n \n\n \n \n flask.json. dumps ( obj ,  **kwargs ) \u00b6 \n Serialize  obj  to a JSON formatted  str  by using the application\u2019s\nconfigured encoder ( json_encoder ) if there is an\napplication on the stack. \n This function can return  unicode  strings or ascii-only bytestrings by\ndefault which coerce into unicode strings automatically.  That behavior by\ndefault is controlled by the  JSON_AS_ASCII  configuration variable\nand can be overridden by the simplejson  ensure_ascii  parameter. \n \n\n \n \n flask.json. dump ( obj ,  fp ,  **kwargs ) \u00b6 \n Like  dumps()  but writes into a file object. \n \n\n \n \n flask.json. loads ( s ,  **kwargs ) \u00b6 \n Unserialize a JSON object from a string  s  by using the application\u2019s\nconfigured decoder ( json_decoder ) if there is an\napplication on the stack. \n \n\n \n \n flask.json. load ( fp ,  **kwargs ) \u00b6 \n Like  loads()  but reads from a file object. \n \n\n \n \n class  flask.json. JSONEncoder ( * ,  skipkeys=False ,  ensure_ascii=True ,  check_circular=True ,  allow_nan=True ,  sort_keys=False ,  indent=None ,  separators=None ,  default=None ) \u00b6 \n The default Flask JSON encoder.  This one extends the default simplejson\nencoder by also supporting  datetime  objects,  UUID  as well as\n Markup  objects which are serialized as RFC 822 datetime strings (same\nas the HTTP date format).  In order to support more data types override the\n default()  method. \n \n \n default ( o ) \u00b6 \n Implement this method in a subclass such that it returns a\nserializable object for  o , or calls the base implementation (to\nraise a  TypeError ). \n For example, to support arbitrary iterators, you could implement\ndefault like this: \n def   default ( self ,   o ): \n     try : \n         iterable   =   iter ( o ) \n     except   TypeError : \n         pass \n     else : \n         return   list ( iterable ) \n     return   JSONEncoder . default ( self ,   o ) \n \n \n \n\n \n\n \n \n class  flask.json. JSONDecoder ( * ,  object_hook=None ,  parse_float=None ,  parse_int=None ,  parse_constant=None ,  strict=True ,  object_pairs_hook=None ) \u00b6 \n The default JSON decoder.  This one does not change the behavior from\nthe default simplejson decoder.  Consult the  json  documentation\nfor more information.  This decoder is not only used for the load\nfunctions of this module but also  Request . \n \n\n \n Tagged JSON \u00b6 \n A compact representation for lossless serialization of non-standard JSON types.\n SecureCookieSessionInterface  uses this to serialize\nthe session data, but it may be useful in other places. It can be extended to\nsupport other types. \n \n \n class  flask.json.tag. TaggedJSONSerializer \u00b6 \n Serializer that uses a tag system to compactly represent objects that\nare not JSON types. Passed as the intermediate serializer to\n itsdangerous.Serializer . \n The following extra types are supported: \n \n dict \n tuple \n bytes \n Markup \n UUID \n datetime \n \n \n \n default_tags  = [<class 'flask.json.tag.TagDict'>, <class 'flask.json.tag.PassDict'>, <class 'flask.json.tag.TagTuple'>, <class 'flask.json.tag.PassList'>, <class 'flask.json.tag.TagBytes'>, <class 'flask.json.tag.TagMarkup'>, <class 'flask.json.tag.TagUUID'>, <class 'flask.json.tag.TagDateTime'>] \u00b6 \n Tag classes to bind when creating the serializer. Other tags can be\nadded later using  register() . \n \n\n \n \n dumps ( value ) \u00b6 \n Tag the value and dump it to a compact JSON string. \n \n\n \n \n loads ( value ) \u00b6 \n Load data from a JSON string and deserialized any tagged objects. \n \n\n \n \n register ( tag_class ,  force=False ,  index=None ) \u00b6 \n Register a new tag with this serializer. \n \n \n \n \n Parameters: \n tag_class  \u2013 tag class to register. Will be instantiated with this\nserializer instance. \n force  \u2013 overwrite an existing tag. If false (default), a\n KeyError  is raised. \n index  \u2013 index to insert the new tag in the tag order. Useful when\nthe new tag is a special case of an existing tag. If  None \n(default), the tag is appended to the end of the order. \n \n \n \n Raises: KeyError  \u2013 if the tag key is already registered and  force  is\nnot true. \n \n \n \n \n \n\n \n \n tag ( value ) \u00b6 \n Convert a value to a tagged representation if necessary. \n \n\n \n \n untag ( value ) \u00b6 \n Convert a tagged representation back to the original type. \n \n\n \n\n \n \n class  flask.json.tag. JSONTag ( serializer ) \u00b6 \n Base class for defining type tags for  TaggedJSONSerializer . \n \n \n check ( value ) \u00b6 \n Check if the given value should be tagged by this tag. \n \n\n \n \n key  = None \u00b6 \n The tag to mark the serialized object with. If  None , this tag is\nonly used as an intermediate step during tagging. \n \n\n \n \n tag ( value ) \u00b6 \n Convert the value to a valid JSON type and add the tag structure\naround it. \n \n\n \n \n to_json ( value ) \u00b6 \n Convert the Python object to an object that is a valid JSON type.\nThe tag will be added later. \n \n\n \n \n to_python ( value ) \u00b6 \n Convert the JSON representation back to the correct type. The tag\nwill already be removed. \n \n\n \n\n Let\u2019s seen an example that adds support for  OrderedDict .\nDicts don\u2019t have an order in Python or JSON, so to handle this we will dump\nthe items as a list of  [key,   value]  pairs. Subclass  JSONTag  and\ngive it the new key  '   od'  to identify the type. The session serializer\nprocesses dicts first, so insert the new tag at the front of the order since\n OrderedDict  must be processed before  dict . \n from   flask.json.tag   import   JSONTag \n\n class   TagOrderedDict ( JSONTag ): \n     __slots__   =   ( 'serializer' ,) \n     key   =   ' od' \n\n     def   check ( self ,   value ): \n         return   isinstance ( value ,   OrderedDict ) \n\n     def   to_json ( self ,   value ): \n         return   [[ k ,   self . serializer . tag ( v )]   for   k ,   v   in   iteritems ( value )] \n\n     def   to_python ( self ,   value ): \n         return   OrderedDict ( value ) \n\n app . session_interface . serializer . register ( TagOrderedDict ,   index = 0 ) \n \n \n \n \n \n Template Rendering \u00b6 \n \n \n flask. render_template ( template_name_or_list ,  **context ) \u00b6 \n Renders a template from the template folder with the given\ncontext. \n \n \n \n \n Parameters: \n template_name_or_list  \u2013 the name of the template to be\nrendered, or an iterable with template names\nthe first one existing will be rendered \n context  \u2013 the variables that should be available in the\ncontext of the template. \n \n \n \n \n \n \n\n \n \n flask. render_template_string ( source ,  **context ) \u00b6 \n Renders a template from the given template source string\nwith the given context. Template variables will be autoescaped. \n \n \n \n \n Parameters: \n source  \u2013 the source code of the template to be\nrendered \n context  \u2013 the variables that should be available in the\ncontext of the template. \n \n \n \n \n \n \n\n \n \n flask. get_template_attribute ( template_name ,  attribute ) \u00b6 \n Loads a macro (or variable) a template exports.  This can be used to\ninvoke a macro from within Python code.  If you for example have a\ntemplate named  _cider.html  with the following contents: \n {%   macro   hello ( name )   %} Hello  {{   name   }} ! {%   endmacro   %} \n \n \n You can access this from Python code like this: \n hello   =   get_template_attribute ( '_cider.html' ,   'hello' ) \n return   hello ( 'World' ) \n \n \n \n Changelog \n New in version 0.2. \n \n \n \n \n \n Parameters: \n template_name  \u2013 the name of the template \n attribute  \u2013 the name of the variable of macro to access \n \n \n \n \n \n \n\n \n \n Configuration \u00b6 \n \n \n class  flask. Config ( root_path ,  defaults=None ) \u00b6 \n Works exactly like a dict but provides ways to fill it from files\nor special dictionaries.  There are two common patterns to populate the\nconfig. \n Either you can fill the config from a config file: \n app . config . from_pyfile ( 'yourconfig.cfg' ) \n \n \n Or alternatively you can define the configuration options in the\nmodule that calls  from_object()  or provide an import path to\na module that should be loaded.  It is also possible to tell it to\nuse the same module and with that provide the configuration values\njust before the call: \n DEBUG   =   True \n SECRET_KEY   =   'development key' \n app . config . from_object ( __name__ ) \n \n \n In both cases (loading from any Python file or loading from modules),\nonly uppercase keys are added to the config.  This makes it possible to use\nlowercase values in the config file for temporary values that are not added\nto the config or to define the config keys in the same file that implements\nthe application. \n Probably the most interesting way to load configurations is from an\nenvironment variable pointing to a file: \n app . config . from_envvar ( 'YOURAPPLICATION_SETTINGS' ) \n \n \n In this case before launching the application you have to set this\nenvironment variable to the file you want to use.  On Linux and OS X\nuse the export statement: \n export   YOURAPPLICATION_SETTINGS = '/path/to/config/file' \n \n \n On windows use  set  instead. \n \n \n \n \n Parameters: \n root_path  \u2013 path to which files are read relative from.  When the\nconfig object is created by the application, this is\nthe application\u2019s  root_path . \n defaults  \u2013 an optional dictionary of default values \n \n \n \n \n \n \n \n from_envvar ( variable_name ,  silent=False ) \u00b6 \n Loads a configuration from an environment variable pointing to\na configuration file.  This is basically just a shortcut with nicer\nerror messages for this line of code: \n app . config . from_pyfile ( os . environ [ 'YOURAPPLICATION_SETTINGS' ]) \n \n \n \n \n \n \n Parameters: \n variable_name  \u2013 name of the environment variable \n silent  \u2013 set to  True  if you want silent failure for missing\nfiles. \n \n \n \n Returns: bool.  True  if able to load config,  False  otherwise. \n \n \n \n \n \n\n \n \n from_json ( filename ,  silent=False ) \u00b6 \n Updates the values in the config from a JSON file. This function\nbehaves as if the JSON object was a dictionary and passed to the\n from_mapping()  function. \n \n \n \n \n Parameters: \n filename  \u2013 the filename of the JSON file.  This can either be an\nabsolute filename or a filename relative to the\nroot path. \n silent  \u2013 set to  True  if you want silent failure for missing\nfiles. \n \n \n \n \n \n \n Changelog \n New in version 0.11. \n \n \n\n \n \n from_mapping ( *mapping ,  **kwargs ) \u00b6 \n Updates the config like  update()  ignoring items with non-upper\nkeys. \n \n Changelog \n New in version 0.11. \n \n \n\n \n \n from_object ( obj ) \u00b6 \n Updates the values from the given object.  An object can be of one\nof the following two types: \n \n a string: in this case the object with that name will be imported \n an actual object reference: that object is used directly \n \n Objects are usually either modules or classes.  from_object() \nloads only the uppercase attributes of the module/class. A  dict \nobject will not work with  from_object()  because the keys of a\n dict  are not attributes of the  dict  class. \n Example of module-based configuration: \n app . config . from_object ( 'yourapplication.default_config' ) \n from   yourapplication   import   default_config \n app . config . from_object ( default_config ) \n \n \n You should not use this function to load the actual configuration but\nrather configuration defaults.  The actual config should be loaded\nwith  from_pyfile()  and ideally from a location not within the\npackage because the package might be installed system wide. \n See  Development / Production  for an example of class-based configuration\nusing  from_object() . \n \n \n \n \n Parameters: obj  \u2013 an import name or object \n \n \n \n \n\n \n \n from_pyfile ( filename ,  silent=False ) \u00b6 \n Updates the values in the config from a Python file.  This function\nbehaves as if the file was imported as module with the\n from_object()  function. \n \n \n \n \n Parameters: \n filename  \u2013 the filename of the config.  This can either be an\nabsolute filename or a filename relative to the\nroot path. \n silent  \u2013 set to  True  if you want silent failure for missing\nfiles. \n \n \n \n \n \n \n Changelog \n New in version 0.7:  silent  parameter. \n \n \n\n \n \n get_namespace ( namespace ,  lowercase=True ,  trim_namespace=True ) \u00b6 \n Returns a dictionary containing a subset of configuration options\nthat match the specified namespace/prefix. Example usage: \n app . config [ 'IMAGE_STORE_TYPE' ]   =   'fs' \n app . config [ 'IMAGE_STORE_PATH' ]   =   '/var/app/images' \n app . config [ 'IMAGE_STORE_BASE_URL' ]   =   'http://img.website.com' \n image_store_config   =   app . config . get_namespace ( 'IMAGE_STORE_' ) \n \n \n The resulting dictionary  image_store_config  would look like: \n { \n     'type' :   'fs' , \n     'path' :   '/var/app/images' , \n     'base_url' :   'http://img.website.com' \n } \n \n \n This is often useful when configuration options map directly to\nkeyword arguments in functions or class constructors. \n \n \n \n \n Parameters: \n namespace  \u2013 a configuration namespace \n lowercase  \u2013 a flag indicating if the keys of the resulting\ndictionary should be lowercase \n trim_namespace  \u2013 a flag indicating if the keys of the resulting\ndictionary should not include the namespace \n \n \n \n \n \n \n Changelog \n New in version 0.11. \n \n \n\n \n\n \n \n Stream Helpers \u00b6 \n \n \n flask. stream_with_context ( generator_or_function ) \u00b6 \n Request contexts disappear when the response is started on the server.\nThis is done for efficiency reasons and to make it less likely to encounter\nmemory leaks with badly written WSGI middlewares.  The downside is that if\nyou are using streamed responses, the generator cannot access request bound\ninformation any more. \n This function however can help you keep the context around for longer: \n from   flask   import   stream_with_context ,   request ,   Response \n\n @app . route ( '/stream' ) \n def   streamed_response (): \n     @stream_with_context \n     def   generate (): \n         yield   'Hello ' \n         yield   request . args [ 'name' ] \n         yield   '!' \n     return   Response ( generate ()) \n \n \n Alternatively it can also be used around a specific generator: \n from   flask   import   stream_with_context ,   request ,   Response \n\n @app . route ( '/stream' ) \n def   streamed_response (): \n     def   generate (): \n         yield   'Hello ' \n         yield   request . args [ 'name' ] \n         yield   '!' \n     return   Response ( stream_with_context ( generate ())) \n \n \n \n Changelog \n New in version 0.9. \n \n \n\n \n \n Useful Internals \u00b6 \n \n \n class  flask.ctx. RequestContext ( app ,  environ ,  request=None ) \u00b6 \n The request context contains all request relevant information.  It is\ncreated at the beginning of the request and pushed to the\n _request_ctx_stack  and removed at the end of it.  It will create the\nURL adapter and request object for the WSGI environment provided. \n Do not attempt to use this class directly, instead use\n test_request_context()  and\n request_context()  to create this object. \n When the request context is popped, it will evaluate all the\nfunctions registered on the application for teardown execution\n( teardown_request() ). \n The request context is automatically popped at the end of the request\nfor you.  In debug mode the request context is kept around if\nexceptions happen so that interactive debuggers have a chance to\nintrospect the data.  With 0.4 this can also be forced for requests\nthat did not fail and outside of  DEBUG  mode.  By setting\n 'flask._preserve_context'  to  True  on the WSGI environment the\ncontext will not pop itself at the end of the request.  This is used by\nthe  test_client()  for example to implement the\ndeferred cleanup functionality. \n You might find this helpful for unittests where you need the\ninformation from the context local around for a little longer.  Make\nsure to properly  pop()  the stack yourself in\nthat situation, otherwise your unittests will leak memory. \n \n \n copy ( ) \u00b6 \n Creates a copy of this request context with the same request object.\nThis can be used to move a request context to a different greenlet.\nBecause the actual request object is the same this cannot be used to\nmove a request context to a different thread unless access to the\nrequest object is locked. \n \n Changelog \n New in version 0.10. \n \n \n\n \n \n match_request ( ) \u00b6 \n Can be overridden by a subclass to hook into the matching\nof the request. \n \n\n \n \n pop ( exc=<object object> ) \u00b6 \n Pops the request context and unbinds it by doing that.  This will\nalso trigger the execution of functions registered by the\n teardown_request()  decorator. \n \n Changelog \n Changed in version 0.9:  Added the  exc  argument. \n \n \n\n \n \n push ( ) \u00b6 \n Binds the request context to the current context. \n \n\n \n\n \n \n flask. _request_ctx_stack \u00b6 \n The internal  LocalStack  that holds\n RequestContext  instances. Typically, the\n request  and  session  proxies should be accessed\ninstead of the stack. It may be useful to access the stack in\nextension code. \n The following attributes are always present on each layer of the\nstack: \n \n app \n the active Flask application. \n url_adapter \n the URL adapter that was used to match the request. \n request \n the current request object. \n session \n the active session object. \n g \n an object with all the attributes of the  flask.g  object. \n flashes \n an internal cache for the flashed messages. \n \n Example usage: \n from   flask   import   _request_ctx_stack \n\n def   get_session (): \n     ctx   =   _request_ctx_stack . top \n     if   ctx   is   not   None : \n         return   ctx . session \n \n \n \n\n \n \n class  flask.ctx. AppContext ( app ) \u00b6 \n The application context binds an application object implicitly\nto the current thread or greenlet, similar to how the\n RequestContext  binds request information.  The application\ncontext is also implicitly created if a request context is created\nbut the application is not on top of the individual application\ncontext. \n \n \n pop ( exc=<object object> ) \u00b6 \n Pops the app context. \n \n\n \n \n push ( ) \u00b6 \n Binds the app context to the current context. \n \n\n \n\n \n \n flask. _app_ctx_stack \u00b6 \n The internal  LocalStack  that holds\n AppContext  instances. Typically, the\n current_app  and  g  proxies should be accessed instead\nof the stack. Extensions can access the contexts on the stack as a\nnamespace to store data. \n \n Changelog \n New in version 0.9. \n \n \n\n \n \n class  flask.blueprints. BlueprintSetupState ( blueprint ,  app ,  options ,  first_registration ) \u00b6 \n Temporary holder object for registering a blueprint with the\napplication.  An instance of this class is created by the\n make_setup_state()  method and later passed\nto all register callback functions. \n \n \n add_url_rule ( rule ,  endpoint=None ,  view_func=None ,  **options ) \u00b6 \n A helper method to register a rule (and optionally a view function)\nto the application.  The endpoint is automatically prefixed with the\nblueprint\u2019s name. \n \n\n \n \n app  = None \u00b6 \n a reference to the current application \n \n\n \n \n blueprint  = None \u00b6 \n a reference to the blueprint that created this setup state. \n \n\n \n \n first_registration  = None \u00b6 \n as blueprints can be registered multiple times with the\napplication and not everything wants to be registered\nmultiple times on it, this attribute can be used to figure\nout if the blueprint was registered in the past already. \n \n\n \n \n options  = None \u00b6 \n a dictionary with all options that were passed to the\n register_blueprint()  method. \n \n\n \n \n subdomain  = None \u00b6 \n The subdomain that the blueprint should be active for,  None \notherwise. \n \n\n \n \n url_defaults  = None \u00b6 \n A dictionary with URL defaults that is added to each and every\nURL that was defined with the blueprint. \n \n\n \n \n url_prefix  = None \u00b6 \n The prefix that should be used for all URLs defined on the\nblueprint. \n \n\n \n\n \n \n Signals \u00b6 \n \n Changelog \n New in version 0.6. \n \n \n \n signals. signals_available \u00b6 \n True  if the signaling system is available.  This is the case\nwhen  blinker  is installed. \n \n\n The following signals exist in Flask: \n \n \n flask. template_rendered \u00b6 \n This signal is sent when a template was successfully rendered.  The\nsignal is invoked with the instance of the template as  template \nand the context as dictionary (named  context ). \n Example subscriber: \n def   log_template_renders ( sender ,   template ,   context ,   ** extra ): \n     sender . logger . debug ( 'Rendering template \" %s \" with context  %s ' , \n                         template . name   or   'string template' , \n                         context ) \n\n from   flask   import   template_rendered \n template_rendered . connect ( log_template_renders ,   app ) \n \n \n \n\n \n \n flask. before_render_template \n This signal is sent before template rendering process. The\nsignal is invoked with the instance of the template as  template \nand the context as dictionary (named  context ). \n Example subscriber: \n def   log_template_renders ( sender ,   template ,   context ,   ** extra ): \n     sender . logger . debug ( 'Rendering template \" %s \" with context  %s ' , \n                         template . name   or   'string template' , \n                         context ) \n\n from   flask   import   before_render_template \n before_render_template . connect ( log_template_renders ,   app ) \n \n \n \n\n \n \n flask. request_started \u00b6 \n This signal is sent when the request context is set up, before\nany request processing happens.  Because the request context is already\nbound, the subscriber can access the request with the standard global\nproxies such as  request . \n Example subscriber: \n def   log_request ( sender ,   ** extra ): \n     sender . logger . debug ( 'Request context is set up' ) \n\n from   flask   import   request_started \n request_started . connect ( log_request ,   app ) \n \n \n \n\n \n \n flask. request_finished \u00b6 \n This signal is sent right before the response is sent to the client.\nIt is passed the response to be sent named  response . \n Example subscriber: \n def   log_response ( sender ,   response ,   ** extra ): \n     sender . logger . debug ( 'Request context is about to close down.  ' \n                         'Response:  %s ' ,   response ) \n\n from   flask   import   request_finished \n request_finished . connect ( log_response ,   app ) \n \n \n \n\n \n \n flask. got_request_exception \u00b6 \n This signal is sent when an exception happens during request processing.\nIt is sent  before  the standard exception handling kicks in and even\nin debug mode, where no exception handling happens.  The exception\nitself is passed to the subscriber as  exception . \n Example subscriber: \n def   log_exception ( sender ,   exception ,   ** extra ): \n     sender . logger . debug ( 'Got exception during processing:  %s ' ,   exception ) \n\n from   flask   import   got_request_exception \n got_request_exception . connect ( log_exception ,   app ) \n \n \n \n\n \n \n flask. request_tearing_down \u00b6 \n This signal is sent when the request is tearing down.  This is always\ncalled, even if an exception is caused.  Currently functions listening\nto this signal are called after the regular teardown handlers, but this\nis not something you can rely on. \n Example subscriber: \n def   close_db_connection ( sender ,   ** extra ): \n     session . close () \n\n from   flask   import   request_tearing_down \n request_tearing_down . connect ( close_db_connection ,   app ) \n \n \n As of Flask 0.9, this will also be passed an  exc  keyword argument\nthat has a reference to the exception that caused the teardown if\nthere was one. \n \n\n \n \n flask. appcontext_tearing_down \u00b6 \n This signal is sent when the app context is tearing down.  This is always\ncalled, even if an exception is caused.  Currently functions listening\nto this signal are called after the regular teardown handlers, but this\nis not something you can rely on. \n Example subscriber: \n def   close_db_connection ( sender ,   ** extra ): \n     session . close () \n\n from   flask   import   appcontext_tearing_down \n appcontext_tearing_down . connect ( close_db_connection ,   app ) \n \n \n This will also be passed an  exc  keyword argument that has a reference\nto the exception that caused the teardown if there was one. \n \n\n \n \n flask. appcontext_pushed \u00b6 \n This signal is sent when an application context is pushed.  The sender\nis the application.  This is usually useful for unittests in order to\ntemporarily hook in information.  For instance it can be used to\nset a resource early onto the  g  object. \n Example usage: \n from   contextlib   import   contextmanager \n from   flask   import   appcontext_pushed \n\n @contextmanager \n def   user_set ( app ,   user ): \n     def   handler ( sender ,   ** kwargs ): \n         g . user   =   user \n     with   appcontext_pushed . connected_to ( handler ,   app ): \n         yield \n \n \n And in the testcode: \n def   test_user_me ( self ): \n     with   user_set ( app ,   'john' ): \n         c   =   app . test_client () \n         resp   =   c . get ( '/users/me' ) \n         assert   resp . data   ==   'username=john' \n \n \n \n Changelog \n New in version 0.10. \n \n \n\n \n \n flask. appcontext_popped \u00b6 \n This signal is sent when an application context is popped.  The sender\nis the application.  This usually falls in line with the\n appcontext_tearing_down  signal. \n \n Changelog \n New in version 0.10. \n \n \n\n \n \n flask. message_flashed \u00b6 \n This signal is sent when the application is flashing a message.  The\nmessages is sent as  message  keyword argument and the category as\n category . \n Example subscriber: \n recorded   =   [] \n def   record ( sender ,   message ,   category ,   ** extra ): \n     recorded . append (( message ,   category )) \n\n from   flask   import   message_flashed \n message_flashed . connect ( record ,   app ) \n \n \n \n Changelog \n New in version 0.10. \n \n \n\n \n \n class  signals. Namespace \u00b6 \n An alias for  blinker.base.Namespace  if blinker is available,\notherwise a dummy class that creates fake signals.  This class is\navailable for Flask extensions that want to provide the same fallback\nsystem as Flask itself. \n \n \n signal ( name ,  doc=None ) \u00b6 \n Creates a new signal for this namespace if blinker is available,\notherwise returns a fake signal that has a send method that will\ndo nothing but will fail with a  RuntimeError  for all other\noperations, including connecting. \n \n\n \n\n \n \n Class-Based Views \u00b6 \n \n Changelog \n New in version 0.7. \n \n \n \n class  flask.views. View \u00b6 \n Alternative way to use view functions.  A subclass has to implement\n dispatch_request()  which is called with the view arguments from\nthe URL routing system.  If  methods  is provided the methods\ndo not have to be passed to the  add_url_rule() \nmethod explicitly: \n class   MyView ( View ): \n     methods   =   [ 'GET' ] \n\n     def   dispatch_request ( self ,   name ): \n         return   'Hello  %s !'   %   name \n\n app . add_url_rule ( '/hello/<name>' ,   view_func = MyView . as_view ( 'myview' )) \n \n \n When you want to decorate a pluggable view you will have to either do that\nwhen the view function is created (by wrapping the return value of\n as_view() ) or you can use the  decorators  attribute: \n class   SecretView ( View ): \n     methods   =   [ 'GET' ] \n     decorators   =   [ superuser_required ] \n\n     def   dispatch_request ( self ): \n         ... \n \n \n The decorators stored in the decorators list are applied one after another\nwhen the view function is created.  Note that you can  not  use the class\nbased decorators since those would decorate the view class and not the\ngenerated view function! \n \n \n classmethod  as_view ( name ,  *class_args ,  **class_kwargs ) \u00b6 \n Converts the class into an actual view function that can be used\nwith the routing system.  Internally this generates a function on the\nfly which will instantiate the  View  on each request and call\nthe  dispatch_request()  method on it. \n The arguments passed to  as_view()  are forwarded to the\nconstructor of the class. \n \n\n \n \n decorators  = () \u00b6 \n The canonical way to decorate class-based views is to decorate the\nreturn value of as_view().  However since this moves parts of the\nlogic from the class declaration to the place where it\u2019s hooked\ninto the routing system. \n You can place one or more decorators in this list and whenever the\nview function is created the result is automatically decorated. \n \n Changelog \n New in version 0.8. \n \n \n\n \n \n dispatch_request ( ) \u00b6 \n Subclasses have to override this method to implement the\nactual view function code.  This method is called with all\nthe arguments from the URL rule. \n \n\n \n \n methods  = None \u00b6 \n A list of methods this view can handle. \n \n\n \n \n provide_automatic_options  = None \u00b6 \n Setting this disables or force-enables the automatic options handling. \n \n\n \n\n \n \n class  flask.views. MethodView \u00b6 \n A class-based view that dispatches request methods to the corresponding\nclass methods. For example, if you implement a  get  method, it will be\nused to handle  GET  requests. \n class   CounterAPI ( MethodView ): \n     def   get ( self ): \n         return   session . get ( 'counter' ,   0 ) \n\n     def   post ( self ): \n         session [ 'counter' ]   =   session . get ( 'counter' ,   0 )   +   1 \n         return   'OK' \n\n app . add_url_rule ( '/counter' ,   view_func = CounterAPI . as_view ( 'counter' )) \n \n \n \n \n dispatch_request ( *args ,  **kwargs ) \u00b6 \n Subclasses have to override this method to implement the\nactual view function code.  This method is called with all\nthe arguments from the URL rule. \n \n\n \n\n \n \n URL Route Registrations \u00b6 \n Generally there are three ways to define rules for the routing system: \n \n You can use the  flask.Flask.route()  decorator. \n You can use the  flask.Flask.add_url_rule()  function. \n You can directly access the underlying Werkzeug routing system\nwhich is exposed as  flask.Flask.url_map . \n \n Variable parts in the route can be specified with angular brackets\n( /user/<username> ).  By default a variable part in the URL accepts any\nstring without a slash however a different converter can be specified as\nwell by using  <converter:name> . \n Variable parts are passed to the view function as keyword arguments. \n The following converters are available: \n \n \n \n \n \n \n string \n accepts any text without a slash (the default) \n \n int \n accepts integers \n \n float \n like  int  but for floating point values \n \n path \n like the default but also accepts slashes \n \n any \n matches one of the items provided \n \n uuid \n accepts UUID strings \n \n \n \n Custom converters can be defined using  flask.Flask.url_map . \n Here are some examples: \n @app . route ( '/' ) \n def   index (): \n     pass \n\n @app . route ( '/<username>' ) \n def   show_user ( username ): \n     pass \n\n @app . route ( '/post/<int:post_id>' ) \n def   show_post ( post_id ): \n     pass \n \n \n An important detail to keep in mind is how Flask deals with trailing\nslashes.  The idea is to keep each URL unique so the following rules\napply: \n \n If a rule ends with a slash and is requested without a slash by the\nuser, the user is automatically redirected to the same page with a\ntrailing slash attached. \n If a rule does not end with a trailing slash and the user requests the\npage with a trailing slash, a 404 not found is raised. \n \n This is consistent with how web servers deal with static files.  This\nalso makes it possible to use relative link targets safely. \n You can also define multiple rules for the same function.  They have to be\nunique however.  Defaults can also be specified.  Here for example is a\ndefinition for a URL that accepts an optional page: \n @app . route ( '/users/' ,   defaults = { 'page' :   1 }) \n @app . route ( '/users/page/<int:page>' ) \n def   show_users ( page ): \n     pass \n \n \n This specifies that  /users/  will be the URL for page one and\n /users/page/N  will be the URL for page  N . \n If a URL contains a default value, it will be redirected to its simpler\nform with a 301 redirect. In the above example,  /users/page/1  will\nbe redirected to  /users/ . If your route handles  GET  and  POST \nrequests, make sure the default route only handles  GET , as redirects\ncan\u2019t preserve form data. \n @app . route ( '/region/' ,   defaults = { 'id' :   1 }) \n @app . route ( '/region/<id>' ,   methods = [ 'GET' ,   'POST' ]) \n def   region ( id ): \n    pass \n \n \n Here are the parameters that  route()  and\n add_url_rule()  accept.  The only difference is that\nwith the route parameter the view function is defined with the decorator\ninstead of the  view_func  parameter. \n \n \n \n \n \n \n rule \n the URL rule as string \n \n endpoint \n the endpoint for the registered URL rule.  Flask itself\nassumes that the name of the view function is the name\nof the endpoint if not explicitly stated. \n \n view_func \n the function to call when serving a request to the\nprovided endpoint.  If this is not provided one can\nspecify the function later by storing it in the\n view_functions  dictionary with the\nendpoint as key. \n \n defaults \n A dictionary with defaults for this rule.  See the\nexample above for how defaults work. \n \n subdomain \n specifies the rule for the subdomain in case subdomain\nmatching is in use.  If not specified the default\nsubdomain is assumed. \n \n **options \n the options to be forwarded to the underlying\n Rule  object.  A change to\nWerkzeug is handling of method options.  methods is a list\nof methods this rule should be limited to ( GET ,  POST \netc.).  By default a rule just listens for  GET  (and\nimplicitly  HEAD ).  Starting with Flask 0.6,  OPTIONS  is\nimplicitly added and handled by the standard request\nhandling.  They have to be specified as keyword arguments. \n \n \n \n \n \n View Function Options \u00b6 \n For internal usage the view functions can have some attributes attached to\ncustomize behavior the view function would normally not have control over.\nThe following attributes can be provided optionally to either override\nsome defaults to  add_url_rule()  or general behavior: \n \n __name__ : The name of a function is by default used as endpoint.  If\nendpoint is provided explicitly this value is used.  Additionally this\nwill be prefixed with the name of the blueprint by default which\ncannot be customized from the function itself. \n methods : If methods are not provided when the URL rule is added,\nFlask will look on the view function object itself if a  methods \nattribute exists.  If it does, it will pull the information for the\nmethods from there. \n provide_automatic_options : if this attribute is set Flask will\neither force enable or disable the automatic implementation of the\nHTTP  OPTIONS  response.  This can be useful when working with\ndecorators that want to customize the  OPTIONS  response on a per-view\nbasis. \n required_methods : if this attribute is set, Flask will always add\nthese methods when registering a URL rule even if the methods were\nexplicitly overridden in the  route()  call. \n \n Full example: \n def   index (): \n     if   request . method   ==   'OPTIONS' : \n         # custom options handling here \n         ... \n     return   'Hello World!' \n index . provide_automatic_options   =   False \n index . methods   =   [ 'GET' ,   'OPTIONS' ] \n\n app . add_url_rule ( '/' ,   index ) \n \n \n \n Changelog \n New in version 0.8:  The  provide_automatic_options  functionality was added. \n \n \n \n Command Line Interface \u00b6 \n \n \n class  flask.cli. FlaskGroup ( add_default_commands=True ,  create_app=None ,  add_version_option=True ,  load_dotenv=True ,  **extra ) \u00b6 \n Special subclass of the  AppGroup  group that supports\nloading more commands from the configured Flask app.  Normally a\ndeveloper does not have to interface with this class but there are\nsome very advanced use cases for which it makes sense to create an\ninstance of this. \n For information as of why this is useful see  Custom Scripts . \n \n \n \n \n Parameters: \n add_default_commands  \u2013 if this is True then the default run and\nshell commands wil be added. \n add_version_option  \u2013 adds the  --version  option. \n create_app  \u2013 an optional callback that is passed the script info and\nreturns the loaded app. \n load_dotenv  \u2013 Load the nearest  .env  and  .flaskenv \nfiles to set environment variables. Will also change the working\ndirectory to the directory containing the first file found. \n \n \n \n \n \n \n Changed in version 1.0:  If installed, python-dotenv will be used to load environment variables\nfrom  .env  and  .flaskenv  files. \n \n \n Changelog \n \n get_command ( ctx ,  name ) \u00b6 \n Given a context and a command name, this returns a\n Command  object if it exists or returns  None . \n \n\n \n \n list_commands ( ctx ) \u00b6 \n Returns a list of subcommand names in the order they should\nappear. \n \n\n \n \n main ( *args ,  **kwargs ) \u00b6 \n This is the way to invoke a script with all the bells and\nwhistles as a command line application.  This will always terminate\nthe application after a call.  If this is not wanted,  SystemExit \nneeds to be caught. \n This method is also available by directly calling the instance of\na  Command . \n \n New in version 3.0:  Added the  standalone_mode  flag to control the standalone mode. \n \n \n Changelog \n \n \n \n Parameters: \n args  \u2013 the arguments that should be used for parsing.  If not\nprovided,  sys.argv[1:]  is used. \n prog_name  \u2013 the program name that should be used.  By default\nthe program name is constructed by taking the file\nname from  sys.argv[0] . \n complete_var  \u2013 the environment variable that controls the\nbash completion support.  The default is\n \"_<prog_name>_COMPLETE\"  with prog name in\nuppercase. \n standalone_mode  \u2013 the default behavior is to invoke the script\nin standalone mode.  Click will then\nhandle exceptions and convert them into\nerror messages and the function will never\nreturn but shut down the interpreter.  If\nthis is set to  False  they will be\npropagated to the caller and the return\nvalue of this function is the return value\nof  invoke() . \n extra  \u2013 extra keyword arguments are forwarded to the context\nconstructor.  See  Context  for more information. \n \n \n \n \n \n \n\n \n\n \n \n class  flask.cli. AppGroup ( name=None ,  commands=None ,  **attrs ) \u00b6 \n This works similar to a regular click  Group  but it\nchanges the behavior of the  command()  decorator so that it\nautomatically wraps the functions in  with_appcontext() . \n Not to be confused with  FlaskGroup . \n \n \n command ( *args ,  **kwargs ) \u00b6 \n This works exactly like the method of the same name on a regular\n click.Group  but it wraps callbacks in  with_appcontext() \nunless it\u2019s disabled by passing  with_appcontext=False . \n \n\n \n \n group ( *args ,  **kwargs ) \u00b6 \n This works exactly like the method of the same name on a regular\n click.Group  but it defaults the group class to\n AppGroup . \n \n\n \n\n \n \n class  flask.cli. ScriptInfo ( app_import_path=None ,  create_app=None ) \u00b6 \n Help object to deal with Flask applications.  This is usually not\nnecessary to interface with as it\u2019s used internally in the dispatching\nto click.  In future versions of Flask this object will most likely play\na bigger role.  Typically it\u2019s created automatically by the\n FlaskGroup  but you can also manually create it and pass it\nonwards as click object. \n \n \n app_import_path  = None \u00b6 \n Optionally the import path for the Flask application. \n \n\n \n \n create_app  = None \u00b6 \n Optionally a function that is passed the script info to create\nthe instance of the application. \n \n\n \n \n data  = None \u00b6 \n A dictionary with arbitrary data that can be associated with\nthis script info. \n \n\n \n \n load_app ( ) \u00b6 \n Loads the Flask app (if not yet loaded) and returns it.  Calling\nthis multiple times will just result in the already loaded app to\nbe returned. \n \n\n \n\n \n \n flask.cli. load_dotenv ( path=None ) \u00b6 \n Load \u201cdotenv\u201d files in order of precedence to set environment variables. \n If an env var is already set it is not overwritten, so earlier files in the\nlist are preferred over later files. \n Changes the current working directory to the location of the first file\nfound, with the assumption that it is in the top level project directory\nand will be where the Python path should import local packages from. \n This is a no-op if  python-dotenv  is not installed. \n \n \n \n \n Parameters: path  \u2013 Load the file at this location instead of searching. \n \n Returns: True  if a file was loaded. \n \n \n \n \n New in version 1.0. \n \n \n Changelog \n\n \n \n flask.cli. with_appcontext ( f ) \u00b6 \n Wraps a callback so that it\u2019s guaranteed to be executed with the\nscript\u2019s application context.  If callbacks are registered directly\nto the  app.cli  object then they are wrapped with this function\nby default unless it\u2019s disabled. \n \n\n \n \n flask.cli. pass_script_info ( f ) \u00b6 \n Marks a function so that an instance of  ScriptInfo  is passed\nas first argument to the click callback. \n \n\n \n \n flask.cli. run_command  = <click.core.Command object> \u00b6 \n Run a local development server. \n This server is for development purposes only. It does not provide\nthe stability, security, or performance of production WSGI servers. \n The reloader and debugger are enabled by default if\nFLASK_ENV=development or FLASK_DEBUG=1. \n \n\n \n \n flask.cli. shell_command  = <click.core.Command object> \u00b6 \n Runs an interactive Python shell in the context of a given\nFlask application.  The application will populate the default\nnamespace of this shell according to it\u2019s configuration. \n This is useful for executing small snippets of management code\nwithout having to manually configure the application. \n \n\n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n API \n Application Object \n Blueprint Objects \n Incoming Request Data \n Response Objects \n Sessions \n Session Interface \n Test Client \n Test CLI Runner \n Application Globals \n Useful Functions and Classes \n Message Flashing \n JSON Support \n Tagged JSON \n \n \n Template Rendering \n Configuration \n Stream Helpers \n Useful Internals \n Signals \n Class-Based Views \n URL Route Registrations \n View Function Options \n Command Line Interface \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Becoming Big \n           Next:  Design Decisions in Flask \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/deploying/fastcgi/", "text": "\n   \n     \n     \n   \n     FastCGI \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Deployment Options  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n FastCGI \u00b6 \n FastCGI is a deployment option on servers like  nginx ,  lighttpd , and\n cherokee ; see  uWSGI  and  Standalone WSGI Containers \nfor other options.  To use your WSGI application with any of them you will need\na FastCGI server first.  The most popular one is  flup  which we will use for\nthis guide.  Make sure to have it installed to follow along. \n \n Watch Out \n Please make sure in advance that any  app.run()  calls you might\nhave in your application file are inside an  if   __name__   == \n '__main__':  block or moved to a separate file.  Just make sure it\u2019s\nnot called because this will always start a local WSGI server which\nwe do not want if we deploy that application to FastCGI. \n \n \n Creating a  .fcgi  file \u00b6 \n First you need to create the FastCGI server file.  Let\u2019s call it\n yourapplication.fcgi : \n #!/usr/bin/python \n from   flup.server.fcgi   import   WSGIServer \n from   yourapplication   import   app \n\n if   __name__   ==   '__main__' : \n     WSGIServer ( app ) . run () \n \n \n This is enough for Apache to work, however nginx and older versions of\nlighttpd need a socket to be explicitly passed to communicate with the\nFastCGI server.  For that to work you need to pass the path to the\nsocket to the  WSGIServer : \n WSGIServer ( application ,   bindAddress = '/path/to/fcgi.sock' ) . run () \n \n \n The path has to be the exact same path you define in the server\nconfig. \n Save the  yourapplication.fcgi  file somewhere you will find it again.\nIt makes sense to have that in  /var/www/yourapplication  or something\nsimilar. \n Make sure to set the executable bit on that file so that the servers\ncan execute it: \n # chmod +x /var/www/yourapplication/yourapplication.fcgi\n \n \n \n \n Configuring Apache \u00b6 \n The example above is good enough for a basic Apache deployment but your\n .fcgi  file will appear in your application URL e.g.\n example.com/yourapplication.fcgi/news/ . There are few ways to configure\nyour application so that yourapplication.fcgi does not appear in the URL.\nA preferable way is to use the ScriptAlias and SetHandler configuration\ndirectives to route requests to the FastCGI server. The following example\nuses FastCgiServer to start 5 instances of the application which will\nhandle all incoming requests: \n LoadModule   fastcgi_module   / usr / lib64 / httpd / modules / mod_fastcgi . so \n\n FastCgiServer   / var / www / html / yourapplication / app . fcgi   - idle - timeout   300   - processes   5 \n\n < VirtualHost   *> \n     ServerName   webapp1 . mydomain . com \n     DocumentRoot   / var / www / html / yourapplication \n\n     AddHandler   fastcgi - script   fcgi \n     ScriptAlias   /   / var / www / html / yourapplication / app . fcgi / \n\n     < Location   /> \n         SetHandler   fastcgi - script \n     </ Location > \n </ VirtualHost > \n \n \n These processes will be managed by Apache. If you\u2019re using a standalone\nFastCGI server, you can use the FastCgiExternalServer directive instead.\nNote that in the following the path is not real, it\u2019s simply used as an\nidentifier to other\ndirectives such as AliasMatch: \n FastCgiServer   / var / www / html / yourapplication   - host   127.0 . 0.1 : 3000 \n \n \n If you cannot set ScriptAlias, for example on a shared web host, you can use\nWSGI middleware to remove yourapplication.fcgi from the URLs. Set .htaccess: \n <IfModule mod_fcgid.c>\n   AddHandler fcgid-script .fcgi\n   <Files ~ (\\.fcgi)>\n       SetHandler fcgid-script\n       Options +FollowSymLinks +ExecCGI\n   </Files>\n</IfModule>\n\n<IfModule mod_rewrite.c>\n   Options +FollowSymlinks\n   RewriteEngine On\n   RewriteBase /\n   RewriteCond %{REQUEST_FILENAME} !-f\n   RewriteRule ^(.*)$ yourapplication.fcgi/$1 [QSA,L]\n</IfModule>\n \n \n Set yourapplication.fcgi: \n #!/usr/bin/python \n #: optional path to your local python site-packages folder \n import   sys \n sys . path . insert ( 0 ,   '<your_local_path>/lib/python<your_python_version>/site-packages' ) \n\n from   flup.server.fcgi   import   WSGIServer \n from   yourapplication   import   app \n\n class   ScriptNameStripper ( object ): \n    def   __init__ ( self ,   app ): \n        self . app   =   app \n\n    def   __call__ ( self ,   environ ,   start_response ): \n        environ [ 'SCRIPT_NAME' ]   =   '' \n        return   self . app ( environ ,   start_response ) \n\n app   =   ScriptNameStripper ( app ) \n\n if   __name__   ==   '__main__' : \n     WSGIServer ( app ) . run () \n \n \n \n \n Configuring lighttpd \u00b6 \n A basic FastCGI configuration for lighttpd looks like that: \n fastcgi . server   =   ( \"/yourapplication.fcgi\"   => \n     (( \n         \"socket\"   =>   \"/tmp/yourapplication-fcgi.sock\" , \n         \"bin-path\"   =>   \"/var/www/yourapplication/yourapplication.fcgi\" , \n         \"check-local\"   =>   \"disable\" , \n         \"max-procs\"   =>   1 \n     )) \n ) \n\n alias . url   =   ( \n     \"/static/\"   =>   \"/path/to/your/static/\" \n ) \n\n url . rewrite - once   =   ( \n     \"^(/static($|/.*))$\"   =>   \"$1\" , \n     \"^(/.*)$\"   =>   \"/yourapplication.fcgi$1\" \n ) \n \n \n Remember to enable the FastCGI, alias and rewrite modules. This configuration\nbinds the application to  /yourapplication .  If you want the application to\nwork in the URL root you have to work around a lighttpd bug with the\n LighttpdCGIRootFix  middleware. \n Make sure to apply it only if you are mounting the application the URL\nroot. Also, see the Lighty docs for more information on  FastCGI and Python  (note that\nexplicitly passing a socket to run() is no longer necessary). \n \n \n Configuring nginx \u00b6 \n Installing FastCGI applications on nginx is a bit different because by\ndefault no FastCGI parameters are forwarded. \n A basic Flask FastCGI configuration for nginx looks like this: \n location = /yourapplication { rewrite ^ /yourapplication/ last; }\nlocation /yourapplication { try_files $uri @yourapplication; }\nlocation @yourapplication {\n    include fastcgi_params;\n    fastcgi_split_path_info ^(/yourapplication)(.*)$;\n    fastcgi_param PATH_INFO $fastcgi_path_info;\n    fastcgi_param SCRIPT_NAME $fastcgi_script_name;\n    fastcgi_pass unix:/tmp/yourapplication-fcgi.sock;\n}\n \n \n This configuration binds the application to  /yourapplication .  If you\nwant to have it in the URL root it\u2019s a bit simpler because you don\u2019t\nhave to figure out how to calculate  PATH_INFO  and  SCRIPT_NAME : \n location / { try_files $uri @yourapplication; }\nlocation @yourapplication {\n    include fastcgi_params;\n    fastcgi_param PATH_INFO $fastcgi_script_name;\n    fastcgi_param SCRIPT_NAME \"\";\n    fastcgi_pass unix:/tmp/yourapplication-fcgi.sock;\n}\n \n \n \n \n Running FastCGI Processes \u00b6 \n Since nginx and others do not load FastCGI apps, you have to do it by\nyourself.   Supervisor can manage FastCGI processes. \nYou can look around for other FastCGI process managers or write a script\nto run your  .fcgi  file at boot, e.g. using a SysV  init.d  script.\nFor a temporary solution, you can always run the  .fcgi  script inside\nGNU screen.  See  man   screen  for details, and note that this is a\nmanual solution which does not persist across system restart: \n $ screen\n$ /var/www/yourapplication/yourapplication.fcgi\n \n \n \n \n Debugging \u00b6 \n FastCGI deployments tend to be hard to debug on most web servers.  Very\noften the only thing the server log tells you is something along the\nlines of \u201cpremature end of headers\u201d.  In order to debug the application\nthe only thing that can really give you ideas why it breaks is switching\nto the correct user and executing the application by hand. \n This example assumes your application is called  application.fcgi  and\nthat your web server user is  www-data : \n $ su www-data\n$ cd /var/www/yourapplication\n$ python application.fcgi\nTraceback (most recent call last):\n  File \"yourapplication.fcgi\", line 4, in <module>\nImportError: No module named yourapplication\n \n \n In this case the error seems to be \u201cyourapplication\u201d not being on the\npython path.  Common problems are: \n \n Relative paths being used.  Don\u2019t rely on the current working directory. \n The code depending on environment variables that are not set by the\nweb server. \n Different python interpreters being used. \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n FastCGI \n Creating a  .fcgi  file \n Configuring Apache \n Configuring lighttpd \n Configuring nginx \n Running FastCGI Processes \n Debugging \n \n \n \n Navigation \n \n   Overview \n     \n       Deployment Options \n         \n           Previous:  mod_wsgi (Apache) \n           Next:  CGI \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/deploying/wsgi-standalone/", "text": "\n   \n     \n     \n   \n     Standalone WSGI Containers \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Deployment Options  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Standalone WSGI Containers \u00b6 \n There are popular servers written in Python that contain WSGI applications and\nserve HTTP.  These servers stand alone when they run; you can proxy to them\nfrom your web server.  Note the section on  Proxy Setups  if you\nrun into issues. \n \n Gunicorn \u00b6 \n Gunicorn  \u2018Green Unicorn\u2019 is a WSGI HTTP Server for UNIX. It\u2019s a pre-fork\nworker model ported from Ruby\u2019s Unicorn project. It supports both  eventlet \nand  greenlet . Running a Flask application on this server is quite simple: \n gunicorn   myproject : app \n \n \n Gunicorn  provides many command-line options \u2013 see  gunicorn   -h .\nFor example, to run a Flask application with 4 worker processes ( -w \n 4 ) binding to localhost port 4000 ( -b   127.0.0.1:4000 ): \n gunicorn   - w   4   - b   127.0 . 0.1 : 4000   myproject : app \n \n \n \n \n uWSGI \u00b6 \n uWSGI  is a fast application server written in C. It is very configurable\nwhich makes it more complicated to setup than gunicorn. \n Running  uWSGI HTTP Router : \n uwsgi   -- http   127.0 . 0.1 : 5000   -- module   myproject : app \n \n \n For a more optimized setup, see  configuring uWSGI and NGINX . \n \n \n Gevent \u00b6 \n Gevent  is a coroutine-based Python networking library that uses\n greenlet  to provide a high-level synchronous API on top of  libev \nevent loop: \n from   gevent.wsgi   import   WSGIServer \n from   yourapplication   import   app \n\n http_server   =   WSGIServer (( '' ,   5000 ),   app ) \n http_server . serve_forever () \n \n \n \n \n Twisted Web \u00b6 \n Twisted Web  is the web server shipped with  Twisted , a mature,\nnon-blocking event-driven networking library. Twisted Web comes with a\nstandard WSGI container which can be controlled from the command line using\nthe  twistd  utility: \n twistd   web   -- wsgi   myproject . app \n \n \n This example will run a Flask application called  app  from a module named\n myproject . \n Twisted Web supports many flags and options, and the  twistd  utility does\nas well; see  twistd   -h  and  twistd   web   -h  for more information. For\nexample, to run a Twisted Web server in the foreground, on port 8080, with an\napplication from  myproject : \n twistd   - n   web   -- port   tcp : 8080   -- wsgi   myproject . app \n \n \n \n \n Proxy Setups \u00b6 \n If you deploy your application using one of these servers behind an HTTP proxy\nyou will need to rewrite a few headers in order for the application to work.\nThe two problematic values in the WSGI environment usually are  REMOTE_ADDR \nand  HTTP_HOST .  You can configure your httpd to pass these headers, or you\ncan fix them in middleware.  Werkzeug ships a fixer that will solve some common\nsetups, but you might want to write your own WSGI middleware for specific\nsetups. \n Here\u2019s a simple nginx configuration which proxies to an application served on\nlocalhost at port 8000, setting appropriate headers: \n server   { \n     listen   80 ; \n\n     server_name   _ ; \n\n     access_log    /var/log/nginx/access.log ; \n     error_log    /var/log/nginx/error.log ; \n\n     location   /   { \n         proxy_pass           http://127.0.0.1:8000/ ; \n         proxy_redirect       off ; \n\n         proxy_set_header     Host                   $host ; \n         proxy_set_header     X-Real-IP              $remote_addr ; \n         proxy_set_header     X-Forwarded-For        $proxy_add_x_forwarded_for ; \n         proxy_set_header     X-Forwarded-Proto      $scheme ; \n     } \n } \n \n \n If your httpd is not providing these headers, the most common setup invokes the\nhost being set from  X-Forwarded-Host  and the remote address from\n X-Forwarded-For : \n from   werkzeug.contrib.fixers   import   ProxyFix \n app . wsgi_app   =   ProxyFix ( app . wsgi_app ) \n \n \n \n Trusting Headers \n Please keep in mind that it is a security issue to use such a middleware in\na non-proxy setup because it will blindly trust the incoming headers which\nmight be forged by malicious clients. \n \n If you want to rewrite the headers from another header, you might want to\nuse a fixer like this: \n class   CustomProxyFix ( object ): \n\n     def   __init__ ( self ,   app ): \n         self . app   =   app \n\n     def   __call__ ( self ,   environ ,   start_response ): \n         host   =   environ . get ( 'HTTP_X_FHOST' ,   '' ) \n         if   host : \n             environ [ 'HTTP_HOST' ]   =   host \n         return   self . app ( environ ,   start_response ) \n\n app . wsgi_app   =   CustomProxyFix ( app . wsgi_app ) \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Standalone WSGI Containers \n Gunicorn \n uWSGI \n Gevent \n Twisted Web \n Proxy Setups \n \n \n \n Navigation \n \n   Overview \n     \n       Deployment Options \n         \n           Previous:  Deployment Options \n           Next:  uWSGI \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/fileuploads/", "text": "\n   \n     \n     \n   \n     Uploading Files \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Uploading Files \u00b6 \n Ah yes, the good old problem of file uploads.  The basic idea of file\nuploads is actually quite simple.  It basically works like this: \n \n A  <form>  tag is marked with  enctype=multipart/form-data \nand an  <input   type=file>  is placed in that form. \n The application accesses the file from the  files \ndictionary on the request object. \n use the  save()  method of the file to save\nthe file permanently somewhere on the filesystem. \n \n \n A Gentle Introduction \u00b6 \n Let\u2019s start with a very basic application that uploads a file to a\nspecific upload folder and displays a file to the user.  Let\u2019s look at the\nbootstrapping code for our application: \n import   os \n from   flask   import   Flask ,   flash ,   request ,   redirect ,   url_for \n from   werkzeug.utils   import   secure_filename \n\n UPLOAD_FOLDER   =   '/path/to/the/uploads' \n ALLOWED_EXTENSIONS   =   set ([ 'txt' ,   'pdf' ,   'png' ,   'jpg' ,   'jpeg' ,   'gif' ]) \n\n app   =   Flask ( __name__ ) \n app . config [ 'UPLOAD_FOLDER' ]   =   UPLOAD_FOLDER \n \n \n So first we need a couple of imports.  Most should be straightforward, the\n werkzeug.secure_filename()  is explained a little bit later.  The\n UPLOAD_FOLDER  is where we will store the uploaded files and the\n ALLOWED_EXTENSIONS  is the set of allowed file extensions. \n Why do we limit the extensions that are allowed?  You probably don\u2019t want\nyour users to be able to upload everything there if the server is directly\nsending out the data to the client.  That way you can make sure that users\nare not able to upload HTML files that would cause XSS problems (see\n Cross-Site Scripting (XSS) ).  Also make sure to disallow  .php  files if the server\nexecutes them, but who has PHP installed on their server, right?  :) \n Next the functions that check if an extension is valid and that uploads\nthe file and redirects the user to the URL for the uploaded file: \n def   allowed_file ( filename ): \n     return   '.'   in   filename   and  \\\n            filename . rsplit ( '.' ,   1 )[ 1 ] . lower ()   in   ALLOWED_EXTENSIONS \n\n @app . route ( '/' ,   methods = [ 'GET' ,   'POST' ]) \n def   upload_file (): \n     if   request . method   ==   'POST' : \n         # check if the post request has the file part \n         if   'file'   not   in   request . files : \n             flash ( 'No file part' ) \n             return   redirect ( request . url ) \n         file   =   request . files [ 'file' ] \n         # if user does not select file, browser also \n         # submit an empty part without filename \n         if   file . filename   ==   '' : \n             flash ( 'No selected file' ) \n             return   redirect ( request . url ) \n         if   file   and   allowed_file ( file . filename ): \n             filename   =   secure_filename ( file . filename ) \n             file . save ( os . path . join ( app . config [ 'UPLOAD_FOLDER' ],   filename )) \n             return   redirect ( url_for ( 'uploaded_file' , \n                                     filename = filename )) \n     return   ''' \n     <!doctype html> \n     <title>Upload new File</title> \n     <h1>Upload new File</h1> \n     <form method=post enctype=multipart/form-data> \n       <input type=file name=file> \n       <input type=submit value=Upload> \n     </form> \n     ''' \n \n \n So what does that  secure_filename()  function actually do?\nNow the problem is that there is that principle called \u201cnever trust user\ninput\u201d.  This is also true for the filename of an uploaded file.  All\nsubmitted form data can be forged, and filenames can be dangerous.  For\nthe moment just remember: always use that function to secure a filename\nbefore storing it directly on the filesystem. \n \n Information for the Pros \n So you\u2019re interested in what that  secure_filename() \nfunction does and what the problem is if you\u2019re not using it?  So just\nimagine someone would send the following information as  filename  to\nyour application: \n filename   =   \"../../../../home/username/.bashrc\" \n \n \n Assuming the number of  ../  is correct and you would join this with\nthe  UPLOAD_FOLDER  the user might have the ability to modify a file on\nthe server\u2019s filesystem he or she should not modify.  This does require some\nknowledge about how the application looks like, but trust me, hackers\nare patient :) \n Now let\u2019s look how that function works: \n >>>  secure_filename ( '../../../../home/username/.bashrc' ) \n 'home_username_.bashrc' \n \n \n \n Now one last thing is missing: the serving of the uploaded files. In the\n upload_file()  we redirect the user to\n url_for('uploaded_file',   filename=filename) , that is,  /uploads/filename .\nSo we write the  uploaded_file()  function to return the file of that name. As\nof Flask 0.5 we can use a function that does that for us: \n from   flask   import   send_from_directory \n\n @app . route ( '/uploads/<filename>' ) \n def   uploaded_file ( filename ): \n     return   send_from_directory ( app . config [ 'UPLOAD_FOLDER' ], \n                                filename ) \n \n \n Alternatively you can register  uploaded_file  as  build_only  rule and\nuse the  SharedDataMiddleware .  This also works with\nolder versions of Flask: \n from   werkzeug   import   SharedDataMiddleware \n app . add_url_rule ( '/uploads/<filename>' ,   'uploaded_file' , \n                  build_only = True ) \n app . wsgi_app   =   SharedDataMiddleware ( app . wsgi_app ,   { \n     '/uploads' :    app . config [ 'UPLOAD_FOLDER' ] \n }) \n \n \n If you now run the application everything should work as expected. \n \n \n Improving Uploads \u00b6 \n \n Changelog \n New in version 0.6. \n \n So how exactly does Flask handle uploads?  Well it will store them in the\nwebserver\u2019s memory if the files are reasonable small otherwise in a\ntemporary location (as returned by  tempfile.gettempdir() ).  But how\ndo you specify the maximum file size after which an upload is aborted?  By\ndefault Flask will happily accept file uploads to an unlimited amount of\nmemory, but you can limit that by setting the  MAX_CONTENT_LENGTH \nconfig key: \n from   flask   import   Flask ,   Request \n\n app   =   Flask ( __name__ ) \n app . config [ 'MAX_CONTENT_LENGTH' ]   =   16   *   1024   *   1024 \n \n \n The code above will limit the maximum allowed payload to 16 megabytes.\nIf a larger file is transmitted, Flask will raise a\n RequestEntityTooLarge  exception. \n \n Connection Reset Issue \n When using the local development server, you may get a connection\nreset error instead of a 413 response. You will get the correct\nstatus response when running the app with a production WSGI server. \n \n This feature was added in Flask 0.6 but can be achieved in older versions\nas well by subclassing the request object.  For more information on that\nconsult the Werkzeug documentation on file handling. \n \n \n Upload Progress Bars \u00b6 \n A while ago many developers had the idea to read the incoming file in\nsmall chunks and store the upload progress in the database to be able to\npoll the progress with JavaScript from the client.  Long story short: the\nclient asks the server every 5 seconds how much it has transmitted\nalready.  Do you realize the irony?  The client is asking for something it\nshould already know. \n \n \n An Easier Solution \u00b6 \n Now there are better solutions that work faster and are more reliable. There\nare JavaScript libraries like  jQuery  that have form plugins to ease the\nconstruction of progress bar. \n Because the common pattern for file uploads exists almost unchanged in all\napplications dealing with uploads, there is also a Flask extension called\n Flask-Uploads  that implements a full fledged upload mechanism with white and\nblacklisting of extensions and more. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Uploading Files \n A Gentle Introduction \n Improving Uploads \n Upload Progress Bars \n An Easier Solution \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  SQLAlchemy in Flask \n           Next:  Caching \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/viewdecorators/", "text": "\n   \n     \n     \n   \n     View Decorators \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n View Decorators \u00b6 \n Python has a really interesting feature called function decorators.  This\nallows some really neat things for web applications.  Because each view in\nFlask is a function, decorators can be used to inject additional\nfunctionality to one or more functions.  The  route() \ndecorator is the one you probably used already.  But there are use cases\nfor implementing your own decorator.  For instance, imagine you have a\nview that should only be used by people that are logged in.  If a user\ngoes to the site and is not logged in, they should be redirected to the\nlogin page.  This is a good example of a use case where a decorator is an\nexcellent solution. \n \n Login Required Decorator \u00b6 \n So let\u2019s implement such a decorator.  A decorator is a function that\nwraps and replaces another function.  Since the original function is\nreplaced, you need to remember to copy the original function\u2019s information\nto the new function.  Use  functools.wraps()  to handle this for you. \n This example assumes that the login page is called  'login'  and that\nthe current user is stored in  g.user  and is  None  if there is no-one\nlogged in. \n from   functools   import   wraps \n from   flask   import   g ,   request ,   redirect ,   url_for \n\n def   login_required ( f ): \n     @wraps ( f ) \n     def   decorated_function ( * args ,   ** kwargs ): \n         if   g . user   is   None : \n             return   redirect ( url_for ( 'login' ,   next = request . url )) \n         return   f ( * args ,   ** kwargs ) \n     return   decorated_function \n \n \n To use the decorator, apply it as innermost decorator to a view function.\nWhen applying further decorators, always remember\nthat the  route()  decorator is the outermost. \n @app . route ( '/secret_page' ) \n @login_required \n def   secret_page (): \n     pass \n \n \n \n Note \n The  next  value will exist in  request.args  after a  GET  request for\nthe login page.  You\u2019ll have to pass it along when sending the  POST  request\nfrom the login form.  You can do this with a hidden input tag, then retrieve it\nfrom  request.form  when logging the user in. \n < input   type = \"hidden\"   value = \"{{ request.args.get('next', '') }}\" /> \n \n \n \n \n \n Caching Decorator \u00b6 \n Imagine you have a view function that does an expensive calculation and\nbecause of that you would like to cache the generated results for a\ncertain amount of time.  A decorator would be nice for that.  We\u2019re\nassuming you have set up a cache like mentioned in  Caching . \n Here is an example cache function.  It generates the cache key from a\nspecific prefix (actually a format string) and the current path of the\nrequest.  Notice that we are using a function that first creates the\ndecorator that then decorates the function.  Sounds awful? Unfortunately\nit is a little bit more complex, but the code should still be\nstraightforward to read. \n The decorated function will then work as follows \n \n get the unique cache key for the current request base on the current\npath. \n get the value for that key from the cache. If the cache returned\nsomething we will return that value. \n otherwise the original function is called and the return value is\nstored in the cache for the timeout provided (by default 5 minutes). \n \n Here the code: \n from   functools   import   wraps \n from   flask   import   request \n\n def   cached ( timeout = 5   *   60 ,   key = 'view/ %s ' ): \n     def   decorator ( f ): \n         @wraps ( f ) \n         def   decorated_function ( * args ,   ** kwargs ): \n             cache_key   =   key   %   request . path \n             rv   =   cache . get ( cache_key ) \n             if   rv   is   not   None : \n                 return   rv \n             rv   =   f ( * args ,   ** kwargs ) \n             cache . set ( cache_key ,   rv ,   timeout = timeout ) \n             return   rv \n         return   decorated_function \n     return   decorator \n \n \n Notice that this assumes an instantiated  cache  object is available, see\n Caching  for more information. \n \n \n Templating Decorator \u00b6 \n A common pattern invented by the TurboGears guys a while back is a\ntemplating decorator.  The idea of that decorator is that you return a\ndictionary with the values passed to the template from the view function\nand the template is automatically rendered.  With that, the following\nthree examples do exactly the same: \n @app . route ( '/' ) \n def   index (): \n     return   render_template ( 'index.html' ,   value = 42 ) \n\n @app . route ( '/' ) \n @templated ( 'index.html' ) \n def   index (): \n     return   dict ( value = 42 ) \n\n @app . route ( '/' ) \n @templated () \n def   index (): \n     return   dict ( value = 42 ) \n \n \n As you can see, if no template name is provided it will use the endpoint\nof the URL map with dots converted to slashes +  '.html' .  Otherwise\nthe provided template name is used.  When the decorated function returns,\nthe dictionary returned is passed to the template rendering function.  If\n None  is returned, an empty dictionary is assumed, if something else than\na dictionary is returned we return it from the function unchanged.  That\nway you can still use the redirect function or return simple strings. \n Here is the code for that decorator: \n from   functools   import   wraps \n from   flask   import   request ,   render_template \n\n def   templated ( template = None ): \n     def   decorator ( f ): \n         @wraps ( f ) \n         def   decorated_function ( * args ,   ** kwargs ): \n             template_name   =   template \n             if   template_name   is   None : \n                 template_name   =   request . endpoint  \\\n                     . replace ( '.' ,   '/' )   +   '.html' \n             ctx   =   f ( * args ,   ** kwargs ) \n             if   ctx   is   None : \n                 ctx   =   {} \n             elif   not   isinstance ( ctx ,   dict ): \n                 return   ctx \n             return   render_template ( template_name ,   ** ctx ) \n         return   decorated_function \n     return   decorator \n \n \n \n \n Endpoint Decorator \u00b6 \n When you want to use the werkzeug routing system for more flexibility you\nneed to map the endpoint as defined in the  Rule \nto a view function. This is possible with this decorator. For example: \n from   flask   import   Flask \n from   werkzeug.routing   import   Rule \n\n app   =   Flask ( __name__ ) \n app . url_map . add ( Rule ( '/' ,   endpoint = 'index' )) \n\n @app . endpoint ( 'index' ) \n def   my_index (): \n     return   \"Hello world\" \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n View Decorators \n Login Required Decorator \n Caching Decorator \n Templating Decorator \n Endpoint Decorator \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Caching \n           Next:  Form Validation with WTForms \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/sqlalchemy/", "text": "\n   \n     \n     \n   \n     SQLAlchemy in Flask \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n SQLAlchemy in Flask \u00b6 \n Many people prefer  SQLAlchemy  for database access.  In this case it\u2019s\nencouraged to use a package instead of a module for your flask application\nand drop the models into a separate module ( Larger Applications ).\nWhile that is not necessary, it makes a lot of sense. \n There are four very common ways to use SQLAlchemy.  I will outline each\nof them here: \n \n Flask-SQLAlchemy Extension \u00b6 \n Because SQLAlchemy is a common database abstraction layer and object\nrelational mapper that requires a little bit of configuration effort,\nthere is a Flask extension that handles that for you.  This is recommended\nif you want to get started quickly. \n You can download  Flask-SQLAlchemy  from  PyPI . \n \n \n Declarative \u00b6 \n The declarative extension in SQLAlchemy is the most recent method of using\nSQLAlchemy.  It allows you to define tables and models in one go, similar\nto how Django works.  In addition to the following text I recommend the\nofficial documentation on the  declarative  extension. \n Here\u2019s the example  database.py  module for your application: \n from   sqlalchemy   import   create_engine \n from   sqlalchemy.orm   import   scoped_session ,   sessionmaker \n from   sqlalchemy.ext.declarative   import   declarative_base \n\n engine   =   create_engine ( 'sqlite:////tmp/test.db' ,   convert_unicode = True ) \n db_session   =   scoped_session ( sessionmaker ( autocommit = False , \n                                          autoflush = False , \n                                          bind = engine )) \n Base   =   declarative_base () \n Base . query   =   db_session . query_property () \n\n def   init_db (): \n     # import all modules here that might define models so that \n     # they will be registered properly on the metadata.  Otherwise \n     # you will have to import them first before calling init_db() \n     import   yourapplication.models \n     Base . metadata . create_all ( bind = engine ) \n \n \n To define your models, just subclass the  Base  class that was created by\nthe code above.  If you are wondering why we don\u2019t have to care about\nthreads here (like we did in the SQLite3 example above with the\n g  object): that\u2019s because SQLAlchemy does that for us\nalready with the  scoped_session . \n To use SQLAlchemy in a declarative way with your application, you just\nhave to put the following code into your application module.  Flask will\nautomatically remove database sessions at the end of the request or\nwhen the application shuts down: \n from   yourapplication.database   import   db_session \n\n @app . teardown_appcontext \n def   shutdown_session ( exception = None ): \n     db_session . remove () \n \n \n Here is an example model (put this into  models.py , e.g.): \n from   sqlalchemy   import   Column ,   Integer ,   String \n from   yourapplication.database   import   Base \n\n class   User ( Base ): \n     __tablename__   =   'users' \n     id   =   Column ( Integer ,   primary_key = True ) \n     name   =   Column ( String ( 50 ),   unique = True ) \n     email   =   Column ( String ( 120 ),   unique = True ) \n\n     def   __init__ ( self ,   name = None ,   email = None ): \n         self . name   =   name \n         self . email   =   email \n\n     def   __repr__ ( self ): \n         return   '<User  %r >'   %   ( self . name ) \n \n \n To create the database you can use the  init_db  function: \n >>>  from   yourapplication.database   import   init_db \n >>>  init_db () \n \n \n You can insert entries into the database like this: \n >>>  from   yourapplication.database   import   db_session \n >>>  from   yourapplication.models   import   User \n >>>  u   =   User ( 'admin' ,   'admin@localhost' ) \n >>>  db_session . add ( u ) \n >>>  db_session . commit () \n \n \n Querying is simple as well: \n >>>  User . query . all () \n [<User u'admin'>] \n >>>  User . query . filter ( User . name   ==   'admin' ) . first () \n <User u'admin'> \n \n \n \n \n Manual Object Relational Mapping \u00b6 \n Manual object relational mapping has a few upsides and a few downsides\nversus the declarative approach from above.  The main difference is that\nyou define tables and classes separately and map them together.  It\u2019s more\nflexible but a little more to type.  In general it works like the\ndeclarative approach, so make sure to also split up your application into\nmultiple modules in a package. \n Here is an example  database.py  module for your application: \n from   sqlalchemy   import   create_engine ,   MetaData \n from   sqlalchemy.orm   import   scoped_session ,   sessionmaker \n\n engine   =   create_engine ( 'sqlite:////tmp/test.db' ,   convert_unicode = True ) \n metadata   =   MetaData () \n db_session   =   scoped_session ( sessionmaker ( autocommit = False , \n                                          autoflush = False , \n                                          bind = engine )) \n def   init_db (): \n     metadata . create_all ( bind = engine ) \n \n \n As in the declarative approach, you need to close the session after\neach request or application context shutdown.  Put this into your\napplication module: \n from   yourapplication.database   import   db_session \n\n @app . teardown_appcontext \n def   shutdown_session ( exception = None ): \n     db_session . remove () \n \n \n Here is an example table and model (put this into  models.py ): \n from   sqlalchemy   import   Table ,   Column ,   Integer ,   String \n from   sqlalchemy.orm   import   mapper \n from   yourapplication.database   import   metadata ,   db_session \n\n class   User ( object ): \n     query   =   db_session . query_property () \n\n     def   __init__ ( self ,   name = None ,   email = None ): \n         self . name   =   name \n         self . email   =   email \n\n     def   __repr__ ( self ): \n         return   '<User  %r >'   %   ( self . name ) \n\n users   =   Table ( 'users' ,   metadata , \n     Column ( 'id' ,   Integer ,   primary_key = True ), \n     Column ( 'name' ,   String ( 50 ),   unique = True ), \n     Column ( 'email' ,   String ( 120 ),   unique = True ) \n ) \n mapper ( User ,   users ) \n \n \n Querying and inserting works exactly the same as in the example above. \n \n \n SQL Abstraction Layer \u00b6 \n If you just want to use the database system (and SQL) abstraction layer\nyou basically only need the engine: \n from   sqlalchemy   import   create_engine ,   MetaData ,   Table \n\n engine   =   create_engine ( 'sqlite:////tmp/test.db' ,   convert_unicode = True ) \n metadata   =   MetaData ( bind = engine ) \n \n \n Then you can either declare the tables in your code like in the examples\nabove, or automatically load them: \n from   sqlalchemy   import   Table \n\n users   =   Table ( 'users' ,   metadata ,   autoload = True ) \n \n \n To insert data you can use the  insert  method.  We have to get a\nconnection first so that we can use a transaction: \n >>>  con   =   engine . connect () \n >>>  con . execute ( users . insert (),   name = 'admin' ,   email = 'admin@localhost' ) \n \n \n SQLAlchemy will automatically commit for us. \n To query your database, you use the engine directly or use a connection: \n >>>  users . select ( users . c . id   ==   1 ) . execute () . first () \n (1, u'admin', u'admin@localhost') \n \n \n These results are also dict-like tuples: \n >>>  r   =   users . select ( users . c . id   ==   1 ) . execute () . first () \n >>>  r [ 'name' ] \n u'admin' \n \n \n You can also pass strings of SQL statements to the\n execute()  method: \n >>>  engine . execute ( 'select * from users where id = :1' ,   [ 1 ]) . first () \n (1, u'admin', u'admin@localhost') \n \n \n For more information about SQLAlchemy, head over to the\n website . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n SQLAlchemy in Flask \n Flask-SQLAlchemy Extension \n Declarative \n Manual Object Relational Mapping \n SQL Abstraction Layer \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Using SQLite 3 with Flask \n           Next:  Uploading Files \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/sqlite3/", "text": "\n   \n     \n     \n   \n     Using SQLite 3 with Flask \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Using SQLite 3 with Flask \u00b6 \n In Flask you can easily implement the opening of database connections on\ndemand and closing them when the context dies (usually at the end of the\nrequest). \n Here is a simple example of how you can use SQLite 3 with Flask: \n import   sqlite3 \n from   flask   import   g \n\n DATABASE   =   '/path/to/database.db' \n\n def   get_db (): \n     db   =   getattr ( g ,   '_database' ,   None ) \n     if   db   is   None : \n         db   =   g . _database   =   sqlite3 . connect ( DATABASE ) \n     return   db \n\n @app . teardown_appcontext \n def   close_connection ( exception ): \n     db   =   getattr ( g ,   '_database' ,   None ) \n     if   db   is   not   None : \n         db . close () \n \n \n Now, to use the database, the application must either have an active\napplication context (which is always true if there is a request in flight)\nor create an application context itself.  At that point the  get_db \nfunction can be used to get the current database connection.  Whenever the\ncontext is destroyed the database connection will be terminated. \n Note: if you use Flask 0.9 or older you need to use\n flask._app_ctx_stack.top  instead of  g  as the  flask.g \nobject was bound to the request and not application context. \n Example: \n @app . route ( '/' ) \n def   index (): \n     cur   =   get_db () . cursor () \n     ... \n \n \n \n Note \n Please keep in mind that the teardown request and appcontext functions\nare always executed, even if a before-request handler failed or was\nnever executed.  Because of this we have to make sure here that the\ndatabase is there before we close it. \n \n \n Connect on Demand \u00b6 \n The upside of this approach (connecting on first use) is that this will\nonly open the connection if truly necessary.  If you want to use this\ncode outside a request context you can use it in a Python shell by opening\nthe application context by hand: \n with   app . app_context (): \n     # now you can use get_db() \n \n \n \n \n Easy Querying \u00b6 \n Now in each request handling function you can access  get_db()  to get the\ncurrent open database connection.  To simplify working with SQLite, a\nrow factory function is useful.  It is executed for every result returned\nfrom the database to convert the result.  For instance, in order to get\ndictionaries instead of tuples, this could be inserted into the  get_db \nfunction we created above: \n def   make_dicts ( cursor ,   row ): \n     return   dict (( cursor . description [ idx ][ 0 ],   value ) \n                 for   idx ,   value   in   enumerate ( row )) \n\n db . row_factory   =   make_dicts \n \n \n This will make the sqlite3 module return dicts for this database connection, which are much nicer to deal with. Even more simply, we could place this in  get_db  instead: \n db . row_factory   =   sqlite3 . Row \n \n \n This would use Row objects rather than dicts to return the results of queries. These are  namedtuple  s, so we can access them either by index or by key. For example, assuming we have a  sqlite3.Row  called  r  for the rows  id ,  FirstName ,  LastName , and  MiddleInitial : \n >>>  # You can get values based on the row's name \n >>>  r [ 'FirstName' ] \n John \n >>>  # Or, you can get them based on index \n >>>  r [ 1 ] \n John \n # Row objects are also iterable: \n >>>  for   value   in   r : \n ...       print ( value ) \n 1 \n John \n Doe \n M \n \n \n Additionally, it is a good idea to provide a query function that combines\ngetting the cursor, executing and fetching the results: \n def   query_db ( query ,   args = (),   one = False ): \n     cur   =   get_db () . execute ( query ,   args ) \n     rv   =   cur . fetchall () \n     cur . close () \n     return   ( rv [ 0 ]   if   rv   else   None )   if   one   else   rv \n \n \n This handy little function, in combination with a row factory, makes\nworking with the database much more pleasant than it is by just using the\nraw cursor and connection objects. \n Here is how you can use it: \n for   user   in   query_db ( 'select * from users' ): \n     print   user [ 'username' ],   'has the id' ,   user [ 'user_id' ] \n \n \n Or if you just want a single result: \n user   =   query_db ( 'select * from users where username = ?' , \n                 [ the_username ],   one = True ) \n if   user   is   None : \n     print   'No such user' \n else : \n     print   the_username ,   'has the id' ,   user [ 'user_id' ] \n \n \n To pass variable parts to the SQL statement, use a question mark in the\nstatement and pass in the arguments as a list.  Never directly add them to\nthe SQL statement with string formatting because this makes it possible\nto attack the application using  SQL Injections . \n \n \n Initial Schemas \u00b6 \n Relational databases need schemas, so applications often ship a\n schema.sql  file that creates the database.  It\u2019s a good idea to provide\na function that creates the database based on that schema.  This function\ncan do that for you: \n def   init_db (): \n     with   app . app_context (): \n         db   =   get_db () \n         with   app . open_resource ( 'schema.sql' ,   mode = 'r' )   as   f : \n             db . cursor () . executescript ( f . read ()) \n         db . commit () \n \n \n You can then create such a database from the Python shell: \n >>>  from   yourapplication   import   init_db \n >>>  init_db () \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Using SQLite 3 with Flask \n Connect on Demand \n Easy Querying \n Initial Schemas \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Deploying with Fabric \n           Next:  SQLAlchemy in Flask \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/fabric/", "text": "\n   \n     \n     \n   \n     Deploying with Fabric \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Deploying with Fabric \u00b6 \n Fabric  is a tool for Python similar to Makefiles but with the ability\nto execute commands on a remote server.  In combination with a properly\nset up Python package ( Larger Applications ) and a good concept for\nconfigurations ( Configuration Handling ) it is very easy to deploy Flask\napplications to external servers. \n Before we get started, here a quick checklist of things we have to ensure\nupfront: \n \n Fabric 1.0 has to be installed locally.  This tutorial assumes the\nlatest version of Fabric. \n The application already has to be a package and requires a working\n setup.py  file ( Deploying with Setuptools ). \n In the following example we are using  mod_wsgi  for the remote\nservers.  You can of course use your own favourite server there, but\nfor this example we chose Apache +  mod_wsgi  because it\u2019s very easy\nto setup and has a simple way to reload applications without root\naccess. \n \n \n Creating the first Fabfile \u00b6 \n A fabfile is what controls what Fabric executes.  It is named  fabfile.py \nand executed by the  fab  command.  All the functions defined in that file\nwill show up as  fab  subcommands.  They are executed on one or more\nhosts.  These hosts can be defined either in the fabfile or on the command\nline.  In this case we will add them to the fabfile. \n This is a basic first example that has the ability to upload the current\nsource code to the server and install it into a pre-existing\nvirtual environment: \n from   fabric.api   import   * \n\n # the user to use for the remote commands \n env . user   =   'appuser' \n # the servers where the commands are executed \n env . hosts   =   [ 'server1.example.com' ,   'server2.example.com' ] \n\n def   pack (): \n     # build the package \n     local ( 'python setup.py sdist --formats=gztar' ,   capture = False ) \n\n def   deploy (): \n     # figure out the package name and version \n     dist   =   local ( 'python setup.py --fullname' ,   capture = True ) . strip () \n     filename   =   ' %s .tar.gz'   %   dist \n\n     # upload the package to the temporary folder on the server \n     put ( 'dist/ %s '   %   filename ,   '/tmp/ %s '   %   filename ) \n\n     # install the package in the application's virtualenv with pip \n     run ( '/var/www/yourapplication/env/bin/pip install /tmp/ %s '   %   filename ) \n\n     # remove the uploaded package \n     run ( 'rm -r /tmp/ %s '   %   filename ) \n\n     # touch the .wsgi file to trigger a reload in mod_wsgi \n     run ( 'touch /var/www/yourapplication.wsgi' ) \n \n \n \n \n Running Fabfiles \u00b6 \n Now how do you execute that fabfile?  You use the  fab  command.  To\ndeploy the current version of the code on the remote server you would use\nthis command: \n $ fab pack deploy\n \n \n However this requires that our server already has the\n /var/www/yourapplication  folder created and\n /var/www/yourapplication/env  to be a virtual environment.  Furthermore\nare we not creating the configuration or  .wsgi  file on the server.  So\nhow do we bootstrap a new server into our infrastructure? \n This now depends on the number of servers we want to set up.  If we just\nhave one application server (which the majority of applications will\nhave), creating a command in the fabfile for this is overkill.  But\nobviously you can do that.  In that case you would probably call it\n setup  or  bootstrap  and then pass the servername explicitly on the\ncommand line: \n $ fab -H newserver.example.com bootstrap\n \n \n To setup a new server you would roughly do these steps: \n \n Create the directory structure in  /var/www : \n $ mkdir /var/www/yourapplication\n$ cd /var/www/yourapplication\n$ virtualenv --distribute env\n \n \n \n Upload a new  application.wsgi  file to the server and the\nconfiguration file for the application (eg:  application.cfg ) \n \n Create a new Apache config for  yourapplication  and activate it.\nMake sure to activate watching for changes of the  .wsgi  file so\nthat we can automatically reload the application by touching it.\n(See  mod_wsgi (Apache)  for more information) \n \n \n So now the question is, where do the  application.wsgi  and\n application.cfg  files come from? \n \n \n The WSGI File \u00b6 \n The WSGI file has to import the application and also to set an environment\nvariable so that the application knows where to look for the config.  This\nis a short example that does exactly that: \n import   os \n os . environ [ 'YOURAPPLICATION_CONFIG' ]   =   '/var/www/yourapplication/application.cfg' \n from   yourapplication   import   app \n \n \n The application itself then has to initialize itself like this to look for\nthe config at that environment variable: \n app   =   Flask ( __name__ ) \n app . config . from_object ( 'yourapplication.default_config' ) \n app . config . from_envvar ( 'YOURAPPLICATION_CONFIG' ) \n \n \n This approach is explained in detail in the  Configuration Handling  section of the\ndocumentation. \n \n \n The Configuration File \u00b6 \n Now as mentioned above, the application will find the correct\nconfiguration file by looking up the  YOURAPPLICATION_CONFIG  environment\nvariable.  So we have to put the configuration in a place where the\napplication will able to find it.  Configuration files have the unfriendly\nquality of being different on all computers, so you do not version them\nusually. \n A popular approach is to store configuration files for different servers\nin a separate version control repository and check them out on all\nservers.  Then symlink the file that is active for the server into the\nlocation where it\u2019s expected (eg:  /var/www/yourapplication ). \n Either way, in our case here we only expect one or two servers and we can\nupload them ahead of time by hand. \n \n \n First Deployment \u00b6 \n Now we can do our first deployment.  We have set up the servers so that\nthey have their virtual environments and activated apache configs.  Now we\ncan pack up the application and deploy it: \n $ fab pack deploy\n \n \n Fabric will now connect to all servers and run the commands as written\ndown in the fabfile.  First it will execute pack so that we have our\ntarball ready and then it will execute deploy and upload the source code\nto all servers and install it there.  Thanks to the  setup.py  file we\nwill automatically pull in the required libraries into our virtual\nenvironment. \n \n \n Next Steps \u00b6 \n From that point onwards there is so much that can be done to make\ndeployment actually fun: \n \n Create a  bootstrap  command that initializes new servers.  It could\ninitialize a new virtual environment, setup apache appropriately etc. \n Put configuration files into a separate version control repository\nand symlink the active configs into place. \n You could also put your application code into a repository and check\nout the latest version on the server and then install.  That way you\ncan also easily go back to older versions. \n hook in testing functionality so that you can deploy to an external\nserver and run the test suite. \n \n Working with Fabric is fun and you will notice that it\u2019s quite magical to\ntype  fab   deploy  and see your application being deployed automatically\nto one or more remote servers. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Deploying with Fabric \n Creating the first Fabfile \n Running Fabfiles \n The WSGI File \n The Configuration File \n First Deployment \n Next Steps \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Deploying with Setuptools \n           Next:  Using SQLite 3 with Flask \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/distribute/", "text": "\n   \n     \n     \n   \n     Deploying with Setuptools \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Deploying with Setuptools \u00b6 \n Setuptools , is an extension library that is commonly used to\ndistribute Python libraries and extensions. It extends distutils, a basic\nmodule installation system shipped with Python to also support various more\ncomplex constructs that make larger applications easier to distribute: \n \n support for dependencies : a library or application can declare a\nlist of other libraries it depends on which will be installed\nautomatically for you. \n package registry : setuptools registers your package with your\nPython installation.  This makes it possible to query information\nprovided by one package from another package.  The best known feature of\nthis system is the entry point support which allows one package to\ndeclare an \u201centry point\u201d that another package can hook into to extend the\nother package. \n installation manager :  pip  can install other libraries for you. \n \n If you have Python 2 (>=2.7.9) or Python 3 (>=3.4) installed from python.org,\nyou will already have pip and setuptools on your system.  Otherwise, you\nwill need to install them yourself. \n Flask itself, and all the libraries you can find on PyPI are distributed with\neither setuptools or distutils. \n In this case we assume your application is called\n yourapplication.py  and you are not using a module, but a  package . If you have not yet converted your application into\na package, head over to the  Larger Applications  pattern to see\nhow this can be done. \n A working deployment with setuptools is the first step into more complex\nand more automated deployment scenarios.  If you want to fully automate\nthe process, also read the  Deploying with Fabric  chapter. \n \n Basic Setup Script \u00b6 \n Because you have Flask installed, you have setuptools available on your system.\nFlask already depends upon setuptools. \n Standard disclaimer applies:  you better use a virtualenv . \n Your setup code always goes into a file named  setup.py  next to your\napplication.  The name of the file is only convention, but because\neverybody will look for a file with that name, you better not change it. \n A basic  setup.py  file for a Flask application looks like this: \n from   setuptools   import   setup \n\n setup ( \n     name = 'Your Application' , \n     version = '1.0' , \n     long_description = __doc__ , \n     packages = [ 'yourapplication' ], \n     include_package_data = True , \n     zip_safe = False , \n     install_requires = [ 'Flask' ] \n ) \n \n \n Please keep in mind that you have to list subpackages explicitly.  If you\nwant setuptools to lookup the packages for you automatically, you can use\nthe  find_packages  function: \n from   setuptools   import   setup ,   find_packages \n\n setup ( \n     ... \n     packages = find_packages () \n ) \n \n \n Most parameters to the  setup  function should be self explanatory,\n include_package_data  and  zip_safe  might not be.\n include_package_data  tells setuptools to look for a  MANIFEST.in  file\nand install all the entries that match as package data.  We will use this\nto distribute the static files and templates along with the Python module\n(see  Distributing Resources ).  The  zip_safe  flag can be used to\nforce or prevent zip Archive creation.  In general you probably don\u2019t want\nyour packages to be installed as zip files because some tools do not\nsupport them and they make debugging a lot harder. \n \n \n Tagging Builds \u00b6 \n It is useful to distinguish between release and development builds. Add a\n setup.cfg  file to configure these options. \n [ egg_info ] \n tag_build   =   . dev \n tag_date   =   1 \n\n [ aliases ] \n release   =   egg_info   - Db   '' \n \n \n Running  python   setup.py   sdist  will create a development package\nwith \u201c.dev\u201d and the current date appended:  flaskr-1.0.dev20160314.tar.gz .\nRunning  python   setup.py   release   sdist  will create a release package\nwith only the version:  flaskr-1.0.tar.gz . \n \n \n Distributing Resources \u00b6 \n If you try to install the package you just created, you will notice that\nfolders like  static  or  templates  are not installed for you.  The\nreason for this is that setuptools does not know which files to add for\nyou.  What you should do, is to create a  MANIFEST.in  file next to your\n setup.py  file.  This file lists all the files that should be added to\nyour tarball: \n recursive - include   yourapplication / templates   * \n recursive - include   yourapplication / static   * \n \n \n Don\u2019t forget that even if you enlist them in your  MANIFEST.in  file, they\nwon\u2019t be installed for you unless you set the  include_package_data \nparameter of the  setup  function to  True ! \n \n \n Declaring Dependencies \u00b6 \n Dependencies are declared in the  install_requires  parameter as a list.\nEach item in that list is the name of a package that should be pulled from\nPyPI on installation.  By default it will always use the most recent\nversion, but you can also provide minimum and maximum version\nrequirements.  Here some examples: \n install_requires = [ \n     'Flask>=0.2' , \n     'SQLAlchemy>=0.6' , \n     'BrokenPackage>=0.7,<=1.0' \n ] \n \n \n As mentioned earlier, dependencies are pulled from PyPI.  What if you\nwant to depend on a package that cannot be found on PyPI and won\u2019t be\nbecause it is an internal package you don\u2019t want to share with anyone?\nJust do it as if there was a PyPI entry and provide a list of\nalternative locations where setuptools should look for tarballs: \n dependency_links = [ 'http://example.com/yourfiles' ] \n \n \n Make sure that page has a directory listing and the links on the page are\npointing to the actual tarballs with their correct filenames as this is\nhow setuptools will find the files.  If you have an internal company\nserver that contains the packages, provide the URL to that server. \n \n \n Installing / Developing \u00b6 \n To install your application (ideally into a virtualenv) just run the\n setup.py  script with the  install  parameter.  It will install your\napplication into the virtualenv\u2019s site-packages folder and also download\nand install all dependencies: \n $ python setup.py install\n \n \n If you are developing on the package and also want the requirements to be\ninstalled, you can use the  develop  command instead: \n $ python setup.py develop\n \n \n This has the advantage of just installing a link to the site-packages\nfolder instead of copying the data over.  You can then continue to work on\nthe code without having to run  install  again after each change. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Deploying with Setuptools \n Basic Setup Script \n Tagging Builds \n Distributing Resources \n Declaring Dependencies \n Installing / Developing \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Using URL Processors \n           Next:  Deploying with Fabric \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/apierrors/", "text": "\n   \n     \n     \n   \n     Implementing API Exceptions \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Implementing API Exceptions \u00b6 \n It\u2019s very common to implement RESTful APIs on top of Flask.  One of the\nfirst things that developers run into is the realization that the builtin\nexceptions are not expressive enough for APIs and that the content type of\n text/html  they are emitting is not very useful for API consumers. \n The better solution than using  abort  to signal errors for invalid API\nusage is to implement your own exception type and install an error handler\nfor it that produces the errors in the format the user is expecting. \n \n Simple Exception Class \u00b6 \n The basic idea is to introduce a new exception that can take a proper\nhuman readable message, a status code for the error and some optional\npayload to give more context for the error. \n This is a simple example: \n from   flask   import   jsonify \n\n class   InvalidUsage ( Exception ): \n     status_code   =   400 \n\n     def   __init__ ( self ,   message ,   status_code = None ,   payload = None ): \n         Exception . __init__ ( self ) \n         self . message   =   message \n         if   status_code   is   not   None : \n             self . status_code   =   status_code \n         self . payload   =   payload \n\n     def   to_dict ( self ): \n         rv   =   dict ( self . payload   or   ()) \n         rv [ 'message' ]   =   self . message \n         return   rv \n \n \n A view can now raise that exception with an error message.  Additionally\nsome extra payload can be provided as a dictionary through the  payload \nparameter. \n \n \n Registering an Error Handler \u00b6 \n At that point views can raise that error, but it would immediately result\nin an internal server error.  The reason for this is that there is no\nhandler registered for this error class.  That however is easy to add: \n @app . errorhandler ( InvalidUsage ) \n def   handle_invalid_usage ( error ): \n     response   =   jsonify ( error . to_dict ()) \n     response . status_code   =   error . status_code \n     return   response \n \n \n \n \n Usage in Views \u00b6 \n Here is how a view can use that functionality: \n @app . route ( '/foo' ) \n def   get_foo (): \n     raise   InvalidUsage ( 'This view is gone' ,   status_code = 410 ) \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Implementing API Exceptions \n Simple Exception Class \n Registering an Error Handler \n Usage in Views \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Application Dispatching \n           Next:  Using URL Processors \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/appfactories/", "text": "\n   \n     \n     \n   \n     Application Factories \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Application Factories \u00b6 \n If you are already using packages and blueprints for your application\n( Modular Applications with Blueprints ) there are a couple of really nice ways to further improve\nthe experience.  A common pattern is creating the application object when\nthe blueprint is imported.  But if you move the creation of this object\ninto a function, you can then create multiple instances of this app later. \n So why would you want to do this? \n \n Testing.  You can have instances of the application with different\nsettings to test every case. \n Multiple instances.  Imagine you want to run different versions of the\nsame application.  Of course you could have multiple instances with\ndifferent configs set up in your webserver, but if you use factories,\nyou can have multiple instances of the same application running in the\nsame application process which can be handy. \n \n So how would you then actually implement that? \n \n Basic Factories \u00b6 \n The idea is to set up the application in a function.  Like this: \n def   create_app ( config_filename ): \n     app   =   Flask ( __name__ ) \n     app . config . from_pyfile ( config_filename ) \n\n     from   yourapplication.model   import   db \n     db . init_app ( app ) \n\n     from   yourapplication.views.admin   import   admin \n     from   yourapplication.views.frontend   import   frontend \n     app . register_blueprint ( admin ) \n     app . register_blueprint ( frontend ) \n\n     return   app \n \n \n The downside is that you cannot use the application object in the blueprints\nat import time.  You can however use it from within a request.  How do you\nget access to the application with the config?  Use\n current_app : \n from   flask   import   current_app ,   Blueprint ,   render_template \n admin   =   Blueprint ( 'admin' ,   __name__ ,   url_prefix = '/admin' ) \n\n @admin . route ( '/' ) \n def   index (): \n     return   render_template ( current_app . config [ 'INDEX_TEMPLATE' ]) \n \n \n Here we look up the name of a template in the config. \n \n \n Factories & Extensions \u00b6 \n It\u2019s preferable to create your extensions and app factories so that the\nextension object does not initially get bound to the application. \n Using  Flask-SQLAlchemy ,\nas an example, you should not do something along those lines: \n def   create_app ( config_filename ): \n     app   =   Flask ( __name__ ) \n     app . config . from_pyfile ( config_filename ) \n\n     db   =   SQLAlchemy ( app ) \n \n \n But, rather, in model.py (or equivalent): \n db   =   SQLAlchemy () \n \n \n and in your application.py (or equivalent): \n def   create_app ( config_filename ): \n     app   =   Flask ( __name__ ) \n     app . config . from_pyfile ( config_filename ) \n\n     from   yourapplication.model   import   db \n     db . init_app ( app ) \n \n \n Using this design pattern, no application-specific state is stored on the\nextension object, so one extension object can be used for multiple apps.\nFor more information about the design of extensions refer to  Flask Extension Development . \n \n \n Using Applications \u00b6 \n To run such an application, you can use the  flask  command: \n export   FLASK_APP = myapp \n flask   run \n \n \n Flask will automatically detect the factory ( create_app  or  make_app )\nin  myapp . You can also pass arguments to the factory like this: \n export   FLASK_APP = \"myapp:create_app('dev')\" \n flask   run \n \n \n Then the  create_app  factory in  myapp  is called with the string\n 'dev'  as the argument. See  Command Line Interface  for more detail. \n \n \n Factory Improvements \u00b6 \n The factory function above is not very clever, but you can improve it.\nThe following changes are straightforward to implement: \n \n Make it possible to pass in configuration values for unit tests so that\nyou don\u2019t have to create config files on the filesystem. \n Call a function from a blueprint when the application is setting up so\nthat you have a place to modify attributes of the application (like\nhooking in before/after request handlers etc.) \n Add in WSGI middlewares when the application is being created if necessary. \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Application Factories \n Basic Factories \n Factories & Extensions \n Using Applications \n Factory Improvements \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Larger Applications \n           Next:  Application Dispatching \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/urlprocessors/", "text": "\n   \n     \n     \n   \n     Using URL Processors \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Using URL Processors \u00b6 \n \n Changelog \n New in version 0.7. \n \n Flask 0.7 introduces the concept of URL processors.  The idea is that you\nmight have a bunch of resources with common parts in the URL that you\ndon\u2019t always explicitly want to provide.  For instance you might have a\nbunch of URLs that have the language code in it but you don\u2019t want to have\nto handle it in every single function yourself. \n URL processors are especially helpful when combined with blueprints.  We\nwill handle both application specific URL processors here as well as\nblueprint specifics. \n \n Internationalized Application URLs \u00b6 \n Consider an application like this: \n from   flask   import   Flask ,   g \n\n app   =   Flask ( __name__ ) \n\n @app . route ( '/<lang_code>/' ) \n def   index ( lang_code ): \n     g . lang_code   =   lang_code \n     ... \n\n @app . route ( '/<lang_code>/about' ) \n def   about ( lang_code ): \n     g . lang_code   =   lang_code \n     ... \n \n \n This is an awful lot of repetition as you have to handle the language code\nsetting on the  g  object yourself in every single function.\nSure, a decorator could be used to simplify this, but if you want to\ngenerate URLs from one function to another you would have to still provide\nthe language code explicitly which can be annoying. \n For the latter, this is where  url_defaults()  functions\ncome in.  They can automatically inject values into a call for\n url_for()  automatically.  The code below checks if the\nlanguage code is not yet in the dictionary of URL values and if the\nendpoint wants a value named  'lang_code' : \n @app . url_defaults \n def   add_language_code ( endpoint ,   values ): \n     if   'lang_code'   in   values   or   not   g . lang_code : \n         return \n     if   app . url_map . is_endpoint_expecting ( endpoint ,   'lang_code' ): \n         values [ 'lang_code' ]   =   g . lang_code \n \n \n The method  is_endpoint_expecting()  of the URL\nmap can be used to figure out if it would make sense to provide a language\ncode for the given endpoint. \n The reverse of that function are\n url_value_preprocessor() s.  They are executed right\nafter the request was matched and can execute code based on the URL\nvalues.  The idea is that they pull information out of the values\ndictionary and put it somewhere else: \n @app . url_value_preprocessor \n def   pull_lang_code ( endpoint ,   values ): \n     g . lang_code   =   values . pop ( 'lang_code' ,   None ) \n \n \n That way you no longer have to do the  lang_code  assignment to\n g  in every function.  You can further improve that by\nwriting your own decorator that prefixes URLs with the language code, but\nthe more beautiful solution is using a blueprint.  Once the\n 'lang_code'  is popped from the values dictionary and it will no longer\nbe forwarded to the view function reducing the code to this: \n from   flask   import   Flask ,   g \n\n app   =   Flask ( __name__ ) \n\n @app . url_defaults \n def   add_language_code ( endpoint ,   values ): \n     if   'lang_code'   in   values   or   not   g . lang_code : \n         return \n     if   app . url_map . is_endpoint_expecting ( endpoint ,   'lang_code' ): \n         values [ 'lang_code' ]   =   g . lang_code \n\n @app . url_value_preprocessor \n def   pull_lang_code ( endpoint ,   values ): \n     g . lang_code   =   values . pop ( 'lang_code' ,   None ) \n\n @app . route ( '/<lang_code>/' ) \n def   index (): \n     ... \n\n @app . route ( '/<lang_code>/about' ) \n def   about (): \n     ... \n \n \n \n \n Internationalized Blueprint URLs \u00b6 \n Because blueprints can automatically prefix all URLs with a common string\nit\u2019s easy to automatically do that for every function.  Furthermore\nblueprints can have per-blueprint URL processors which removes a whole lot\nof logic from the  url_defaults()  function because it no\nlonger has to check if the URL is really interested in a  'lang_code' \nparameter: \n from   flask   import   Blueprint ,   g \n\n bp   =   Blueprint ( 'frontend' ,   __name__ ,   url_prefix = '/<lang_code>' ) \n\n @bp . url_defaults \n def   add_language_code ( endpoint ,   values ): \n     values . setdefault ( 'lang_code' ,   g . lang_code ) \n\n @bp . url_value_preprocessor \n def   pull_lang_code ( endpoint ,   values ): \n     g . lang_code   =   values . pop ( 'lang_code' ) \n\n @bp . route ( '/' ) \n def   index (): \n     ... \n\n @bp . route ( '/about' ) \n def   about (): \n     ... \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Using URL Processors \n Internationalized Application URLs \n Internationalized Blueprint URLs \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Implementing API Exceptions \n           Next:  Deploying with Setuptools \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/appdispatch/", "text": "\n   \n     \n     \n   \n     Application Dispatching \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Application Dispatching \u00b6 \n Application dispatching is the process of combining multiple Flask\napplications on the WSGI level.  You can combine not only Flask\napplications but any WSGI application.  This would allow you to run a\nDjango and a Flask application in the same interpreter side by side if\nyou want.  The usefulness of this depends on how the applications work\ninternally. \n The fundamental difference from the  module approach  is that in this case you are running the same or\ndifferent Flask applications that are entirely isolated from each other.\nThey run different configurations and are dispatched on the WSGI level. \n \n Working with this Document \u00b6 \n Each of the techniques and examples below results in an  application  object\nthat can be run with any WSGI server.  For production, see  Deployment Options .\nFor development, Werkzeug provides a builtin server for development available\nat  werkzeug.serving.run_simple() : \n from   werkzeug.serving   import   run_simple \n run_simple ( 'localhost' ,   5000 ,   application ,   use_reloader = True ) \n \n \n Note that  run_simple  is not intended for\nuse in production.  Use a  full-blown WSGI server . \n In order to use the interactive debugger, debugging must be enabled both on\nthe application and the simple server. Here is the \u201chello world\u201d example with\ndebugging and  run_simple : \n from   flask   import   Flask \n from   werkzeug.serving   import   run_simple \n\n app   =   Flask ( __name__ ) \n app . debug   =   True \n\n @app . route ( '/' ) \n def   hello_world (): \n     return   'Hello World!' \n\n if   __name__   ==   '__main__' : \n     run_simple ( 'localhost' ,   5000 ,   app , \n                use_reloader = True ,   use_debugger = True ,   use_evalex = True ) \n \n \n \n \n Combining Applications \u00b6 \n If you have entirely separated applications and you want them to work next\nto each other in the same Python interpreter process you can take\nadvantage of the  werkzeug.wsgi.DispatcherMiddleware .  The idea\nhere is that each Flask application is a valid WSGI application and they\nare combined by the dispatcher middleware into a larger one that is\ndispatched based on prefix. \n For example you could have your main application run on  /  and your\nbackend interface on  /backend : \n from   werkzeug.wsgi   import   DispatcherMiddleware \n from   frontend_app   import   application   as   frontend \n from   backend_app   import   application   as   backend \n\n application   =   DispatcherMiddleware ( frontend ,   { \n     '/backend' :       backend \n }) \n \n \n \n \n Dispatch by Subdomain \u00b6 \n Sometimes you might want to use multiple instances of the same application\nwith different configurations.  Assuming the application is created inside\na function and you can call that function to instantiate it, that is\nreally easy to implement.  In order to develop your application to support\ncreating new instances in functions have a look at the\n Application Factories  pattern. \n A very common example would be creating applications per subdomain.  For\ninstance you configure your webserver to dispatch all requests for all\nsubdomains to your application and you then use the subdomain information\nto create user-specific instances.  Once you have your server set up to\nlisten on all subdomains you can use a very simple WSGI application to do\nthe dynamic application creation. \n The perfect level for abstraction in that regard is the WSGI layer.  You\nwrite your own WSGI application that looks at the request that comes and\ndelegates it to your Flask application.  If that application does not\nexist yet, it is dynamically created and remembered: \n from   threading   import   Lock \n\n class   SubdomainDispatcher ( object ): \n\n     def   __init__ ( self ,   domain ,   create_app ): \n         self . domain   =   domain \n         self . create_app   =   create_app \n         self . lock   =   Lock () \n         self . instances   =   {} \n\n     def   get_application ( self ,   host ): \n         host   =   host . split ( ':' )[ 0 ] \n         assert   host . endswith ( self . domain ),   'Configuration error' \n         subdomain   =   host [: - len ( self . domain )] . rstrip ( '.' ) \n         with   self . lock : \n             app   =   self . instances . get ( subdomain ) \n             if   app   is   None : \n                 app   =   self . create_app ( subdomain ) \n                 self . instances [ subdomain ]   =   app \n             return   app \n\n     def   __call__ ( self ,   environ ,   start_response ): \n         app   =   self . get_application ( environ [ 'HTTP_HOST' ]) \n         return   app ( environ ,   start_response ) \n \n \n This dispatcher can then be used like this: \n from   myapplication   import   create_app ,   get_user_for_subdomain \n from   werkzeug.exceptions   import   NotFound \n\n def   make_app ( subdomain ): \n     user   =   get_user_for_subdomain ( subdomain ) \n     if   user   is   None : \n         # if there is no user for that subdomain we still have \n         # to return a WSGI application that handles that request. \n         # We can then just return the NotFound() exception as \n         # application which will render a default 404 page. \n         # You might also redirect the user to the main page then \n         return   NotFound () \n\n     # otherwise create the application for the specific user \n     return   create_app ( user ) \n\n application   =   SubdomainDispatcher ( 'example.com' ,   make_app ) \n \n \n \n \n Dispatch by Path \u00b6 \n Dispatching by a path on the URL is very similar.  Instead of looking at\nthe  Host  header to figure out the subdomain one simply looks at the\nrequest path up to the first slash: \n from   threading   import   Lock \n from   werkzeug.wsgi   import   pop_path_info ,   peek_path_info \n\n class   PathDispatcher ( object ): \n\n     def   __init__ ( self ,   default_app ,   create_app ): \n         self . default_app   =   default_app \n         self . create_app   =   create_app \n         self . lock   =   Lock () \n         self . instances   =   {} \n\n     def   get_application ( self ,   prefix ): \n         with   self . lock : \n             app   =   self . instances . get ( prefix ) \n             if   app   is   None : \n                 app   =   self . create_app ( prefix ) \n                 if   app   is   not   None : \n                     self . instances [ prefix ]   =   app \n             return   app \n\n     def   __call__ ( self ,   environ ,   start_response ): \n         app   =   self . get_application ( peek_path_info ( environ )) \n         if   app   is   not   None : \n             pop_path_info ( environ ) \n         else : \n             app   =   self . default_app \n         return   app ( environ ,   start_response ) \n \n \n The big difference between this and the subdomain one is that this one\nfalls back to another application if the creator function returns  None : \n from   myapplication   import   create_app ,   default_app ,   get_user_for_prefix \n\n def   make_app ( prefix ): \n     user   =   get_user_for_prefix ( prefix ) \n     if   user   is   not   None : \n         return   create_app ( user ) \n\n application   =   PathDispatcher ( default_app ,   make_app ) \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Application Dispatching \n Working with this Document \n Combining Applications \n Dispatch by Subdomain \n Dispatch by Path \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Application Factories \n           Next:  Implementing API Exceptions \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/packages/", "text": "\n   \n     \n     \n   \n     Larger Applications \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Larger Applications \u00b6 \n For larger applications it\u2019s a good idea to use a package instead of a\nmodule.  That is quite simple.  Imagine a small application looks like\nthis: \n / yourapplication \n     yourapplication . py \n     / static \n         style . css \n     / templates \n         layout . html \n         index . html \n         login . html \n         ... \n \n \n The  tutorial  is structured this way, see the\n example code . \n \n Simple Packages \u00b6 \n To convert that into a larger one, just create a new folder\n yourapplication  inside the existing one and move everything below it.\nThen rename  yourapplication.py  to  __init__.py .  (Make sure to delete\nall  .pyc  files first, otherwise things would most likely break) \n You should then end up with something like that: \n / yourapplication \n     / yourapplication \n         __init__ . py \n         / static \n             style . css \n         / templates \n             layout . html \n             index . html \n             login . html \n             ... \n \n \n But how do you run your application now?  The naive  python \n yourapplication/__init__.py  will not work.  Let\u2019s just say that Python\ndoes not want modules in packages to be the startup file.  But that is not\na big problem, just add a new file called  setup.py  next to the inner\n yourapplication  folder with the following contents: \n from   setuptools   import   setup \n\n setup ( \n     name = 'yourapplication' , \n     packages = [ 'yourapplication' ], \n     include_package_data = True , \n     install_requires = [ \n         'flask' , \n     ], \n ) \n \n \n In order to run the application you need to export an environment variable\nthat tells Flask where to find the application instance: \n export   FLASK_APP = yourapplication \n \n \n If you are outside of the project directory make sure to provide the exact\npath to your application directory. Similarly you can turn on the\ndevelopment features like this: \n export   FLASK_ENV = development \n \n \n In order to install and run the application you need to issue the following\ncommands: \n pip   install   - e   . \n flask   run \n \n \n What did we gain from this?  Now we can restructure the application a bit\ninto multiple modules.  The only thing you have to remember is the\nfollowing quick checklist: \n \n the  Flask  application object creation has to be in the\n __init__.py  file.  That way each module can import it safely and the\n __name__  variable will resolve to the correct package. \n all the view functions (the ones with a  route() \ndecorator on top) have to be imported in the  __init__.py  file.\nNot the object itself, but the module it is in. Import the view module\n after the application object is created . \n \n Here\u2019s an example  __init__.py : \n from   flask   import   Flask \n app   =   Flask ( __name__ ) \n\n import   yourapplication.views \n \n \n And this is what  views.py  would look like: \n from   yourapplication   import   app \n\n @app . route ( '/' ) \n def   index (): \n     return   'Hello World!' \n \n \n You should then end up with something like that: \n / yourapplication \n     setup . py \n     / yourapplication \n         __init__ . py \n         views . py \n         / static \n             style . css \n         / templates \n             layout . html \n             index . html \n             login . html \n             ... \n \n \n \n Circular Imports \n Every Python programmer hates them, and yet we just added some:\ncircular imports (That\u2019s when two modules depend on each other.  In this\ncase  views.py  depends on  __init__.py ).  Be advised that this is a\nbad idea in general but here it is actually fine.  The reason for this is\nthat we are not actually using the views in  __init__.py  and just\nensuring the module is imported and we are doing that at the bottom of\nthe file. \n There are still some problems with that approach but if you want to use\ndecorators there is no way around that.  Check out the\n Becoming Big  section for some inspiration how to deal with that. \n \n \n \n Working with Blueprints \u00b6 \n If you have larger applications it\u2019s recommended to divide them into\nsmaller groups where each group is implemented with the help of a\nblueprint.  For a gentle introduction into this topic refer to the\n Modular Applications with Blueprints  chapter of the documentation. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Larger Applications \n Simple Packages \n Working with Blueprints \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Patterns for Flask \n           Next:  Application Factories \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/shell/", "text": "\n   \n     \n     \n   \n     Working with the Shell \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Working with the Shell \u00b6 \n \n Changelog \n New in version 0.3. \n \n One of the reasons everybody loves Python is the interactive shell.  It\nbasically allows you to execute Python commands in real time and\nimmediately get results back.  Flask itself does not come with an\ninteractive shell, because it does not require any specific setup upfront,\njust import your application and start playing around. \n There are however some handy helpers to make playing around in the shell a\nmore pleasant experience.  The main issue with interactive console\nsessions is that you\u2019re not triggering a request like a browser does which\nmeans that  g ,  request  and others are not\navailable.  But the code you want to test might depend on them, so what\ncan you do? \n This is where some helper functions come in handy.  Keep in mind however\nthat these functions are not only there for interactive shell usage, but\nalso for unittesting and other situations that require a faked request\ncontext. \n Generally it\u2019s recommended that you read the  The Request Context \nchapter of the documentation first. \n \n Command Line Interface \u00b6 \n Starting with Flask 0.11 the recommended way to work with the shell is the\n flask   shell  command which does a lot of this automatically for you.\nFor instance the shell is automatically initialized with a loaded\napplication context. \n For more information see  Command Line Interface . \n \n \n Creating a Request Context \u00b6 \n The easiest way to create a proper request context from the shell is by\nusing the  test_request_context  method which creates\nus a  RequestContext : \n >>>  ctx   =   app . test_request_context () \n \n \n Normally you would use the  with  statement to make this request object\nactive, but in the shell it\u2019s easier to use the\n push()  and\n pop()  methods by hand: \n >>>  ctx . push () \n \n \n From that point onwards you can work with the request object until you\ncall  pop : \n >>>  ctx . pop () \n \n \n \n \n Firing Before/After Request \u00b6 \n By just creating a request context, you still don\u2019t have run the code that\nis normally run before a request.  This might result in your database\nbeing unavailable if you are connecting to the database in a\nbefore-request callback or the current user not being stored on the\n g  object etc. \n This however can easily be done yourself.  Just call\n preprocess_request() : \n >>>  ctx   =   app . test_request_context () \n >>>  ctx . push () \n >>>  app . preprocess_request () \n \n \n Keep in mind that the  preprocess_request()  function\nmight return a response object, in that case just ignore it. \n To shutdown a request, you need to trick a bit before the after request\nfunctions (triggered by  process_response() ) operate on\na response object: \n >>>  app . process_response ( app . response_class ()) \n <Response 0 bytes [200 OK]> \n >>>  ctx . pop () \n \n \n The functions registered as  teardown_request()  are\nautomatically called when the context is popped.  So this is the perfect\nplace to automatically tear down resources that were needed by the request\ncontext (such as database connections). \n \n \n Further Improving the Shell Experience \u00b6 \n If you like the idea of experimenting in a shell, create yourself a module\nwith stuff you want to star import into your interactive session.  There\nyou could also define some more helper methods for common things such as\ninitializing the database, dropping tables etc. \n Just put them into a module (like  shelltools ) and import from there: \n >>>  from   shelltools   import   * \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Working with the Shell \n Command Line Interface \n Creating a Request Context \n Firing Before/After Request \n Further Improving the Shell Experience \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Development Server \n           Next:  Patterns for Flask \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/server/", "text": "\n   \n     \n     \n   \n     Development Server \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Development Server \u00b6 \n Starting with Flask 0.11 there are multiple built-in ways to run a\ndevelopment server.  The best one is the  flask  command line utility\nbut you can also continue using the  Flask.run()  method. \n \n Command Line \u00b6 \n The  flask  command line script ( Command Line Interface ) is strongly\nrecommended for development because it provides a superior reload\nexperience due to how it loads the application.  The basic usage is like\nthis: \n $ export FLASK_APP=my_application\n$ export FLASK_ENV=development\n$ flask run\n \n \n This enables the development environment, including the interactive\ndebugger and reloader, and then starts the server on\n http://localhost:5000/ . \n The individual features of the server can be controlled by passing more\narguments to the  run  option. For instance the reloader can be\ndisabled: \n $ flask run --no-reload\n \n \n \n Note \n Prior to Flask 1.0 the  FLASK_ENV  environment variable was\nnot supported and you needed to enable debug mode by exporting\n FLASK_DEBUG=1 . This can still be used to control debug mode, but\nyou should prefer setting the development environment as shown\nabove. \n \n \n \n In Code \u00b6 \n The alternative way to start the application is through the\n Flask.run()  method.  This will immediately launch a local server\nexactly the same way the  flask  script does. \n Example: \n if   __name__   ==   '__main__' : \n     app . run () \n \n \n This works well for the common case but it does not work well for\ndevelopment which is why from Flask 0.11 onwards the  flask \nmethod is recommended.  The reason for this is that due to how the reload\nmechanism works there are some bizarre side-effects (like executing\ncertain code twice, sometimes crashing without message or dying when a\nsyntax or import error happens). \n It is however still a perfectly valid method for invoking a non automatic\nreloading application. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Development Server \n Command Line \n In Code \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Command Line Interface \n           Next:  Working with the Shell \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/extensions/", "text": "\n   \n     \n     \n   \n     Extensions \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Extensions \u00b6 \n Extensions are extra packages that add functionality to a Flask\napplication. For example, an extension might add support for sending\nemail or connecting to a database. Some extensions add entire new\nframeworks to help build certain types of applications, like a ReST API. \n \n Finding Extensions \u00b6 \n Flask extensions are usually named \u201cFlask-Foo\u201d or \u201cFoo-Flask\u201d. Many\nextensions are listed in the  Extension Registry , which can be updated\nby extension developers. You can also search PyPI for packages tagged\nwith  Framework :: Flask . \n \n \n Using Extensions \u00b6 \n Consult each extension\u2019s documentation for installation, configuration,\nand usage instructions. Generally, extensions pull their own\nconfiguration from  app.config  and are\npassed an application instance during initialization. For example,\nan extension caled \u201cFlask-Foo\u201d might be used like this: \n from   flask_foo   import   Foo \n\n foo   =   Foo () \n\n app   =   Flask ( __name__ ) \n app . config . update ( \n     FOO_BAR = 'baz' , \n     FOO_SPAM = 'eggs' , \n ) \n\n foo . init_app ( app ) \n \n \n \n \n Building Extensions \u00b6 \n While the  Extension Registry  contains many Flask extensions, you may\nnot find an extension that fits your need. If this is the case, you can\ncreate your own. Read  Flask Extension Development  to develop your own Flask\nextension. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Extensions \n Finding Extensions \n Using Extensions \n Building Extensions \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Modular Applications with Blueprints \n           Next:  Command Line Interface \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/cli/", "text": "\n   \n     \n     \n   \n     Command Line Interface \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Command Line Interface \u00b6 \n Installing Flask installs the  flask  script, a  Click  command line\ninterface, in your virtualenv. Executed from the terminal, this script gives\naccess to built-in, extension, and application-defined commands. The  --help \noption will give more information about any commands and options. \n \n Application Discovery \u00b6 \n The  flask  command is installed by Flask, not your application; it must be\ntold where to find your application in order to use it. The  FLASK_APP \nenvironment variable is used to specify how to load the application. \n Unix Bash (Linux, Mac, etc.): \n $ export FLASK_APP=hello\n$ flask run\n \n \n Windows CMD: \n >   set   FLASK_APP = hello \n >   flask   run \n \n \n Windows PowerShell: \n > $env:FLASK_APP = \"hello\"\n> flask run\n \n \n While  FLASK_APP  supports a variety of options for specifying your\napplication, most use cases should be simple. Here are the typical values: \n \n (nothing) \n The file  wsgi.py  is imported, automatically detecting an app\n( app ). This provides an easy way to create an app from a factory with\nextra arguments. \n FLASK_APP=hello \n The name is imported, automatically detecting an app ( app ) or factory\n( create_app ). \n \n \n FLASK_APP  has three parts: an optional path that sets the current working\ndirectory, a Python file or dotted import path, and an optional variable\nname of the instance or factory. If the name is a factory, it can optionally\nbe followed by arguments in parentheses. The following values demonstrate these\nparts: \n \n FLASK_APP=src/hello \n Sets the current working directory to  src  then imports  hello . \n FLASK_APP=hello.web \n Imports the path  hello.web . \n FLASK_APP=hello:app2 \n Uses the  app2  Flask instance in  hello . \n FLASK_APP=\"hello:create_app('dev')\" \n The  create_app  factory in  hello  is called with the string  'dev' \nas the argument. \n \n If  FLASK_APP  is not set, the command will look for a file called\n wsgi.py  or  app.py  and try to detect an application instance or\nfactory. \n Within the given import, the command looks for an application instance named\n app  or  application , then any application instance. If no instance is\nfound, the command looks for a factory function named  create_app  or\n make_app  that returns an instance. \n When calling an application factory, if the factory takes an argument named\n info , then the  ScriptInfo  instance is passed as a keyword\nargument. If parentheses follow the factory name, their contents are parsed\nas Python literals and passes as arguments to the function. This means that\nstrings must still be in quotes. \n \n \n Run the Development Server \u00b6 \n The  run  command will start the development server. It\nreplaces the  Flask.run()  method in most cases. \n $ flask run\n * Serving Flask app \"hello\"\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n \n \n \n Warning \n Do not use this command to run your application in production.\nOnly use the development server during development. The development server\nis provided for convenience, but is not designed to be particularly secure,\nstable, or efficient. See  Deployment Options  for how to run in production. \n \n \n \n Open a Shell \u00b6 \n To explore the data in your application, you can start an interactive Python\nshell with the  shell  command. An application\ncontext will be active, and the app instance will be imported. \n $ flask shell\nPython 3.6.2 (default, Jul 20 2017, 03:52:27)\n[GCC 7.1.1 20170630] on linux\nApp: example\nInstance: /home/user/Projects/hello/instance\n>>>\n \n \n Use  shell_context_processor()  to add other automatic imports. \n \n \n Environments \u00b6 \n \n New in version 1.0. \n \n \n Changelog The environment in which the Flask app runs is set by the\n FLASK_ENV  environment variable. If not set it defaults to\n production . The other recognized environment is  development .\nFlask and extensions may choose to enable behaviors based on the\nenvironment. \n If the env is set to  development , the  flask  command will enable\ndebug mode and  flask   run  will enable the interactive debugger and\nreloader. \n $ FLASK_ENV=development flask run\n * Serving Flask app \"hello\"\n * Environment: development\n * Debug mode: on\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with inotify reloader\n * Debugger is active!\n * Debugger PIN: 223-456-919\n \n \n \n \n Debug Mode \u00b6 \n Debug mode will be enabled when  FLASK_ENV  is  development ,\nas described above. If you want to control debug mode separately, use\n FLASK_DEBUG . The value  1  enables it,  0  disables it. \n \n \n Environment Variables From dotenv \u00b6 \n Rather than setting  FLASK_APP  each time you open a new terminal, you can\nuse Flask\u2019s dotenv support to set environment variables automatically. \n If  python-dotenv  is installed, running the  flask  command will set\nenvironment variables defined in the files  .env  and  .flaskenv .\nThis can be used to avoid having to set  FLASK_APP  manually every time you\nopen a new terminal, and to set configuration using environment variables\nsimilar to how some deployment services work. \n Variables set on the command line are used over those set in  .env ,\nwhich are used over those set in  .flaskenv .  .flaskenv  should be\nused for public variables, such as  FLASK_APP , while  .env  should not\nbe committed to your repository so that it can set private variables. \n Directories are scanned upwards from the directory you call  flask \nfrom to locate the files. The current working directory will be set to the\nlocation of the file, with the assumption that that is the top level project\ndirectory. \n The files are only loaded by the  flask  command or calling\n run() . If you would like to load these files when running in\nproduction, you should call  load_dotenv()  manually. \n \n Setting Command Options \u00b6 \n Click is configured to load default values for command options from\nenvironment variables. The variables use the pattern\n FLASK_COMMAND_OPTION . For example, to set the port for the run\ncommand, instead of  flask   run   --port   8000 : \n export FLASK_RUN_PORT=8000\nflask run\n * Running on http://127.0.0.1:8000/\n \n \n These can be added to the  .flaskenv  file just like  FLASK_APP  to\ncontrol default command options. \n \n \n Disable dotenv \u00b6 \n The  flask  command will show a message if it detects dotenv files but\npython-dotenv is not installed. \n flask run\n * Tip: There are .env files present. Do \"pip install python-dotenv\" to use them.\n \n \n You can tell Flask not to load dotenv files even when python-dotenv is\ninstalled by setting the  FLASK_SKIP_DOTENV  environment variable.\nThis can be useful if you want to load them manually, or if you\u2019re using\na project runner that loads them already. Keep in mind that the\nenvironment variables must be set before the app loads or it won\u2019t\nconfigure as expected. \n export FLASK_SKIP_DOTENV=1\nflask run\n \n \n \n \n \n Environment Variables From virtualenv \u00b6 \n If you do not want to install dotenv support, you can still set environment\nvariables by adding them to the end of the virtualenv\u2019s  activate \nscript. Activating the virtualenv will set the variables. \n Unix Bash,  venv/bin/activate : \n export   FLASK_APP = hello \n \n \n Windows CMD,  venv\\Scripts\\activate.bat : \n set   FLASK_APP = hello \n \n \n It is preferred to use dotenv support over this, since  .flaskenv  can be\ncommitted to the repository so that it works automatically wherever the project\nis checked out. \n \n \n Custom Commands \u00b6 \n The  flask  command is implemented using  Click . See that project\u2019s\ndocumentation for full information about writing commands. \n This example adds the command  create_user  that takes the argument\n name . \n import   click \n from   flask   import   Flask \n\n app   =   Flask ( __name__ ) \n\n @app . cli . command () \n @click . argument ( 'name' ) \n def   create_user ( name ): \n     ... \n \n \n flask   create_user   admin \n \n \n This example adds the same command, but as  user   create , a command in a\ngroup. This is useful if you want to organize multiple related commands. \n import   click \n from   flask   import   Flask \n from   flask.cli   import   AppGroup \n\n app   =   Flask ( __name__ ) \n user_cli   =   AppGroup ( 'user' ) \n\n @user_cli . command ( 'create' ) \n @click . argument ( 'name' ) \n def   create_user ( name ): \n     ... \n\n app . cli . add_command ( user_cli ) \n \n \n flask   user   create   demo \n \n \n See  Testing CLI Commands  for an overview of how to test your custom\ncommands. \n \n Application Context \u00b6 \n Commands added using the Flask app\u2019s  cli \n command()  decorator will be executed with an application\ncontext pushed, so your command and extensions have access to the app and its\nconfiguration. If you create a command using the Click  command() \ndecorator instead of the Flask decorator, you can use\n with_appcontext()  to get the same behavior. \n import   click \n from   flask.cli   import   with_appcontext \n\n @click . command \n @with_appcontext \n def   do_work (): \n     ... \n\n app . cli . add_command ( do_work ) \n \n \n If you\u2019re sure a command doesn\u2019t need the context, you can disable it: \n @app . cli . command ( with_appcontext = False ) \n def   do_work (): \n     ... \n \n \n \n \n \n Plugins \u00b6 \n Flask will automatically load commands specified in the  flask.commands \n entry point . This is useful for extensions that want to add commands when\nthey are installed. Entry points are specified in  setup.py \n from   setuptools   import   setup \n\n setup ( \n     name = 'flask-my-extension' , \n     ... , \n     entry_points = { \n         'flask.commands' :   [ \n             'my-command=flask_my_extension.commands:cli' \n         ], \n     }, \n ) \n \n \n Inside  flask_my_extension/commands.py  you can then export a Click\nobject: \n import   click \n\n @click . command () \n def   cli (): \n     ... \n \n \n Once that package is installed in the same virtualenv as your Flask project,\nyou can run  flask   my-command  to invoke the command. \n \n \n Custom Scripts \u00b6 \n When you are using the app factory pattern, it may be more convenient to define\nyour own Click script. Instead of using  FLASK_APP  and letting Flask load\nyour application, you can create your own Click object and export it as a\n console script  entry point. \n Create an instance of  FlaskGroup  and pass it the factory: \n import   click \n from   flask   import   Flask \n from   flask.cli   import   FlaskGroup \n\n def   create_app (): \n     app   =   Flask ( 'wiki' ) \n     # other setup \n     return   app \n\n @click . group ( cls = FlaskGroup ,   create_app = create_app ) \n def   cli (): \n     \"\"\"Management script for the Wiki application.\"\"\" \n \n \n Define the entry point in  setup.py : \n from   setuptools   import   setup \n\n setup ( \n     name = 'flask-my-extension' , \n     ... , \n     entry_points = { \n         'console_scripts' :   [ \n             'wiki=wiki:cli' \n         ], \n     }, \n ) \n \n \n Install the application in the virtualenv in editable mode and the custom\nscript is available. Note that you don\u2019t need to set  FLASK_APP . \n $ pip install -e .\n$ wiki run\n \n \n \n Errors in Custom Scripts \n When using a custom script, if you introduce an error in your\nmodule-level code, the reloader will fail because it can no longer\nload the entry point. \n The  flask  command, being separate from your code, does not have\nthis issue and is recommended in most cases. \n \n \n \n PyCharm Integration \u00b6 \n Prior to PyCharm 2018.1, the Flask CLI features weren\u2019t yet fully\nintegrated into PyCharm. We have to do a few tweaks to get them working\nsmoothly. These instructions should be similar for any other IDE you\nmight want to use. \n In PyCharm, with your project open, click on  Run  from the menu bar and\ngo to  Edit Configurations . You\u2019ll be greeted by a screen similar to\nthis: \n \n There\u2019s quite a few options to change, but once we\u2019ve done it for one\ncommand, we can easily copy the entire configuration and make a single\ntweak to give us access to other commands, including any custom ones you\nmay implement yourself. \n Click the + ( Add New Configuration ) button and select  Python . Give\nthe configuration a good descriptive name such as \u201cRun Flask Server\u201d.\nFor the  flask   run  command, check \u201cSingle instance only\u201d since you\ncan\u2019t run the server more than once at the same time. \n Select  Module name  from the dropdown ( A ) then input  flask . \n The  Parameters  field ( B ) is set to the CLI command to execute\n(with any arguments). In this example we use  run , which will run\nthe development server. \n You can skip this next step if you\u2019re using  Environment Variables From dotenv . We need to\nadd an environment variable ( C ) to identify our application. Click\non the browse button and add an entry with  FLASK_APP  on the left and\nthe Python import or file on the right ( hello  for example). \n Next we need to set the working directory ( D ) to be the folder where\nour application resides. \n If you have installed your project as a package in your virtualenv, you\nmay untick the  PYTHONPATH  options ( E ). This will more accurately\nmatch how you deploy the app later. \n Click  Apply  to save the configuration, or  OK  to save and close the\nwindow. Select the configuration in the main PyCharm window and click\nthe play button next to it to run the server. \n Now that we have a configuration which runs  flask   run  from within\nPyCharm, we can copy that configuration and alter the  Script  argument\nto run a different CLI command, e.g.  flask   shell . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Command Line Interface \n Application Discovery \n Run the Development Server \n Open a Shell \n Environments \n Debug Mode \n Environment Variables From dotenv \n Setting Command Options \n Disable dotenv \n \n \n Environment Variables From virtualenv \n Custom Commands \n Application Context \n \n \n Plugins \n Custom Scripts \n PyCharm Integration \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Extensions \n           Next:  Development Server \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/reqcontext/", "text": "\n   \n     \n     \n   \n     The Request Context \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n The Request Context \u00b6 \n The request context keeps track of the request-level data during a\nrequest. Rather than passing the request object to each function that\nruns during a request, the  request  and  session  proxies\nare accessed instead. \n This is similar to the  The Application Context , which keeps track of the\napplication-level data independent of a request. A corresponding\napplication context is pushed when a request context is pushed. \n \n Purpose of the Context \u00b6 \n When the  Flask  application handles a request, it creates a\n Request  object based on the environment it received from the\nWSGI server. Because a  worker  (thread, process, or coroutine depending\non the server) handles only one request at a time, the request data can\nbe considered global to that worker during that request. Flask uses the\nterm  context local  for this. \n Flask automatically  pushes  a request context when handling a request.\nView functions, error handlers, and other functions that run during a\nrequest will have access to the  request  proxy, which points to\nthe request object for the current request. \n \n \n Lifetime of the Context \u00b6 \n When a Flask application begins handling a request, it pushes a request\ncontext, which also pushes an  The Application Context . When the request ends\nit pops the request context then the application context. \n The context is unique to each thread (or other worker type).\n request  cannot be passed to another thread, the other thread\nwill have a different context stack and will not know about the request\nthe parent thread was pointing to. \n Context locals are implemented in Werkzeug. See  Context Locals \nfor more information on how this works internally. \n \n \n Manually Push a Context \u00b6 \n If you try to access  request , or anything that uses it, outside\na request context, you\u2019ll get this error message: \n RuntimeError: Working outside of request context. \n\n This typically means that you attempted to use functionality that \n needed an active HTTP request. Consult the documentation on testing \n for information about how to avoid this problem. \n \n \n This should typically only happen when testing code that expects an\nactive request. One option is to use the\n test   client  to simulate a full request. Or\nyou can use  test_request_context()  in a  with  block, and\neverything that runs in the block will have access to  request ,\npopulated with your test data. \n def   generate_report ( year ): \n     format   =   request . args . get ( 'format' ) \n     ... \n\n with   app . test_request_context ( \n         '/make_report/2017' ,   data = { 'format' :   'short' }): \n     generate_report () \n \n \n If you see that error somewhere else in your code not related to\ntesting, it most likely indicates that you should move that code into a\nview function. \n For information on how to use the request context from the interactive\nPython shell, see  Working with the Shell . \n \n \n How the Context Works \u00b6 \n The  Flask.wsgi_app()  method is called to handle each request. It\nmanages the contexts during the request. Internally, the request and\napplication contexts work as stacks,  _request_ctx_stack  and\n _app_ctx_stack . When contexts are pushed onto the stack, the\nproxies that depend on them are available and point at information from\nthe top context on the stack. \n When the request starts, a  RequestContext  is created and\npushed, which creates and pushes an  AppContext  first if\na context for that application is not already the top context. While\nthese contexts are pushed, the  current_app ,  g ,\n request , and  session  proxies are available to the\noriginal thread handling the request. \n Because the contexts are stacks, other contexts may be pushed to change\nthe proxies during a request. While this is not a common pattern, it\ncan be used in advanced applications to, for example, do internal\nredirects or chain different applications together. \n After the request is dispatched and a response is generated and sent,\nthe request context is popped, which then pops the application context.\nImmediately before they are popped, the  teardown_request() \nand  teardown_appcontext()  functions are are executed. These\nexecute even if an unhandled exception occurred during dispatch. \n \n \n Callbacks and Errors \u00b6 \n Flask dispatches a request in multiple stages which can affect the\nrequest, response, and how errors are handled. The contexts are active\nduring all of these stages. \n A  Blueprint  can add handlers for these events that are specific\nto the blueprint. The handlers for a blueprint will run if the blueprint\nowns the route that matches the request. \n \n Before each request,  before_request()  functions are\ncalled. If one of these functions return a value, the other\nfunctions are skipped. The return value is treated as the response\nand the view function is not called. \n If the  before_request()  functions did not return a\nresponse, the view function for the matched route is called and\nreturns a response. \n The return value of the view is converted into an actual response\nobject and passed to the  after_request() \nfunctions. Each function returns a modified or new response object. \n After the response is returned, the contexts are popped, which calls\nthe  teardown_request()  and\n teardown_appcontext()  functions. These functions are\ncalled even if an unhandled exception was raised at any point above. \n \n If an exception is raised before the teardown functions, Flask tries to\nmatch it with an  errorhandler()  function to handle the\nexception and return a response. If no error handler is found, or the\nhandler itself raises an exception, Flask returns a generic\n 500   Internal   Server   Error  response. The teardown functions are still\ncalled, and are passed the exception object. \n If debug mode is enabled, unhandled exceptions are not converted to a\n 500  response and instead are propagated to the WSGI server. This\nallows the development server to present the interactive debugger with\nthe traceback. \n \n Teardown Callbacks \u00b6 \n The teardown callbacks are independent of the request dispatch, and are\ninstead called by the contexts when they are popped. The functions are\ncalled even if there is an unhandled exception during dispatch, and for\nmanually pushed contexts. This means there is no guarantee that any\nother parts of the request dispatch have run first. Be sure to write\nthese functions in a way that does not depend on other callbacks and\nwill not fail. \n During testing, it can be useful to defer popping the contexts after the\nrequest ends, so that their data can be accessed in the test function.\nUsing the  test_client()  as a  with  block to preserve the\ncontexts until the with block exits. \n from   flask   import   Flask ,   request \n\n app   =   Flask ( __name__ ) \n\n @app.route ( '/' ) \n def   hello (): \n     print ( 'during view' ) \n     return   'Hello, World!' \n\n @app.teardown_request \n def   show_teardown ( exception ): \n     print ( 'after with block' ) \n\n with   app . test_request_context (): \n     print ( 'during with block' ) \n\n # teardown functions are called after the context with block exits \n\n with   app . test_client (): \n     client . get ( '/' ) \n     # the contexts are not popped even though the request ended \n     print ( request . path ) \n\n # the contexts are popped and teardown functions are called after \n # the client with block exists \n \n \n \n \n Signals \u00b6 \n If  signals_available  is true, the following signals are\nsent: \n \n request_started  is sent before the\n before_request()  functions are called. \n request_finished  is sent after the\n after_request()  functions are called. \n got_request_exception  is sent when an exception begins to\nbe handled, but before an  errorhandler()  is looked up or\ncalled. \n request_tearing_down  is sent after the\n teardown_request()  functions are called. \n \n \n \n \n Context Preservation on Error \u00b6 \n At the end of a request, the request context is popped and all data\nassociated with it is destroyed. If an error occurs during development,\nit is useful to delay destroying the data for debugging purposes. \n When the development server is running in development mode (the\n FLASK_ENV  environment variable is set to  'development' ), the\nerror and data will be preserved and shown in the interactive debugger. \n This behavior can be controlled with the\n PRESERVE_CONTEXT_ON_EXCEPTION  config. As described above, it\ndefaults to  True  in the development environment. \n Do not enable  PRESERVE_CONTEXT_ON_EXCEPTION  in production, as it\nwill cause your application to leak memory on exceptions. \n \n \n Notes On Proxies \u00b6 \n Some of the objects provided by Flask are proxies to other objects. The\nproxies are accessed in the same way for each worker thread, but\npoint to the unique object bound to each worker behind the scenes as\ndescribed on this page. \n Most of the time you don\u2019t have to care about that, but there are some\nexceptions where it is good to know that this object is an actual proxy: \n \n The proxy objects cannot fake their type as the actual object types.\nIf you want to perform instance checks, you have to do that on the\nobject being proxied. \n If the specific object reference is important, for example for\nsending  Signals  or passing data to a background thread. \n \n If you need to access the underlying object that is proxied, use the\n _get_current_object()  method: \n app   =   current_app . _get_current_object () \n my_signal . send ( app ) \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n The Request Context \n Purpose of the Context \n Lifetime of the Context \n Manually Push a Context \n How the Context Works \n Callbacks and Errors \n Teardown Callbacks \n Signals \n \n \n Context Preservation on Error \n Notes On Proxies \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  The Application Context \n           Next:  Modular Applications with Blueprints \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/appcontext/", "text": "\n   \n     \n     \n   \n     The Application Context \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n The Application Context \u00b6 \n The application context keeps track of the application-level data during\na request, CLI command, or other activity. Rather than passing the\napplication around to each function, the  current_app  and\n g  proxies are accessed instead. \n This is similar to the  The Request Context , which keeps track of\nrequest-level data during a request. A corresponding application context\nis pushed when a request context is pushed. \n \n Purpose of the Context \u00b6 \n The  Flask  application object has attributes, such as\n config , that are useful to access within views and\n CLI commands . However, importing the  app  instance\nwithin the modules in your project is prone to circular import issues.\nWhen using the  app factory pattern  or\nwriting reusable  blueprints  or\n extensions  there won\u2019t be an  app  instance to\nimport at all. \n Flask solves this issue with the  application context . Rather than\nreferring to an  app  directly, you use the the  current_app \nproxy, which points to the application handling the current activity. \n Flask automatically  pushes  an application context when handling a\nrequest. View functions, error handlers, and other functions that run\nduring a request will have access to  current_app . \n Flask will also automatically push an app context when running CLI\ncommands registered with  Flask.cli  using  @app.cli.command() . \n \n \n Lifetime of the Context \u00b6 \n The application context is created and destroyed as necessary. When a\nFlask application begins handling a request, it pushes an application\ncontext and a  request context . When the request\nends it pops the request context then the application context.\nTypically, an application context will have the same lifetime as a\nrequest. \n See  The Request Context  for more information about how the contexts work\nand the full lifecycle of a request. \n \n \n Manually Push a Context \u00b6 \n If you try to access  current_app , or anything that uses it,\noutside an application context, you\u2019ll get this error message: \n RuntimeError: Working outside of application context. \n\n This typically means that you attempted to use functionality that \n needed to interface with the current application object in some way. \n To solve this, set up an application context with app.app_context(). \n \n \n If you see that error while configuring your application, such as when\ninitializing an extension, you can push a context manually since you\nhave direct access to the  app . Use  app_context()  in a\n with  block, and everything that runs in the block will have access\nto  current_app . \n def   create_app (): \n     app   =   Flask ( __name__ ) \n\n     with   app . app_context (): \n         init_db () \n\n     return   app \n \n \n If you see that error somewhere else in your code not related to\nconfiguring the application, it most likely indicates that you should\nmove that code into a view function or CLI command. \n \n \n Storing Data \u00b6 \n The application context is a good place to store common data during a\nrequest or CLI command. Flask provides the  g   object  for this\npurpose. It is a simple namespace object that has the same lifetime as\nan application context. \n \n Note \n The  g  name stands for \u201cglobal\u201d, but that is referring to the\ndata being global  within a context . The data on  g  is lost\nafter the context ends, and it is not an appropriate place to store\ndata between requests. Use the  session  or a database to\nstore data across requests. \n \n A common use for  g  is to manage resources during a request. \n \n get_X()  creates resource  X  if it does not exist, caching it\nas  g.X . \n teardown_X()  closes or otherwise deallocates the resource if it\nexists. It is registered as a  teardown_appcontext() \nhandler. \n \n For example, you can manage a database connection using this pattern: \n from   flask   import   g \n\n def   get_db (): \n     if   'db'   not   in   g : \n         g . db   =   connect_to_database () \n\n     return   g . db \n\n @app . teardown_appcontext \n def   teardown_db (): \n     db   =   g . pop ( 'db' ,   None ) \n\n     if   db   is   not   None : \n         db . close () \n \n \n During a request, every call to  get_db()  will return the same\nconnection, and it will be closed automatically at the end of the\nrequest. \n You can use  LocalProxy  to make a new context\nlocal from  get_db() : \n from   werkzeug.local   import   LocalProxy \n db   =   LocalProxy ( get_db ) \n \n \n Accessing  db  will call  get_db  internally, in the same way that\n current_app  works. \n \n If you\u2019re writing an extension,  g  should be reserved for user\ncode. You may store internal data on the context itself, but be sure to\nuse a sufficiently unique name. The current context is accessed with\n _app_ctx_stack.top . For more information see\n Flask Extension Development . \n \n \n Events and Signals \u00b6 \n The application will call functions registered with\n teardown_appcontext()  when the application context is\npopped. \n If  signals_available  is true, the following signals are\nsent:  appcontext_pushed ,  appcontext_tearing_down , and\n appcontext_popped . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n The Application Context \n Purpose of the Context \n Lifetime of the Context \n Manually Push a Context \n Storing Data \n Events and Signals \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Pluggable Views \n           Next:  The Request Context \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/views/", "text": "\n   \n     \n     \n   \n     Pluggable Views \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Pluggable Views \u00b6 \n \n Changelog \n New in version 0.7. \n \n Flask 0.7 introduces pluggable views inspired by the generic views from\nDjango which are based on classes instead of functions.  The main\nintention is that you can replace parts of the implementations and this\nway have customizable pluggable views. \n \n Basic Principle \u00b6 \n Consider you have a function that loads a list of objects from the\ndatabase and renders into a template: \n @app . route ( '/users/' ) \n def   show_users ( page ): \n     users   =   User . query . all () \n     return   render_template ( 'users.html' ,   users = users ) \n \n \n This is simple and flexible, but if you want to provide this view in a\ngeneric fashion that can be adapted to other models and templates as well\nyou might want more flexibility.  This is where pluggable class-based\nviews come into place.  As the first step to convert this into a class\nbased view you would do this: \n from   flask.views   import   View \n\n class   ShowUsers ( View ): \n\n     def   dispatch_request ( self ): \n         users   =   User . query . all () \n         return   render_template ( 'users.html' ,   objects = users ) \n\n app . add_url_rule ( '/users/' ,   view_func = ShowUsers . as_view ( 'show_users' )) \n \n \n As you can see what you have to do is to create a subclass of\n flask.views.View  and implement\n dispatch_request() .  Then we have to convert that\nclass into an actual view function by using the\n as_view()  class method.  The string you pass to\nthat function is the name of the endpoint that view will then have.  But\nthis by itself is not helpful, so let\u2019s refactor the code a bit: \n from   flask.views   import   View \n\n class   ListView ( View ): \n\n     def   get_template_name ( self ): \n         raise   NotImplementedError () \n\n     def   render_template ( self ,   context ): \n         return   render_template ( self . get_template_name (),   ** context ) \n\n     def   dispatch_request ( self ): \n         context   =   { 'objects' :   self . get_objects ()} \n         return   self . render_template ( context ) \n\n class   UserView ( ListView ): \n\n     def   get_template_name ( self ): \n         return   'users.html' \n\n     def   get_objects ( self ): \n         return   User . query . all () \n \n \n This of course is not that helpful for such a small example, but it\u2019s good\nenough to explain the basic principle.  When you have a class-based view\nthe question comes up what  self  points to.  The way this works is that\nwhenever the request is dispatched a new instance of the class is created\nand the  dispatch_request()  method is called with\nthe parameters from the URL rule.  The class itself is instantiated with\nthe parameters passed to the  as_view()  function.\nFor instance you can write a class like this: \n class   RenderTemplateView ( View ): \n     def   __init__ ( self ,   template_name ): \n         self . template_name   =   template_name \n     def   dispatch_request ( self ): \n         return   render_template ( self . template_name ) \n \n \n And then you can register it like this: \n app . add_url_rule ( '/about' ,   view_func = RenderTemplateView . as_view ( \n     'about_page' ,   template_name = 'about.html' )) \n \n \n \n \n Method Hints \u00b6 \n Pluggable views are attached to the application like a regular function by\neither using  route()  or better\n add_url_rule() .  That however also means that you would\nhave to provide the names of the HTTP methods the view supports when you\nattach this.  In order to move that information to the class you can\nprovide a  methods  attribute that has this\ninformation: \n class   MyView ( View ): \n     methods   =   [ 'GET' ,   'POST' ] \n\n     def   dispatch_request ( self ): \n         if   request . method   ==   'POST' : \n             ... \n         ... \n\n app . add_url_rule ( '/myview' ,   view_func = MyView . as_view ( 'myview' )) \n \n \n \n \n Method Based Dispatching \u00b6 \n For RESTful APIs it\u2019s especially helpful to execute a different function\nfor each HTTP method.  With the  flask.views.MethodView  you can\neasily do that.  Each HTTP method maps to a function with the same name\n(just in lowercase): \n from   flask.views   import   MethodView \n\n class   UserAPI ( MethodView ): \n\n     def   get ( self ): \n         users   =   User . query . all () \n         ... \n\n     def   post ( self ): \n         user   =   User . from_form_data ( request . form ) \n         ... \n\n app . add_url_rule ( '/users/' ,   view_func = UserAPI . as_view ( 'users' )) \n \n \n That way you also don\u2019t have to provide the\n methods  attribute.  It\u2019s automatically set based\non the methods defined in the class. \n \n \n Decorating Views \u00b6 \n Since the view class itself is not the view function that is added to the\nrouting system it does not make much sense to decorate the class itself.\nInstead you either have to decorate the return value of\n as_view()  by hand: \n def   user_required ( f ): \n     \"\"\"Checks whether user is logged in or raises error 401.\"\"\" \n     def   decorator ( * args ,   ** kwargs ): \n         if   not   g . user : \n             abort ( 401 ) \n         return   f ( * args ,   ** kwargs ) \n     return   decorator \n\n view   =   user_required ( UserAPI . as_view ( 'users' )) \n app . add_url_rule ( '/users/' ,   view_func = view ) \n \n \n Starting with Flask 0.8 there is also an alternative way where you can\nspecify a list of decorators to apply in the class declaration: \n class   UserAPI ( MethodView ): \n     decorators   =   [ user_required ] \n \n \n Due to the implicit self from the caller\u2019s perspective you cannot use\nregular view decorators on the individual methods of the view however,\nkeep this in mind. \n \n \n Method Views for APIs \u00b6 \n Web APIs are often working very closely with HTTP verbs so it makes a lot\nof sense to implement such an API based on the\n MethodView .  That said, you will notice that the API\nwill require different URL rules that go to the same method view most of\nthe time.  For instance consider that you are exposing a user object on\nthe web: \n \n \n \n \n \n \n \n URL \n Method \n Description \n \n /users/ \n GET \n Gives a list of all users \n \n /users/ \n POST \n Creates a new user \n \n /users/<id> \n GET \n Shows a single user \n \n /users/<id> \n PUT \n Updates a single user \n \n /users/<id> \n DELETE \n Deletes a single user \n \n \n \n So how would you go about doing that with the\n MethodView ?  The trick is to take advantage of the\nfact that you can provide multiple rules to the same view. \n Let\u2019s assume for the moment the view would look like this: \n class   UserAPI ( MethodView ): \n\n     def   get ( self ,   user_id ): \n         if   user_id   is   None : \n             # return a list of users \n             pass \n         else : \n             # expose a single user \n             pass \n\n     def   post ( self ): \n         # create a new user \n         pass \n\n     def   delete ( self ,   user_id ): \n         # delete a single user \n         pass \n\n     def   put ( self ,   user_id ): \n         # update a single user \n         pass \n \n \n So how do we hook this up with the routing system?  By adding two rules\nand explicitly mentioning the methods for each: \n user_view   =   UserAPI . as_view ( 'user_api' ) \n app . add_url_rule ( '/users/' ,   defaults = { 'user_id' :   None }, \n                  view_func = user_view ,   methods = [ 'GET' ,]) \n app . add_url_rule ( '/users/' ,   view_func = user_view ,   methods = [ 'POST' ,]) \n app . add_url_rule ( '/users/<int:user_id>' ,   view_func = user_view , \n                  methods = [ 'GET' ,   'PUT' ,   'DELETE' ]) \n \n \n If you have a lot of APIs that look similar you can refactor that\nregistration code: \n def   register_api ( view ,   endpoint ,   url ,   pk = 'id' ,   pk_type = 'int' ): \n     view_func   =   view . as_view ( endpoint ) \n     app . add_url_rule ( url ,   defaults = { pk :   None }, \n                      view_func = view_func ,   methods = [ 'GET' ,]) \n     app . add_url_rule ( url ,   view_func = view_func ,   methods = [ 'POST' ,]) \n     app . add_url_rule ( ' %s < %s : %s >'   %   ( url ,   pk_type ,   pk ),   view_func = view_func , \n                      methods = [ 'GET' ,   'PUT' ,   'DELETE' ]) \n\n register_api ( UserAPI ,   'user_api' ,   '/users/' ,   pk = 'user_id' ) \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Pluggable Views \n Basic Principle \n Method Hints \n Method Based Dispatching \n Decorating Views \n Method Views for APIs \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Signals \n           Next:  The Application Context \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/blueprints/", "text": "\n   \n     \n     \n   \n     Modular Applications with Blueprints \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Modular Applications with Blueprints \u00b6 \n \n Changelog \n New in version 0.7. \n \n Flask uses a concept of  blueprints  for making application components and\nsupporting common patterns within an application or across applications.\nBlueprints can greatly simplify how large applications work and provide a\ncentral means for Flask extensions to register operations on applications.\nA  Blueprint  object works similarly to a  Flask \napplication object, but it is not actually an application.  Rather it is a\n blueprint  of how to construct or extend an application. \n \n Why Blueprints? \u00b6 \n Blueprints in Flask are intended for these cases: \n \n Factor an application into a set of blueprints.  This is ideal for\nlarger applications; a project could instantiate an application object,\ninitialize several extensions, and register a collection of blueprints. \n Register a blueprint on an application at a URL prefix and/or subdomain.\nParameters in the URL prefix/subdomain become common view arguments\n(with defaults) across all view functions in the blueprint. \n Register a blueprint multiple times on an application with different URL\nrules. \n Provide template filters, static files, templates, and other utilities\nthrough blueprints.  A blueprint does not have to implement applications\nor view functions. \n Register a blueprint on an application for any of these cases when\ninitializing a Flask extension. \n \n A blueprint in Flask is not a pluggable app because it is not actually an\napplication \u2013 it\u2019s a set of operations which can be registered on an\napplication, even multiple times.  Why not have multiple application\nobjects?  You can do that (see  Application Dispatching ), but your applications\nwill have separate configs and will be managed at the WSGI layer. \n Blueprints instead provide separation at the Flask level, share\napplication config, and can change an application object as necessary with\nbeing registered. The downside is that you cannot unregister a blueprint\nonce an application was created without having to destroy the whole\napplication object. \n \n \n The Concept of Blueprints \u00b6 \n The basic concept of blueprints is that they record operations to execute\nwhen registered on an application.  Flask associates view functions with\nblueprints when dispatching requests and generating URLs from one endpoint\nto another. \n \n \n My First Blueprint \u00b6 \n This is what a very basic blueprint looks like.  In this case we want to\nimplement a blueprint that does simple rendering of static templates: \n from   flask   import   Blueprint ,   render_template ,   abort \n from   jinja2   import   TemplateNotFound \n\n simple_page   =   Blueprint ( 'simple_page' ,   __name__ , \n                         template_folder = 'templates' ) \n\n @simple_page . route ( '/' ,   defaults = { 'page' :   'index' }) \n @simple_page . route ( '/<page>' ) \n def   show ( page ): \n     try : \n         return   render_template ( 'pages/ %s .html'   %   page ) \n     except   TemplateNotFound : \n         abort ( 404 ) \n \n \n When you bind a function with the help of the  @simple_page.route \ndecorator the blueprint will record the intention of registering the\nfunction  show  on the application when it\u2019s later registered.\nAdditionally it will prefix the endpoint of the function with the\nname of the blueprint which was given to the  Blueprint \nconstructor (in this case also  simple_page ). \n \n \n Registering Blueprints \u00b6 \n So how do you register that blueprint?  Like this: \n from   flask   import   Flask \n from   yourapplication.simple_page   import   simple_page \n\n app   =   Flask ( __name__ ) \n app . register_blueprint ( simple_page ) \n \n \n If you check the rules registered on the application, you will find\nthese: \n [ < Rule   '/static/<filename>'   ( HEAD ,   OPTIONS ,   GET )   ->   static > , \n  < Rule   '/<page>'   ( HEAD ,   OPTIONS ,   GET )   ->   simple_page . show > , \n  < Rule   '/'   ( HEAD ,   OPTIONS ,   GET )   ->   simple_page . show > ] \n \n \n The first one is obviously from the application itself for the static\nfiles.  The other two are for the  show  function of the  simple_page \nblueprint.  As you can see, they are also prefixed with the name of the\nblueprint and separated by a dot ( . ). \n Blueprints however can also be mounted at different locations: \n app . register_blueprint ( simple_page ,   url_prefix = '/pages' ) \n \n \n And sure enough, these are the generated rules: \n [ < Rule   '/static/<filename>'   ( HEAD ,   OPTIONS ,   GET )   ->   static > , \n  < Rule   '/pages/<page>'   ( HEAD ,   OPTIONS ,   GET )   ->   simple_page . show > , \n  < Rule   '/pages/'   ( HEAD ,   OPTIONS ,   GET )   ->   simple_page . show > ] \n \n \n On top of that you can register blueprints multiple times though not every\nblueprint might respond properly to that.  In fact it depends on how the\nblueprint is implemented if it can be mounted more than once. \n \n \n Blueprint Resources \u00b6 \n Blueprints can provide resources as well.  Sometimes you might want to\nintroduce a blueprint only for the resources it provides. \n \n Blueprint Resource Folder \u00b6 \n Like for regular applications, blueprints are considered to be contained\nin a folder.  While multiple blueprints can originate from the same folder,\nit does not have to be the case and it\u2019s usually not recommended. \n The folder is inferred from the second argument to  Blueprint  which\nis usually  __name__ .  This argument specifies what logical Python\nmodule or package corresponds to the blueprint.  If it points to an actual\nPython package that package (which is a folder on the filesystem) is the\nresource folder.  If it\u2019s a module, the package the module is contained in\nwill be the resource folder.  You can access the\n Blueprint.root_path  property to see what the resource folder is: \n >>>  simple_page . root_path \n '/Users/username/TestProject/yourapplication' \n \n \n To quickly open sources from this folder you can use the\n open_resource()  function: \n with   simple_page . open_resource ( 'static/style.css' )   as   f : \n     code   =   f . read () \n \n \n \n \n Static Files \u00b6 \n A blueprint can expose a folder with static files by providing the path\nto the folder on the filesystem with the  static_folder  argument.\nIt is either an absolute path or relative to the blueprint\u2019s location: \n admin   =   Blueprint ( 'admin' ,   __name__ ,   static_folder = 'static' ) \n \n \n By default the rightmost part of the path is where it is exposed on the\nweb. This can be changed with the  static_url_path  argument. Because the\nfolder is called  static  here it will be available at the\n url_prefix  of the blueprint +  /static . If the blueprint\nhas the prefix  /admin , the static URL will be  /admin/static . \n The endpoint is named  blueprint_name.static . You can generate URLs\nto it with  url_for()  like you would with the static folder of the\napplication: \n url_for ( 'admin.static' ,   filename = 'style.css' ) \n \n \n However, if the blueprint does not have a  url_prefix , it is not\npossible to access the blueprint\u2019s static folder. This is because the\nURL would be  /static  in this case, and the application\u2019s  /static \nroute takes precedence. Unlike template folders, blueprint static\nfolders are not searched if the file does not exist in the application\nstatic folder. \n \n \n Templates \u00b6 \n If you want the blueprint to expose templates you can do that by providing\nthe  template_folder  parameter to the  Blueprint  constructor: \n admin   =   Blueprint ( 'admin' ,   __name__ ,   template_folder = 'templates' ) \n \n \n For static files, the path can be absolute or relative to the blueprint\nresource folder. \n The template folder is added to the search path of templates but with a lower\npriority than the actual application\u2019s template folder. That way you can\neasily override templates that a blueprint provides in the actual application.\nThis also means that if you don\u2019t want a blueprint template to be accidentally\noverridden, make sure that no other blueprint or actual application template\nhas the same relative path. When multiple blueprints provide the same relative\ntemplate path the first blueprint registered takes precedence over the others. \n So if you have a blueprint in the folder  yourapplication/admin  and you\nwant to render the template  'admin/index.html'  and you have provided\n templates  as a  template_folder  you will have to create a file like\nthis:  yourapplication/admin/templates/admin/index.html . The reason\nfor the extra  admin  folder is to avoid getting our template overridden\nby a template named  index.html  in the actual application template\nfolder. \n To further reiterate this: if you have a blueprint named  admin  and you\nwant to render a template called  index.html  which is specific to this\nblueprint, the best idea is to lay out your templates like this: \n yourpackage / \n     blueprints / \n         admin / \n             templates / \n                 admin / \n                     index . html \n             __init__ . py \n \n \n And then when you want to render the template, use  admin/index.html  as\nthe name to look up the template by.  If you encounter problems loading\nthe correct templates enable the  EXPLAIN_TEMPLATE_LOADING  config\nvariable which will instruct Flask to print out the steps it goes through\nto locate templates on every  render_template  call. \n \n \n \n Building URLs \u00b6 \n If you want to link from one page to another you can use the\n url_for()  function just like you normally would do just that you\nprefix the URL endpoint with the name of the blueprint and a dot ( . ): \n url_for ( 'admin.index' ) \n \n \n Additionally if you are in a view function of a blueprint or a rendered\ntemplate and you want to link to another endpoint of the same blueprint,\nyou can use relative redirects by prefixing the endpoint with a dot only: \n url_for ( '.index' ) \n \n \n This will link to  admin.index  for instance in case the current request\nwas dispatched to any other admin blueprint endpoint. \n \n \n Error Handlers \u00b6 \n Blueprints support the errorhandler decorator just like the  Flask \napplication object, so it is easy to make Blueprint-specific custom error\npages. \n Here is an example for a \u201c404 Page Not Found\u201d exception: \n @simple_page . errorhandler ( 404 ) \n def   page_not_found ( e ): \n     return   render_template ( 'pages/404.html' ) \n \n \n Most errorhandlers will simply work as expected; however, there is a caveat\nconcerning handlers for 404 and 405 exceptions.  These errorhandlers are only\ninvoked from an appropriate  raise  statement or a call to  abort  in another\nof the blueprint\u2019s view functions; they are not invoked by, e.g., an invalid URL\naccess.  This is because the blueprint does not \u201cown\u201d a certain URL space, so\nthe application instance has no way of knowing which blueprint errorhandler it\nshould run if given an invalid URL.  If you would like to execute different\nhandling strategies for these errors based on URL prefixes, they may be defined\nat the application level using the  request  proxy object: \n @app . errorhandler ( 404 ) \n @app . errorhandler ( 405 ) \n def   _handle_api_error ( ex ): \n     if   request . path . startswith ( '/api/' ): \n         return   jsonify_error ( ex ) \n     else : \n         return   ex \n \n \n More information on error handling see  Custom Error Pages . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Modular Applications with Blueprints \n Why Blueprints? \n The Concept of Blueprints \n My First Blueprint \n Registering Blueprints \n Blueprint Resources \n Blueprint Resource Folder \n Static Files \n Templates \n \n \n Building URLs \n Error Handlers \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  The Request Context \n           Next:  Extensions \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/signals/", "text": "\n   \n     \n     \n   \n     Signals \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Signals \u00b6 \n \n Changelog \n New in version 0.6. \n \n Starting with Flask 0.6, there is integrated support for signalling in\nFlask.  This support is provided by the excellent  blinker  library and\nwill gracefully fall back if it is not available. \n What are signals?  Signals help you decouple applications by sending\nnotifications when actions occur elsewhere in the core framework or\nanother Flask extensions.  In short, signals allow certain senders to\nnotify subscribers that something happened. \n Flask comes with a couple of signals and other extensions might provide\nmore.  Also keep in mind that signals are intended to notify subscribers\nand should not encourage subscribers to modify data.  You will notice that\nthere are signals that appear to do the same thing like some of the\nbuiltin decorators do (eg:  request_started  is very similar\nto  before_request() ).  However, there are differences in\nhow they work.  The core  before_request()  handler, for\nexample, is executed in a specific order and is able to abort the request\nearly by returning a response.  In contrast all signal handlers are\nexecuted in undefined order and do not modify any data. \n The big advantage of signals over handlers is that you can safely\nsubscribe to them for just a split second.  These temporary\nsubscriptions are helpful for unit testing for example.  Say you want to\nknow what templates were rendered as part of a request: signals allow you\nto do exactly that. \n \n Subscribing to Signals \u00b6 \n To subscribe to a signal, you can use the\n connect()  method of a signal.  The first\nargument is the function that should be called when the signal is emitted,\nthe optional second argument specifies a sender.  To unsubscribe from a\nsignal, you can use the  disconnect()  method. \n For all core Flask signals, the sender is the application that issued the\nsignal.  When you subscribe to a signal, be sure to also provide a sender\nunless you really want to listen for signals from all applications.  This is\nespecially true if you are developing an extension. \n For example, here is a helper context manager that can be used in a unit test\nto determine which templates were rendered and what variables were passed\nto the template: \n from   flask   import   template_rendered \n from   contextlib   import   contextmanager \n\n @contextmanager \n def   captured_templates ( app ): \n     recorded   =   [] \n     def   record ( sender ,   template ,   context ,   ** extra ): \n         recorded . append (( template ,   context )) \n     template_rendered . connect ( record ,   app ) \n     try : \n         yield   recorded \n     finally : \n         template_rendered . disconnect ( record ,   app ) \n \n \n This can now easily be paired with a test client: \n with   captured_templates ( app )   as   templates : \n     rv   =   app . test_client () . get ( '/' ) \n     assert   rv . status_code   ==   200 \n     assert   len ( templates )   ==   1 \n     template ,   context   =   templates [ 0 ] \n     assert   template . name   ==   'index.html' \n     assert   len ( context [ 'items' ])   ==   10 \n \n \n Make sure to subscribe with an extra  **extra  argument so that your\ncalls don\u2019t fail if Flask introduces new arguments to the signals. \n All the template rendering in the code issued by the application  app \nin the body of the  with  block will now be recorded in the  templates \nvariable.  Whenever a template is rendered, the template object as well as\ncontext are appended to it. \n Additionally there is a convenient helper method\n( connected_to() )  that allows you to\ntemporarily subscribe a function to a signal with a context manager on\nits own.  Because the return value of the context manager cannot be\nspecified that way, you have to pass the list in as an argument: \n from   flask   import   template_rendered \n\n def   captured_templates ( app ,   recorded ,   ** extra ): \n     def   record ( sender ,   template ,   context ): \n         recorded . append (( template ,   context )) \n     return   template_rendered . connected_to ( record ,   app ) \n \n \n The example above would then look like this: \n templates   =   [] \n with   captured_templates ( app ,   templates ,   ** extra ): \n     ... \n     template ,   context   =   templates [ 0 ] \n \n \n \n Blinker API Changes \n The  connected_to()  method arrived in Blinker\nwith version 1.1. \n \n \n \n Creating Signals \u00b6 \n If you want to use signals in your own application, you can use the\nblinker library directly.  The most common use case are named signals in a\ncustom  Namespace ..  This is what is recommended\nmost of the time: \n from   blinker   import   Namespace \n my_signals   =   Namespace () \n \n \n Now you can create new signals like this: \n model_saved   =   my_signals . signal ( 'model-saved' ) \n \n \n The name for the signal here makes it unique and also simplifies\ndebugging.  You can access the name of the signal with the\n name  attribute. \n \n For Extension Developers \n If you are writing a Flask extension and you want to gracefully degrade for\nmissing blinker installations, you can do so by using the\n flask.signals.Namespace  class. \n \n \n \n Sending Signals \u00b6 \n If you want to emit a signal, you can do so by calling the\n send()  method.  It accepts a sender as first\nargument and optionally some keyword arguments that are forwarded to the\nsignal subscribers: \n class   Model ( object ): \n     ... \n\n     def   save ( self ): \n         model_saved . send ( self ) \n \n \n Try to always pick a good sender.  If you have a class that is emitting a\nsignal, pass  self  as sender.  If you are emitting a signal from a random\nfunction, you can pass  current_app._get_current_object()  as sender. \n \n Passing Proxies as Senders \n Never pass  current_app  as sender to a signal.  Use\n current_app._get_current_object()  instead.  The reason for this is\nthat  current_app  is a proxy and not the real application\nobject. \n \n \n \n Signals and Flask\u2019s Request Context \u00b6 \n Signals fully support  The Request Context  when receiving signals.\nContext-local variables are consistently available between\n request_started  and  request_finished , so you can\nrely on  flask.g  and others as needed.  Note the limitations described\nin  Sending Signals  and the  request_tearing_down  signal. \n \n \n Decorator Based Signal Subscriptions \u00b6 \n With Blinker 1.1 you can also easily subscribe to signals by using the new\n connect_via()  decorator: \n from   flask   import   template_rendered \n\n @template_rendered . connect_via ( app ) \n def   when_template_rendered ( sender ,   template ,   context ,   ** extra ): \n     print   'Template  %s  is rendered with  %s '   %   ( template . name ,   context ) \n \n \n \n \n Core Signals \u00b6 \n Take a look at  Signals  for a list of all builtin signals. \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Signals \n Subscribing to Signals \n Creating Signals \n Sending Signals \n Signals and Flask\u2019s Request Context \n Decorator Based Signal Subscriptions \n Core Signals \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Configuration Handling \n           Next:  Pluggable Views \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/logging/", "text": "\n   \n     \n     \n   \n     Logging \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Logging \u00b6 \n Flask uses standard Python  logging . All Flask-related messages are\nlogged under the  'flask'  logger namespace.\n Flask.logger  returns the logger named\n 'flask.app' , and can be used to log messages for your application. \n @app . route ( '/login' ,   methods = [ 'POST' ]) \n def   login (): \n     user   =   get_user ( request . form [ 'username' ]) \n\n     if   user . check_password ( request . form [ 'password' ]): \n         login_user ( user ) \n         app . logger . info ( ' %s  logged in successfully' ,   user . username ) \n         return   redirect ( url_for ( 'index' )) \n     else : \n         app . logger . info ( ' %s  failed to log in' ,   user . username ) \n         abort ( 401 ) \n \n \n \n Basic Configuration \u00b6 \n When you want to configure logging for your project, you should do it as soon\nas possible when the program starts. If  app.logger \nis accessed before logging is configured, it will add a default handler. If\npossible, configure logging before creating the application object. \n This example uses  dictConfig()  to create a logging\nconfiguration similar to Flask\u2019s default, except for all logs: \n from   logging.config   import   dictConfig \n\n dictConfig ({ \n     'version' :   1 , \n     'formatters' :   { 'default' :   { \n         'format' :   '[ %(asctime)s ]  %(levelname)s  in  %(module)s :  %(message)s ' , \n     }}, \n     'handlers' :   { 'wsgi' :   { \n         'class' :   'logging.StreamHandler' , \n         'stream' :   'ext://flask.logging.wsgi_errors_stream' , \n         'formatter' :   'default' \n     }}, \n     'root' :   { \n         'level' :   'INFO' , \n         'handlers' :   [ 'wsgi' ] \n     } \n }) \n\n app   =   Flask ( __name__ ) \n \n \n \n Default Configuration \u00b6 \n If you do not configure logging yourself, Flask will add a\n StreamHandler  to  app.logger \nautomatically. During requests, it will write to the stream specified by the\nWSGI server in  environ['wsgi.errors']  (which is usually\n sys.stderr ). Outside a request, it will log to  sys.stderr . \n \n \n Removing the Default Handler \u00b6 \n If you configured logging after accessing\n app.logger , and need to remove the default\nhandler, you can import and remove it: \n from   flask.logging   import   default_handler \n\n app . logger . removeHandler ( default_handler ) \n \n \n \n \n \n Email Errors to Admins \u00b6 \n When running the application on a remote server for production, you probably\nwon\u2019t be looking at the log messages very often. The WSGI server will probably\nsend log messages to a file, and you\u2019ll only check that file if a user tells\nyou something went wrong. \n To be proactive about discovering and fixing bugs, you can configure a\n logging.handlers.SMTPHandler  to send an email when errors and higher\nare logged. \n import   logging \n from   logging.handlers   import   SMTPHandler \n\n mail_handler   =   SMTPHandler ( \n     mailhost = '127.0.0.1' , \n     fromaddr = 'server-error@example.com' , \n     toaddrs = [ 'admin@example.com' ], \n     subject = 'Application Error' \n ) \n mail_handler . setLevel ( logging . ERROR ) \n mail_handler . setFormatter ( logging . Formatter ( \n     '[ %(asctime)s ]  %(levelname)s  in  %(module)s :  %(message)s ' \n )) \n\n if   not   app . debug : \n     app . logger . addHandler ( mail_handler ) \n \n \n This requires that you have an SMTP server set up on the same server. See the\nPython docs for more information about configuring the handler. \n \n \n Injecting Request Information \u00b6 \n Seeing more information about the request, such as the IP address, may help\ndebugging some errors. You can subclass  logging.Formatter  to inject\nyour own fields that can be used in messages. You can change the formatter for\nFlask\u2019s default handler, the mail handler defined above, or any other\nhandler. \n from   flask   import   request \n from   flask.logging   import   default_handler \n\n class   RequestFormatter ( logging . Formatter ): \n     def   format ( self ,   record ): \n         record . url   =   request . url \n         record . remote_addr   =   request . remote_addr \n         return   super () . format ( record ) \n\n formatter   =   RequestFormatter ( \n     '[ %(asctime)s ]  %(remote_addr)s  requested  %(url)s \\n ' \n     ' %(levelname)s  in  %(module)s :  %(message)s ' \n ) \n default_handler . setFormatter ( formatter ) \n mail_handler . setFormatter ( formatter ) \n \n \n \n \n Other Libraries \u00b6 \n Other libraries may use logging extensively, and you want to see relevant\nmessages from those logs too. The simplest way to do this is to add handlers\nto the root logger instead of only the app logger. \n from   flask.logging   import   default_handler \n\n root   =   logging . getLogger () \n root . addHandler ( default_handler ) \n root . addHandler ( mail_handler ) \n \n \n Depending on your project, it may be more useful to configure each logger you\ncare about separately, instead of configuring only the root logger. \n for   logger   in   ( \n     app . logger , \n     logging . getLogger ( 'sqlalchemy' ), \n     logging . getLogger ( 'other_package' ), \n ): \n     logger . addHandler ( default_handler ) \n     logger . addHandler ( mail_handler ) \n \n \n \n Werkzeug \u00b6 \n Werkzeug logs basic request/response information to the  'werkzeug'  logger.\nIf the root logger has no handlers configured, Werkzeug adds a\n StreamHandler  to its logger. \n \n \n Flask Extensions \u00b6 \n Depending on the situation, an extension may choose to log to\n app.logger  or its own named logger. Consult each\nextension\u2019s documentation for details. \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Logging \n Basic Configuration \n Default Configuration \n Removing the Default Handler \n \n \n Email Errors to Admins \n Injecting Request Information \n Other Libraries \n Werkzeug \n Flask Extensions \n \n \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Application Errors \n           Next:  Configuration Handling \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/config/", "text": "\n   \n     \n     \n   \n     Configuration Handling \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Configuration Handling \u00b6 \n Applications need some kind of configuration.  There are different settings\nyou might want to change depending on the application environment like\ntoggling the debug mode, setting the secret key, and other such\nenvironment-specific things. \n The way Flask is designed usually requires the configuration to be\navailable when the application starts up.  You can hardcode the\nconfiguration in the code, which for many small applications is not\nactually that bad, but there are better ways. \n Independent of how you load your config, there is a config object\navailable which holds the loaded configuration values:\nThe  config  attribute of the  Flask \nobject.  This is the place where Flask itself puts certain configuration\nvalues and also where extensions can put their configuration values.  But\nthis is also where you can have your own configuration. \n \n Configuration Basics \u00b6 \n The  config  is actually a subclass of a dictionary and\ncan be modified just like any dictionary: \n app   =   Flask ( __name__ ) \n app . config [ 'TESTING' ]   =   True \n \n \n Certain configuration values are also forwarded to the\n Flask  object so you can read and write them from there: \n app . testing   =   True \n \n \n To update multiple keys at once you can use the  dict.update() \nmethod: \n app . config . update ( \n     TESTING = True , \n     SECRET_KEY = b '_5#y2L\"F4Q8z \\n\\xec ]/' \n ) \n \n \n \n \n Environment and Debug Features \u00b6 \n The  ENV  and  DEBUG  config values are special because they\nmay behave inconsistently if changed after the app has begun setting up.\nIn order to set the environment and debug mode reliably, Flask uses\nenvironment variables. \n The environment is used to indicate to Flask, extensions, and other\nprograms, like Sentry, what context Flask is running in. It is\ncontrolled with the  FLASK_ENV  environment variable and\ndefaults to  production . \n Setting  FLASK_ENV  to  development  will enable debug mode.\n flask   run  will use the interactive debugger and reloader by default\nin debug mode. To control this separately from the environment, use the\n FLASK_DEBUG  flag. \n \n Changed in version 1.0:  Added  FLASK_ENV  to control the environment separately\nfrom debug mode. The development environment enables debug mode. \n \n \n Changelog To switch Flask to the development environment and enable debug mode,\nset  FLASK_ENV : \n $ export FLASK_ENV=development\n$ flask run\n \n \n (On Windows, use  set  instead of  export .) \n Using the environment variables as described above is recommended. While\nit is possible to set  ENV  and  DEBUG  in your config or\ncode, this is strongly discouraged. They can\u2019t be read early by the\n flask  command, and some systems or extensions may have already\nconfigured themselves based on a previous value. \n \n \n Builtin Configuration Values \u00b6 \n The following configuration values are used internally by Flask: \n \n \n ENV \u00b6 \n What environment the app is running in. Flask and extensions may\nenable behaviors based on the environment, such as enabling debug\nmode. The  env  attribute maps to this config\nkey. This is set by the  FLASK_ENV  environment variable and\nmay not behave as expected if set in code. \n Do not enable development when deploying in production. \n Default:  'production' \n \n New in version 1.0. \n \n \n Changelog \n\n \n \n DEBUG \u00b6 \n Whether debug mode is enabled. When using  flask   run  to start the\ndevelopment server, an interactive debugger will be shown for\nunhandled exceptions, and the server will be reloaded when code\nchanges. The  debug  attribute maps to this\nconfig key. This is enabled when  ENV  is  'development' \nand is overridden by the  FLASK_DEBUG  environment variable. It\nmay not behave as expected if set in code. \n Do not enable debug mode when deploying in production. \n Default:  True  if  ENV  is  'development' , or  False \notherwise. \n \n\n \n \n TESTING \u00b6 \n Enable testing mode. Exceptions are propagated rather than handled by the\nthe app\u2019s error handlers. Extensions may also change their behavior to\nfacilitate easier testing. You should enable this in your own tests. \n Default:  False \n \n\n \n \n PROPAGATE_EXCEPTIONS \u00b6 \n Exceptions are re-raised rather than being handled by the app\u2019s error\nhandlers. If not set, this is implicitly true if  TESTING  or  DEBUG \nis enabled. \n Default:  None \n \n\n \n \n PRESERVE_CONTEXT_ON_EXCEPTION \u00b6 \n Don\u2019t pop the request context when an exception occurs. If not set, this\nis true if  DEBUG  is true. This allows debuggers to introspect the\nrequest data on errors, and should normally not need to be set directly. \n Default:  None \n \n\n \n \n TRAP_HTTP_EXCEPTIONS \u00b6 \n If there is no handler for an  HTTPException -type exception, re-raise it\nto be handled by the interactive debugger instead of returning it as a\nsimple error response. \n Default:  False \n \n\n \n \n TRAP_BAD_REQUEST_ERRORS \u00b6 \n Trying to access a key that doesn\u2019t exist from request dicts like  args \nand  form  will return a 400 Bad Request error page. Enable this to treat\nthe error as an unhandled exception instead so that you get the interactive\ndebugger. This is a more specific version of  TRAP_HTTP_EXCEPTIONS . If\nunset, it is enabled in debug mode. \n Default:  None \n \n\n \n \n SECRET_KEY \u00b6 \n A secret key that will be used for securely signing the session cookie\nand can be used for any other security related needs by extensions or your\napplication. It should be a long random string of bytes, although unicode\nis accepted too. For example, copy the output of this to your config: \n python   - c   'import os; print(os.urandom(16))' \n b '_5#y2L\"F4Q8z \\n\\xec ]/' \n \n \n Do not reveal the secret key when posting questions or committing code. \n Default:  None \n \n\n \n \n SESSION_COOKIE_NAME \u00b6 \n The name of the session cookie. Can be changed in case you already have a\ncookie with the same name. \n Default:  'session' \n \n\n \n \n SESSION_COOKIE_DOMAIN \u00b6 \n The domain match rule that the session cookie will be valid for. If not\nset, the cookie will be valid for all subdomains of  SERVER_NAME .\nIf  False , the cookie\u2019s domain will not be set. \n Default:  None \n \n\n \n \n SESSION_COOKIE_PATH \u00b6 \n The path that the session cookie will be valid for. If not set, the cookie\nwill be valid underneath  APPLICATION_ROOT  or  /  if that is not set. \n Default:  None \n \n\n \n \n SESSION_COOKIE_HTTPONLY \u00b6 \n Browsers will not allow JavaScript access to cookies marked as \u201cHTTP only\u201d\nfor security. \n Default:  True \n \n\n \n \n SESSION_COOKIE_SECURE \u00b6 \n Browsers will only send cookies with requests over HTTPS if the cookie is\nmarked \u201csecure\u201d. The application must be served over HTTPS for this to make\nsense. \n Default:  False \n \n\n \n \n SESSION_COOKIE_SAMESITE \u00b6 \n Restrict how cookies are sent with requests from external sites. Can\nbe set to  'Lax'  (recommended) or  'Strict' .\nSee  Set-Cookie options . \n Default:  None \n \n New in version 1.0. \n \n \n Changelog \n\n \n \n PERMANENT_SESSION_LIFETIME \u00b6 \n If  session.permanent  is true, the cookie\u2019s expiration will be set this\nnumber of seconds in the future. Can either be a\n datetime.timedelta  or an  int . \n Flask\u2019s default cookie implementation validates that the cryptographic\nsignature is not older than this value. \n Default:  timedelta(days=31)  ( 2678400  seconds) \n \n\n \n \n SESSION_REFRESH_EACH_REQUEST \u00b6 \n Control whether the cookie is sent with every response when\n session.permanent  is true. Sending the cookie every time (the default)\ncan more reliably keep the session from expiring, but uses more bandwidth.\nNon-permanent sessions are not affected. \n Default:  True \n \n\n \n \n USE_X_SENDFILE \u00b6 \n When serving files, set the  X-Sendfile  header instead of serving the\ndata with Flask. Some web servers, such as Apache, recognize this and serve\nthe data more efficiently. This only makes sense when using such a server. \n Default:  False \n \n\n \n \n SEND_FILE_MAX_AGE_DEFAULT \u00b6 \n When serving files, set the cache control max age to this number of\nseconds.  Can either be a  datetime.timedelta  or an  int .\nOverride this value on a per-file basis using\n get_send_file_max_age()  on the application or blueprint. \n Default:  timedelta(hours=12)  ( 43200  seconds) \n \n\n \n \n SERVER_NAME \u00b6 \n Inform the application what host and port it is bound to. Required\nfor subdomain route matching support. \n If set, will be used for the session cookie domain if\n SESSION_COOKIE_DOMAIN  is not set. Modern web browsers will\nnot allow setting cookies for domains without a dot. To use a domain\nlocally, add any names that should route to the app to your\n hosts  file. \n 127.0 . 0.1   localhost . dev \n \n \n If set,  url_for  can generate external URLs with only an application\ncontext instead of a request context. \n Default:  None \n \n\n \n \n APPLICATION_ROOT \u00b6 \n Inform the application what path it is mounted under by the application /\nweb server. \n Will be used for the session cookie path if  SESSION_COOKIE_PATH  is not\nset. \n Default:  '/' \n \n\n \n \n PREFERRED_URL_SCHEME \u00b6 \n Use this scheme for generating external URLs when not in a request context. \n Default:  'http' \n \n\n \n \n MAX_CONTENT_LENGTH \u00b6 \n Don\u2019t read more than this many bytes from the incoming request data. If not\nset and the request does not specify a  CONTENT_LENGTH , no data will be\nread for security. \n Default:  None \n \n\n \n \n JSON_AS_ASCII \u00b6 \n Serialize objects to ASCII-encoded JSON. If this is disabled, the JSON\nwill be returned as a Unicode string, or encoded as  UTF-8  by\n jsonify . This has security implications when rendering the JSON in\nto JavaScript in templates, and should typically remain enabled. \n Default:  True \n \n\n \n \n JSON_SORT_KEYS \u00b6 \n Sort the keys of JSON objects alphabetically. This is useful for caching\nbecause it ensures the data is serialized the same way no matter what\nPython\u2019s hash seed is. While not recommended, you can disable this for a\npossible performance improvement at the cost of caching. \n Default:  True \n \n\n \n \n JSONIFY_PRETTYPRINT_REGULAR \u00b6 \n jsonify  responses will be output with newlines, spaces, and indentation\nfor easier reading by humans. Always enabled in debug mode. \n Default:  False \n \n\n \n \n JSONIFY_MIMETYPE \u00b6 \n The mimetype of  jsonify  responses. \n Default:  'application/json' \n \n\n \n \n TEMPLATES_AUTO_RELOAD \u00b6 \n Reload templates when they are changed. If not set, it will be enabled in\ndebug mode. \n Default:  None \n \n\n \n \n EXPLAIN_TEMPLATE_LOADING \u00b6 \n Log debugging information tracing how a template file was loaded. This can\nbe useful to figure out why a template was not loaded or the wrong file\nappears to be loaded. \n Default:  False \n \n\n \n \n MAX_COOKIE_SIZE \u00b6 \n Warn if cookie headers are larger than this many bytes. Defaults to\n 4093 . Larger cookies may be silently ignored by browsers. Set to\n 0  to disable the warning. \n \n\n \n Changed in version 1.0:  LOGGER_NAME  and  LOGGER_HANDLER_POLICY  were removed. See\n Logging  for information about configuration. \n Added  ENV  to reflect the  FLASK_ENV  environment\nvariable. \n Added  SESSION_COOKIE_SAMESITE  to control the session\ncookie\u2019s  SameSite  option. \n Added  MAX_COOKIE_SIZE  to control a warning from Werkzeug. \n \n \n Changelog \n New in version 0.11:  SESSION_REFRESH_EACH_REQUEST ,  TEMPLATES_AUTO_RELOAD ,\n LOGGER_HANDLER_POLICY ,  EXPLAIN_TEMPLATE_LOADING \n \n \n New in version 0.10:  JSON_AS_ASCII ,  JSON_SORT_KEYS ,  JSONIFY_PRETTYPRINT_REGULAR \n \n \n New in version 0.9:  PREFERRED_URL_SCHEME \n \n \n New in version 0.8:  TRAP_BAD_REQUEST_ERRORS ,  TRAP_HTTP_EXCEPTIONS ,\n APPLICATION_ROOT ,  SESSION_COOKIE_DOMAIN ,\n SESSION_COOKIE_PATH ,  SESSION_COOKIE_HTTPONLY ,\n SESSION_COOKIE_SECURE \n \n \n New in version 0.7:  PROPAGATE_EXCEPTIONS ,  PRESERVE_CONTEXT_ON_EXCEPTION \n \n \n New in version 0.6:  MAX_CONTENT_LENGTH \n \n \n New in version 0.5:  SERVER_NAME \n \n \n New in version 0.4:  LOGGER_NAME \n \n \n \n Configuring from Files \u00b6 \n Configuration becomes more useful if you can store it in a separate file,\nideally located outside the actual application package. This makes\npackaging and distributing your application possible via various package\nhandling tools ( Deploying with Setuptools ) and finally modifying the\nconfiguration file afterwards. \n So a common pattern is this: \n app   =   Flask ( __name__ ) \n app . config . from_object ( 'yourapplication.default_settings' ) \n app . config . from_envvar ( 'YOURAPPLICATION_SETTINGS' ) \n \n \n This first loads the configuration from the\n yourapplication.default_settings  module and then overrides the values\nwith the contents of the file the  YOURAPPLICATION_SETTINGS \nenvironment variable points to.  This environment variable can be set on\nLinux or OS X with the export command in the shell before starting the\nserver: \n $ export YOURAPPLICATION_SETTINGS=/path/to/settings.cfg\n$ python run-app.py\n * Running on http://127.0.0.1:5000/\n * Restarting with reloader...\n \n \n On Windows systems use the  set  builtin instead: \n > set   YOURAPPLICATION_SETTINGS = \\ path \\ to \\ settings . cfg \n \n \n The configuration files themselves are actual Python files.  Only values\nin uppercase are actually stored in the config object later on.  So make\nsure to use uppercase letters for your config keys. \n Here is an example of a configuration file: \n # Example configuration \n DEBUG   =   False \n SECRET_KEY   =   b '_5#y2L\"F4Q8z \\n\\xec ]/' \n \n \n Make sure to load the configuration very early on, so that extensions have\nthe ability to access the configuration when starting up.  There are other\nmethods on the config object as well to load from individual files.  For a\ncomplete reference, read the  Config  object\u2019s\ndocumentation. \n \n \n Configuring from Environment Variables \u00b6 \n In addition to pointing to configuration files using environment variables, you\nmay find it useful (or necessary) to control your configuration values directly\nfrom the environment. \n Environment variables can be set on Linux or OS X with the export command in\nthe shell before starting the server: \n $ export SECRET_KEY='5f352379324c22463451387a0aec5d2f'\n$ export DEBUG=False\n$ python run-app.py\n * Running on http://127.0.0.1:5000/\n * Restarting with reloader...\n \n \n On Windows systems use the  set  builtin instead: \n > set   SECRET_KEY = '5f352379324c22463451387a0aec5d2f' \n > set   DEBUG = False \n \n \n While this approach is straightforward to use, it is important to remember that\nenvironment variables are strings \u2013 they are not automatically deserialized\ninto Python types. \n Here is an example of a configuration file that uses environment variables: \n # Example configuration \n import   os \n\n ENVIRONMENT_DEBUG   =   os . environ . get ( \"DEBUG\" ,   default = False ) \n if   ENVIRONMENT_DEBUG . lower ()   in   ( \"f\" ,   \"false\" ): \n     ENVIRONMENT_DEBUG   =   False \n\n DEBUG   =   ENVIRONMENT_DEBUG \n SECRET_KEY   =   os . environ . get ( \"SECRET_KEY\" ,   default = None ) \n if   not   SECRET_KEY : \n     raise   ValueError ( \"No secret key set for Flask application\" ) \n \n \n Notice that any value besides an empty string will be interpreted as a boolean\n True  value in Python, which requires care if an environment explicitly sets\nvalues intended to be  False . \n Make sure to load the configuration very early on, so that extensions have the\nability to access the configuration when starting up.  There are other methods\non the config object as well to load from individual files.  For a complete\nreference, read the  Config  class documentation. \n \n \n Configuration Best Practices \u00b6 \n The downside with the approach mentioned earlier is that it makes testing\na little harder.  There is no single 100% solution for this problem in\ngeneral, but there are a couple of things you can keep in mind to improve\nthat experience: \n \n Create your application in a function and register blueprints on it.\nThat way you can create multiple instances of your application with\ndifferent configurations attached which makes unittesting a lot\neasier.  You can use this to pass in configuration as needed. \n Do not write code that needs the configuration at import time.  If you\nlimit yourself to request-only accesses to the configuration you can\nreconfigure the object later on as needed. \n \n \n \n Development / Production \u00b6 \n Most applications need more than one configuration.  There should be at\nleast separate configurations for the production server and the one used\nduring development.  The easiest way to handle this is to use a default\nconfiguration that is always loaded and part of the version control, and a\nseparate configuration that overrides the values as necessary as mentioned\nin the example above: \n app   =   Flask ( __name__ ) \n app . config . from_object ( 'yourapplication.default_settings' ) \n app . config . from_envvar ( 'YOURAPPLICATION_SETTINGS' ) \n \n \n Then you just have to add a separate  config.py  file and export\n YOURAPPLICATION_SETTINGS=/path/to/config.py  and you are done.  However\nthere are alternative ways as well.  For example you could use imports or\nsubclassing. \n What is very popular in the Django world is to make the import explicit in\nthe config file by adding  from   yourapplication.default_settings \n import   *  to the top of the file and then overriding the changes by hand.\nYou could also inspect an environment variable like\n YOURAPPLICATION_MODE  and set that to  production ,  development  etc\nand import different hardcoded files based on that. \n An interesting pattern is also to use classes and inheritance for\nconfiguration: \n class   Config ( object ): \n     DEBUG   =   False \n     TESTING   =   False \n     DATABASE_URI   =   'sqlite:///:memory:' \n\n class   ProductionConfig ( Config ): \n     DATABASE_URI   =   'mysql://user@localhost/foo' \n\n class   DevelopmentConfig ( Config ): \n     DEBUG   =   True \n\n class   TestingConfig ( Config ): \n     TESTING   =   True \n \n \n To enable such a config you just have to call into\n from_object() : \n app . config . from_object ( 'configmodule.ProductionConfig' ) \n \n \n There are many different ways and it\u2019s up to you how you want to manage\nyour configuration files.  However here a list of good recommendations: \n \n Keep a default configuration in version control.  Either populate the\nconfig with this default configuration or import it in your own\nconfiguration files before overriding values. \n Use an environment variable to switch between the configurations.\nThis can be done from outside the Python interpreter and makes\ndevelopment and deployment much easier because you can quickly and\neasily switch between different configs without having to touch the\ncode at all.  If you are working often on different projects you can\neven create your own script for sourcing that activates a virtualenv\nand exports the development configuration for you. \n Use a tool like  fabric  in production to push code and\nconfigurations separately to the production server(s).  For some\ndetails about how to do that, head over to the\n Deploying with Fabric  pattern. \n \n \n \n Instance Folders \u00b6 \n \n Changelog \n New in version 0.8. \n \n Flask 0.8 introduces instance folders.  Flask for a long time made it\npossible to refer to paths relative to the application\u2019s folder directly\n(via  Flask.root_path ).  This was also how many developers loaded\nconfigurations stored next to the application.  Unfortunately however this\nonly works well if applications are not packages in which case the root\npath refers to the contents of the package. \n With Flask 0.8 a new attribute was introduced:\n Flask.instance_path .  It refers to a new concept called the\n\u201cinstance folder\u201d.  The instance folder is designed to not be under\nversion control and be deployment specific.  It\u2019s the perfect place to\ndrop things that either change at runtime or configuration files. \n You can either explicitly provide the path of the instance folder when\ncreating the Flask application or you can let Flask autodetect the\ninstance folder.  For explicit configuration use the  instance_path \nparameter: \n app   =   Flask ( __name__ ,   instance_path = '/path/to/instance/folder' ) \n \n \n Please keep in mind that this path  must  be absolute when provided. \n If the  instance_path  parameter is not provided the following default\nlocations are used: \n \n Uninstalled module: \n / myapp . py \n / instance \n \n \n \n Uninstalled package: \n / myapp \n     / __init__ . py \n / instance \n \n \n \n Installed module or package: \n $PREFIX/lib/python2.X/site-packages/myapp\n$PREFIX/var/myapp-instance\n \n \n $PREFIX  is the prefix of your Python installation.  This can be\n /usr  or the path to your virtualenv.  You can print the value of\n sys.prefix  to see what the prefix is set to. \n \n \n Since the config object provided loading of configuration files from\nrelative filenames we made it possible to change the loading via filenames\nto be relative to the instance path if wanted.  The behavior of relative\npaths in config files can be flipped between \u201crelative to the application\nroot\u201d (the default) to \u201crelative to instance folder\u201d via the\n instance_relative_config  switch to the application constructor: \n app   =   Flask ( __name__ ,   instance_relative_config = True ) \n \n \n Here is a full example of how to configure Flask to preload the config\nfrom a module and then override the config from a file in the config\nfolder if it exists: \n app   =   Flask ( __name__ ,   instance_relative_config = True ) \n app . config . from_object ( 'yourapplication.default_settings' ) \n app . config . from_pyfile ( 'application.cfg' ,   silent = True ) \n \n \n The path to the instance folder can be found via the\n Flask.instance_path .  Flask also provides a shortcut to open a\nfile from the instance folder with  Flask.open_instance_resource() . \n Example usage for both: \n filename   =   os . path . join ( app . instance_path ,   'application.cfg' ) \n with   open ( filename )   as   f : \n     config   =   f . read () \n\n # or via open_instance_resource: \n with   app . open_instance_resource ( 'application.cfg' )   as   f : \n     config   =   f . read () \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Configuration Handling \n Configuration Basics \n Environment and Debug Features \n Builtin Configuration Values \n Configuring from Files \n Configuring from Environment Variables \n Configuration Best Practices \n Development / Production \n Instance Folders \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Logging \n           Next:  Signals \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/installation/", "text": "\n   \n     \n     \n   \n     Installation \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Installation \u00b6 \n \n Python Version \u00b6 \n We recommend using the latest version of Python 3. Flask supports Python 3.4\nand newer, Python 2.7, and PyPy. \n \n \n Dependencies \u00b6 \n These distributions will be installed automatically when installing Flask. \n \n Werkzeug  implements WSGI, the standard Python interface between\napplications and servers. \n Jinja  is a template language that renders the pages your application\nserves. \n MarkupSafe  comes with Jinja. It escapes untrusted input when rendering\ntemplates to avoid injection attacks. \n ItsDangerous  securely signs data to ensure its integrity. This is used\nto protect Flask\u2019s session cookie. \n Click  is a framework for writing command line applications. It provides\nthe  flask  command and allows adding custom management commands. \n \n \n Optional dependencies \u00b6 \n These distributions will not be installed automatically. Flask will detect and\nuse them if you install them. \n \n Blinker  provides support for  Signals . \n SimpleJSON  is a fast JSON implementation that is compatible with\nPython\u2019s  json  module. It is preferred for JSON operations if it is\ninstalled. \n python-dotenv  enables support for  Environment Variables From dotenv  when running  flask \ncommands. \n Watchdog  provides a faster, more efficient reloader for the development\nserver. \n \n \n \n \n Virtual environments \u00b6 \n Use a virtual environment to manage the dependencies for your project, both in\ndevelopment and in production. \n What problem does a virtual environment solve? The more Python projects you\nhave, the more likely it is that you need to work with different versions of\nPython libraries, or even Python itself. Newer versions of libraries for one\nproject can break compatibility in another project. \n Virtual environments are independent groups of Python libraries, one for each\nproject. Packages installed for one project will not affect other projects or\nthe operating system\u2019s packages. \n Python 3 comes bundled with the  venv  module to create virtual\nenvironments. If you\u2019re using a modern version of Python, you can continue on\nto the next section. \n If you\u2019re using Python 2, see  Install virtualenv  first. \n \n Create an environment \u00b6 \n Create a project folder and a  venv  folder within: \n mkdir myproject\n cd  myproject\npython3 -m venv venv\n \n \n On Windows: \n py -3 -m venv venv\n \n \n If you needed to install virtualenv because you are on an older version of\nPython, use the following command instead: \n virtualenv venv\n \n \n On Windows: \n \\Python27\\Scripts\\virtualenv.exe venv\n \n \n \n \n Activate the environment \u00b6 \n Before you work on your project, activate the corresponding environment: \n . venv/bin/activate\n \n \n On Windows: \n venv\\Scripts\\activate\n \n \n Your shell prompt will change to show the name of the activated environment. \n \n \n \n Install Flask \u00b6 \n Within the activated environment, use the following command to install Flask: \n pip install Flask\n \n \n Flask is now installed. Check out the  Quickstart  or go to the\n Documentation Overview . \n \n Living on the edge \u00b6 \n If you want to work with the latest Flask code before it\u2019s released, install or\nupdate the code from the master branch: \n pip install -U https://github.com/pallets/flask/archive/master.tar.gz\n \n \n \n \n \n Install virtualenv \u00b6 \n If you are using Python 2, the venv module is not available. Instead,\ninstall  virtualenv . \n On Linux, virtualenv is provided by your package manager: \n # Debian, Ubuntu \nsudo apt-get install python-virtualenv\n\n # CentOS, Fedora \nsudo yum install python-virtualenv\n\n # Arch \nsudo pacman -S python-virtualenv\n \n \n If you are on Mac OS X or Windows, download  get-pip.py , then: \n sudo python2 Downloads/get-pip.py\nsudo python2 -m pip install virtualenv\n \n \n On Windows, as an administrator: \n \\Python27\\python.exe Downloads\\get-pip.py\n\\Python27\\python.exe -m pip install virtualenv\n \n \n Now you can return above and  Create an environment . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Installation \n Python Version \n Dependencies \n Optional dependencies \n \n \n Virtual environments \n Create an environment \n Activate the environment \n \n \n Install Flask \n Living on the edge \n \n \n Install virtualenv \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Foreword for Experienced Programmers \n           Next:  Quickstart \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/tutorial/", "text": "\n   \n     \n     \n   \n     Tutorial \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Tutorial \u00b6 \n \n Contents: \n \n Project Layout \n Application Setup \n Define and Access the Database \n Blueprints and Views \n Templates \n Static Files \n Blog Blueprint \n Make the Project Installable \n Test Coverage \n Deploy to Production \n Keep Developing! \n \n \n This tutorial will walk you through creating a basic blog application\ncalled Flaskr. Users will be able to register, log in, create posts,\nand edit or delete their own posts. You will be able to package and\ninstall the application on other computers. \n \n It\u2019s assumed that you\u2019re already familiar with Python. The  official\ntutorial  in the Python docs is a great way to learn or review first. \n While it\u2019s designed to give a good starting point, the tutorial doesn\u2019t\ncover all of Flask\u2019s features. Check out the  Quickstart  for an\noverview of what Flask can do, then dive into the docs to find out more.\nThe tutorial only uses what\u2019s provided by Flask and Python. In another\nproject, you might decide to use  Extensions  or other libraries to\nmake some tasks simpler. \n \n Flask is flexible. It doesn\u2019t require you to use any particular project\nor code layout. However, when first starting, it\u2019s helpful to use a more\nstructured approach. This means that the tutorial will require a bit of\nboilerplate up front, but it\u2019s done to avoid many common pitfalls that\nnew developers encounter, and it creates a project that\u2019s easy to expand\non. Once you become more comfortable with Flask, you can step out of\nthis structure and take full advantage of Flask\u2019s flexibility. \n \n The tutorial project is available as an example in the Flask\nrepository , if you want to compare your project\nwith the final product as you follow the tutorial. \n Continue to  Project Layout . \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             Navigation \n \n   Overview \n     \n           Previous:  Quickstart \n           Next:  Project Layout \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/errorhandling/", "text": "\n   \n     \n     \n   \n     Application Errors \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Application Errors \u00b6 \n \n Changelog \n New in version 0.3. \n \n Applications fail, servers fail.  Sooner or later you will see an exception\nin production.  Even if your code is 100% correct, you will still see\nexceptions from time to time.  Why?  Because everything else involved will\nfail.  Here are some situations where perfectly fine code can lead to server\nerrors: \n \n the client terminated the request early and the application was still\nreading from the incoming data \n the database server was overloaded and could not handle the query \n a filesystem is full \n a harddrive crashed \n a backend server overloaded \n a programming error in a library you are using \n network connection of the server to another system failed \n \n And that\u2019s just a small sample of issues you could be facing.  So how do we\ndeal with that sort of problem?  By default if your application runs in\nproduction mode, Flask will display a very simple page for you and log the\nexception to the  logger . \n But there is more you can do, and we will cover some better setups to deal\nwith errors. \n \n Error Logging Tools \u00b6 \n Sending error mails, even if just for critical ones, can become\noverwhelming if enough users are hitting the error and log files are\ntypically never looked at. This is why we recommend using  Sentry  for dealing with application errors.  It\u2019s\navailable as an Open Source project  on GitHub  and is also available as a  hosted version  which you can try for free. Sentry\naggregates duplicate errors, captures the full stack trace and local\nvariables for debugging, and sends you mails based on new errors or\nfrequency thresholds. \n To use Sentry you need to install the  raven  client with extra  flask  dependencies: \n $ pip install raven[flask]\n \n \n And then add this to your Flask app: \n from   raven.contrib.flask   import   Sentry \n sentry   =   Sentry ( app ,   dsn = 'YOUR_DSN_HERE' ) \n \n \n Or if you are using factories you can also init it later: \n from   raven.contrib.flask   import   Sentry \n sentry   =   Sentry ( dsn = 'YOUR_DSN_HERE' ) \n\n def   create_app (): \n     app   =   Flask ( __name__ ) \n     sentry . init_app ( app ) \n     ... \n     return   app \n \n \n The  YOUR_DSN_HERE  value needs to be replaced with the DSN value you get\nfrom your Sentry installation. \n Afterwards failures are automatically reported to Sentry and from there\nyou can receive error notifications. \n \n \n Error handlers \u00b6 \n You might want to show custom error pages to the user when an error occurs.\nThis can be done by registering error handlers. \n An error handler is a normal view function that return a response, but instead\nof being registered for a route, it is registered for an exception or HTTP\nstatus code that would is raised while trying to handle a request. \n \n Registering \u00b6 \n Register handlers by decorating a function with\n errorhandler() . Or use\n register_error_handler()  to register the function later.\nRemember to set the error code when returning the response. \n @app . errorhandler ( werkzeug . exceptions . BadRequest ) \n def   handle_bad_request ( e ): \n     return   'bad request!' ,   400 \n\n # or, without the decorator \n app . register_error_handler ( 400 ,   handle_bad_request ) \n \n \n werkzeug.exceptions.HTTPException  subclasses like\n BadRequest  and their HTTP codes are interchangeable\nwhen registering handlers. ( BadRequest.code   ==   400 ) \n Non-standard HTTP codes cannot be registered by code because they are not known\nby Werkzeug. Instead, define a subclass of\n HTTPException  with the appropriate code and\nregister and raise that exception class. \n class   InsufficientStorage ( werkzeug . exceptions . HTTPException ): \n     code   =   507 \n     description   =   'Not enough storage space.' \n\n app . register_error_handler ( InsuffcientStorage ,   handle_507 ) \n\n raise   InsufficientStorage () \n \n \n Handlers can be registered for any exception class, not just\n HTTPException  subclasses or HTTP status\ncodes. Handlers can be registered for a specific class, or for all subclasses\nof a parent class. \n \n \n Handling \u00b6 \n When an exception is caught by Flask while handling a request, it is first\nlooked up by code. If no handler is registered for the code, it is looked up\nby its class hierarchy; the most specific handler is chosen. If no handler is\nregistered,  HTTPException  subclasses show a\ngeneric message about their code, while other exceptions are converted to a\ngeneric 500 Internal Server Error. \n For example, if an instance of  ConnectionRefusedError  is raised, and a handler\nis registered for  ConnectionError  and  ConnectionRefusedError ,\nthe more specific  ConnectionRefusedError  handler is called with the\nexception instance to generate the response. \n Handlers registered on the blueprint take precedence over those registered\nglobally on the application, assuming a blueprint is handling the request that\nraises the exception. However, the blueprint cannot handle 404 routing errors\nbecause the 404 occurs at the routing level before the blueprint can be\ndetermined. \n \n Changelog \n Changed in version 0.11:  Handlers are prioritized by specificity of the exception classes they are\nregistered for instead of the order they are registered in. \n \n \n \n \n Logging \u00b6 \n See  Logging  for information on how to log exceptions, such as by\nemailing them to admins. \n \n \n \n Debugging Application Errors \u00b6 \n For production applications, configure your application with logging and\nnotifications as described in  Application Errors .  This section provides\npointers when debugging deployment configuration and digging deeper with a\nfull-featured Python debugger. \n \n When in Doubt, Run Manually \u00b6 \n Having problems getting your application configured for production?  If you\nhave shell access to your host, verify that you can run your application\nmanually from the shell in the deployment environment.  Be sure to run under\nthe same user account as the configured deployment to troubleshoot permission\nissues.  You can use Flask\u2019s builtin development server with  debug=True  on\nyour production host, which is helpful in catching configuration issues, but\n be sure to do this temporarily in a controlled environment.  Do not run in\nproduction with  debug=True . \n \n \n Working with Debuggers \u00b6 \n To dig deeper, possibly to trace code execution, Flask provides a debugger out\nof the box (see  Debug Mode ).  If you would like to use another Python\ndebugger, note that debuggers interfere with each other.  You have to set some\noptions in order to use your favorite debugger: \n \n debug         - whether to enable debug mode and catch exceptions \n use_debugger  - whether to use the internal Flask debugger \n use_reloader  - whether to reload and fork the process on exception \n \n debug  must be True (i.e., exceptions must be caught) in order for the other\ntwo options to have any value. \n If you\u2019re using Aptana/Eclipse for debugging you\u2019ll need to set both\n use_debugger  and  use_reloader  to False. \n A possible useful pattern for configuration is to set the following in your\nconfig.yaml (change the block as appropriate for your application, of course): \n FLASK : \n     DEBUG :   True \n     DEBUG_WITH_APTANA :   True \n \n \n Then in your application\u2019s entry-point (main.py), you could have something like: \n if   __name__   ==   \"__main__\" : \n     # To allow aptana to receive errors, set use_debugger=False \n     app   =   create_app ( config = \"config.yaml\" ) \n\n     if   app . debug :   use_debugger   =   True \n     try : \n         # Disable Flask's debugger if external debugger is requested \n         use_debugger   =   not ( app . config . get ( 'DEBUG_WITH_APTANA' )) \n     except : \n         pass \n     app . run ( use_debugger = use_debugger ,   debug = app . debug , \n             use_reloader = use_debugger ,   host = '0.0.0.0' ) \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Application Errors \n Error Logging Tools \n Error handlers \n Registering \n Handling \n \n \n Logging \n \n \n Debugging Application Errors \n When in Doubt, Run Manually \n Working with Debuggers \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Testing Flask Applications \n           Next:  Logging \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/", "text": "\n   \n     \n     \n   \n     Welcome to Flask \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = ''; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Welcome to Flask \u00b6 \n \n Welcome to Flask\u2019s documentation. Get started with  Installation \nand then get an overview with the  Quickstart . There is also a\nmore detailed  Tutorial  that shows how to create a small but\ncomplete application with Flask. Common patterns are described in the\n Patterns for Flask  section. The rest of the docs describe each component of\nFlask in detail, with a full reference in the  API  section. \n Flask depends on the  Jinja  template engine and the  Werkzeug  WSGI\ntoolkit. The documentation for these libraries can be found at: \n \n Jinja documentation \n Werkzeug documentation \n \n \n User\u2019s Guide \u00b6 \n This part of the documentation, which is mostly prose, begins with some\nbackground information about Flask, then focuses on step-by-step\ninstructions for web development with Flask. \n \n \n Foreword \n What does \u201cmicro\u201d mean? \n Configuration and Conventions \n Growing with Flask \n \n \n Foreword for Experienced Programmers \n Thread-Locals in Flask \n Develop for the Web with Caution \n \n \n Installation \n Python Version \n Dependencies \n Virtual environments \n Install Flask \n Install virtualenv \n \n \n Quickstart \n A Minimal Application \n What to do if the Server does not Start \n Debug Mode \n Routing \n Static Files \n Rendering Templates \n Accessing Request Data \n Redirects and Errors \n About Responses \n Sessions \n Message Flashing \n Logging \n Hooking in WSGI Middlewares \n Using Flask Extensions \n Deploying to a Web Server \n \n \n Tutorial \n Project Layout \n Application Setup \n Define and Access the Database \n Blueprints and Views \n Templates \n Static Files \n Blog Blueprint \n Make the Project Installable \n Test Coverage \n Deploy to Production \n Keep Developing! \n \n \n Templates \n Jinja Setup \n Standard Context \n Standard Filters \n Controlling Autoescaping \n Registering Filters \n Context Processors \n \n \n Testing Flask Applications \n The Application \n The Testing Skeleton \n The First Test \n Logging In and Out \n Test Adding Messages \n Other Testing Tricks \n Faking Resources and Context \n Keeping the Context Around \n Accessing and Modifying Sessions \n Testing JSON APIs \n Testing CLI Commands \n \n \n Application Errors \n Error Logging Tools \n Error handlers \n Logging \n \n \n Debugging Application Errors \n When in Doubt, Run Manually \n Working with Debuggers \n \n \n Logging \n Basic Configuration \n Email Errors to Admins \n Injecting Request Information \n Other Libraries \n \n \n Configuration Handling \n Configuration Basics \n Environment and Debug Features \n Builtin Configuration Values \n Configuring from Files \n Configuring from Environment Variables \n Configuration Best Practices \n Development / Production \n Instance Folders \n \n \n Signals \n Subscribing to Signals \n Creating Signals \n Sending Signals \n Signals and Flask\u2019s Request Context \n Decorator Based Signal Subscriptions \n Core Signals \n \n \n Pluggable Views \n Basic Principle \n Method Hints \n Method Based Dispatching \n Decorating Views \n Method Views for APIs \n \n \n The Application Context \n Purpose of the Context \n Lifetime of the Context \n Manually Push a Context \n Storing Data \n Events and Signals \n \n \n The Request Context \n Purpose of the Context \n Lifetime of the Context \n Manually Push a Context \n How the Context Works \n Callbacks and Errors \n Context Preservation on Error \n Notes On Proxies \n \n \n Modular Applications with Blueprints \n Why Blueprints? \n The Concept of Blueprints \n My First Blueprint \n Registering Blueprints \n Blueprint Resources \n Building URLs \n Error Handlers \n \n \n Extensions \n Finding Extensions \n Using Extensions \n Building Extensions \n \n \n Command Line Interface \n Application Discovery \n Run the Development Server \n Open a Shell \n Environments \n Debug Mode \n Environment Variables From dotenv \n Environment Variables From virtualenv \n Custom Commands \n Plugins \n Custom Scripts \n PyCharm Integration \n \n \n Development Server \n Command Line \n In Code \n \n \n Working with the Shell \n Command Line Interface \n Creating a Request Context \n Firing Before/After Request \n Further Improving the Shell Experience \n \n \n Patterns for Flask \n Larger Applications \n Application Factories \n Application Dispatching \n Implementing API Exceptions \n Using URL Processors \n Deploying with Setuptools \n Deploying with Fabric \n Using SQLite 3 with Flask \n SQLAlchemy in Flask \n Uploading Files \n Caching \n View Decorators \n Form Validation with WTForms \n Template Inheritance \n Message Flashing \n AJAX with jQuery \n Custom Error Pages \n Lazily Loading Views \n MongoKit in Flask \n Adding a favicon \n Streaming Contents \n Deferred Request Callbacks \n Adding HTTP Method Overrides \n Request Content Checksums \n Celery Background Tasks \n Subclassing Flask \n \n \n Deployment Options \n Hosted options \n Self-hosted options \n \n \n Becoming Big \n Read the Source. \n Hook. Extend. \n Subclass. \n Wrap with middleware. \n Fork. \n Scale like a pro. \n Discuss with the community. \n \n \n \n \n \n \n API Reference \u00b6 \n If you are looking for information on a specific function, class or\nmethod, this part of the documentation is for you. \n \n \n API \n Application Object \n Blueprint Objects \n Incoming Request Data \n Response Objects \n Sessions \n Session Interface \n Test Client \n Test CLI Runner \n Application Globals \n Useful Functions and Classes \n Message Flashing \n JSON Support \n Template Rendering \n Configuration \n Stream Helpers \n Useful Internals \n Signals \n Class-Based Views \n URL Route Registrations \n View Function Options \n Command Line Interface \n \n \n \n \n \n \n Additional Notes \u00b6 \n Design notes, legal information and changelog are here for the interested. \n \n \n Design Decisions in Flask \n The Explicit Application Object \n The Routing System \n One Template Engine \n Micro with Dependencies \n Thread Locals \n What Flask is, What Flask is Not \n \n \n HTML/XHTML FAQ \n History of XHTML \n History of HTML5 \n HTML versus XHTML \n What does \u201cstrict\u201d mean? \n New technologies in HTML5 \n What should be used? \n \n \n Security Considerations \n Cross-Site Scripting (XSS) \n Cross-Site Request Forgery (CSRF) \n JSON Security \n Security Headers \n \n \n Unicode in Flask \n Automatic Conversion \n The Golden Rule \n Encoding and Decoding Yourself \n Configuring Editors \n \n \n Flask Extension Development \n Anatomy of an Extension \n \u201cHello Flaskext!\u201d \n Initializing Extensions \n The Extension Code \n Using _app_ctx_stack \n Learn from Others \n Approved Extensions \n \n \n Pocoo Styleguide \n General Layout \n Expressions and Statements \n Naming Conventions \n Docstrings \n Comments \n \n \n Upgrading to Newer Releases \n Version 0.12 \n Version 0.11 \n Version 0.10 \n Version 0.9 \n Version 0.8 \n Version 0.7 \n Version 0.6 \n Version 0.5 \n Version 0.4 \n Version 0.3 \n \n \n Flask Changelog \n Version 1.0.3 \n Version 1.0.2 \n Version 1.0.1 \n Version 1.0 \n Version 0.12.4 \n Version 0.12.3 \n Version 0.12.2 \n Version 0.12.1 \n Version 0.12 \n Version 0.11.2 \n Version 0.11.1 \n Version 0.11 \n Version 0.10.2 \n Version 0.10.1 \n Version 0.10 \n Version 0.9 \n Version 0.8.1 \n Version 0.8 \n Version 0.7.3 \n Version 0.7.2 \n Version 0.7.1 \n Version 0.7 \n Version 0.6.1 \n Version 0.6 \n Version 0.5.2 \n Version 0.5.1 \n Version 0.5 \n Version 0.4 \n Version 0.3.1 \n Version 0.3 \n Version 0.2 \n Version 0.1 \n \n \n License \n Authors \n General License Definitions \n Flask License \n Flask Artwork License \n \n \n How to contribute to Flask \n Support questions \n Reporting issues \n Submitting patches \n Caution: zero-padded file modes \n \n \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Project Links \n   \n     Donate to Pallets \n  \n     Flask Website \n  \n     PyPI releases \n  \n     Source Code \n  \n     Issue Tracker \n   \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/quickstart/", "text": "\n   \n     \n     \n   \n     Quickstart \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Quickstart \u00b6 \n Eager to get started?  This page gives a good introduction to Flask.  It\nassumes you already have Flask installed.  If you do not, head over to the\n Installation  section. \n \n A Minimal Application \u00b6 \n A minimal Flask application looks something like this: \n from   flask   import   Flask \n app   =   Flask ( __name__ ) \n\n @app . route ( '/' ) \n def   hello_world (): \n     return   'Hello, World!' \n \n \n So what did that code do? \n \n First we imported the  Flask  class.  An instance of this\nclass will be our WSGI application. \n Next we create an instance of this class. The first argument is the name of\nthe application\u2019s module or package.  If you are using a single module (as\nin this example), you should use  __name__  because depending on if it\u2019s\nstarted as application or imported as module the name will be different\n( '__main__'  versus the actual import name). This is needed so that\nFlask knows where to look for templates, static files, and so on. For more\ninformation have a look at the  Flask  documentation. \n We then use the  route()  decorator to tell Flask what URL\nshould trigger our function. \n The function is given a name which is also used to generate URLs for that\nparticular function, and returns the message we want to display in the\nuser\u2019s browser. \n \n Just save it as  hello.py  or something similar. Make sure to not call\nyour application  flask.py  because this would conflict with Flask\nitself. \n To run the application you can either use the  flask  command or\npython\u2019s  -m  switch with Flask.  Before you can do that you need\nto tell your terminal the application to work with by exporting the\n FLASK_APP  environment variable: \n $ export FLASK_APP=hello.py\n$ flask run\n * Running on http://127.0.0.1:5000/\n \n \n If you are on Windows, the environment variable syntax depends on command line\ninterpreter. On Command Prompt: \n C : \\ path \\ to \\ app > set   FLASK_APP = hello . py \n \n \n And on PowerShell: \n PS C:\\path\\to\\app> $env:FLASK_APP = \"hello.py\"\n \n \n Alternatively you can use  python -m flask : \n $ export FLASK_APP=hello.py\n$ python -m flask run\n * Running on http://127.0.0.1:5000/\n \n \n This launches a very simple builtin server, which is good enough for testing\nbut probably not what you want to use in production. For deployment options see\n Deployment Options . \n Now head over to  http://127.0.0.1:5000/ , and you\nshould see your hello world greeting. \n \n Externally Visible Server \n If you run the server you will notice that the server is only accessible\nfrom your own computer, not from any other in the network.  This is the\ndefault because in debugging mode a user of the application can execute\narbitrary Python code on your computer. \n If you have the debugger disabled or trust the users on your network,\nyou can make the server publicly available simply by adding\n --host=0.0.0.0  to the command line: \n flask   run   -- host = 0.0 . 0.0 \n \n \n This tells your operating system to listen on all public IPs. \n \n \n \n What to do if the Server does not Start \u00b6 \n In case the  python -m flask  fails or  flask  does not exist,\nthere are multiple reasons this might be the case.  First of all you need\nto look at the error message. \n \n Old Version of Flask \u00b6 \n Versions of Flask older than 0.11 use to have different ways to start the\napplication.  In short, the  flask  command did not exist, and\nneither did  python -m flask .  In that case you have two options:\neither upgrade to newer Flask versions or have a look at the  Development Server \ndocs to see the alternative method for running a server. \n \n \n Invalid Import Name \u00b6 \n The  FLASK_APP  environment variable is the name of the module to import at\n flask run . In case that module is incorrectly named you will get an\nimport error upon start (or if debug is enabled when you navigate to the\napplication). It will tell you what it tried to import and why it failed. \n The most common reason is a typo or because you did not actually create an\n app  object. \n \n \n \n Debug Mode \u00b6 \n (Want to just log errors and stack traces? See  Application Errors ) \n The  flask  script is nice to start a local development server, but\nyou would have to restart it manually after each change to your code.\nThat is not very nice and Flask can do better.  If you enable debug\nsupport the server will reload itself on code changes, and it will also\nprovide you with a helpful debugger if things go wrong. \n To enable all development features (including debug mode) you can export\nthe  FLASK_ENV  environment variable and set it to  development \nbefore running the server: \n $ export FLASK_ENV=development\n$ flask run\n \n \n (On Windows you need to use  set  instead of  export .) \n This does the following things: \n \n it activates the debugger \n it activates the automatic reloader \n it enables the debug mode on the Flask application. \n \n You can also control debug mode separately from the environment by\nexporting  FLASK_DEBUG=1 . \n There are more parameters that are explained in the  Development Server  docs. \n \n Attention \n Even though the interactive debugger does not work in forking environments\n(which makes it nearly impossible to use on production servers), it still\nallows the execution of arbitrary code. This makes it a major security risk\nand therefore it  must never be used on production machines . \n \n Screenshot of the debugger in action: \n \n More information on using the debugger can be found in the  Werkzeug\ndocumentation . \n Have another debugger in mind? See  Working with Debuggers . \n \n \n Routing \u00b6 \n Modern web applications use meaningful URLs to help users. Users are more\nlikely to like a page and come back if the page uses a meaningful URL they can\nremember and use to directly visit a page. \n Use the  route()  decorator to bind a function to a URL. \n @app . route ( '/' ) \n def   index (): \n     return   'Index Page' \n\n @app . route ( '/hello' ) \n def   hello (): \n     return   'Hello, World' \n \n \n You can do more! You can make parts of the URL dynamic and attach multiple\nrules to a function. \n \n Variable Rules \u00b6 \n You can add variable sections to a URL by marking sections with\n <variable_name> . Your function then receives the  <variable_name> \nas a keyword argument. Optionally, you can use a converter to specify the type\nof the argument like  <converter:variable_name> . \n @app . route ( '/user/<username>' ) \n def   show_user_profile ( username ): \n     # show the user profile for that user \n     return   'User  %s '   %   username \n\n @app . route ( '/post/<int:post_id>' ) \n def   show_post ( post_id ): \n     # show the post with the given id, the id is an integer \n     return   'Post  %d '   %   post_id \n\n @app . route ( '/path/<path:subpath>' ) \n def   show_subpath ( subpath ): \n     # show the subpath after /path/ \n     return   'Subpath  %s '   %   subpath \n \n \n Converter types: \n \n \n \n \n \n \n string \n (default) accepts any text without a slash \n \n int \n accepts positive integers \n \n float \n accepts positive floating point values \n \n path \n like  string  but also accepts slashes \n \n uuid \n accepts UUID strings \n \n \n \n \n \n Unique URLs / Redirection Behavior \u00b6 \n The following two rules differ in their use of a trailing slash. \n @app . route ( '/projects/' ) \n def   projects (): \n     return   'The project page' \n\n @app . route ( '/about' ) \n def   about (): \n     return   'The about page' \n \n \n The canonical URL for the  projects  endpoint has a trailing slash.\nIt\u2019s similar to a folder in a file system. If you access the URL without\na trailing slash, Flask redirects you to the canonical URL with the\ntrailing slash. \n The canonical URL for the  about  endpoint does not have a trailing\nslash. It\u2019s similar to the pathname of a file. Accessing the URL with a\ntrailing slash produces a 404 \u201cNot Found\u201d error. This helps keep URLs\nunique for these resources, which helps search engines avoid indexing\nthe same page twice. \n \n \n URL Building \u00b6 \n To build a URL to a specific function, use the  url_for()  function.\nIt accepts the name of the function as its first argument and any number of\nkeyword arguments, each corresponding to a variable part of the URL rule.\nUnknown variable parts are appended to the URL as query parameters. \n Why would you want to build URLs using the URL reversing function\n url_for()  instead of hard-coding them into your templates? \n \n Reversing is often more descriptive than hard-coding the URLs. \n \n You can change your URLs in one go instead of needing to remember to \n manually change hard-coded URLs. \n \n \n \n URL building handles escaping of special characters and Unicode data \n transparently. \n \n \n The generated paths are always absolute, avoiding unexpected behavior\nof relative paths in browsers. \n \n If your application is placed outside the URL root, for example, in \n /myapplication  instead of  / ,  url_for()  properly\nhandles that for you. \n \n \n \n For example, here we use the  test_request_context()  method\nto try out  url_for() .  test_request_context() \ntells Flask to behave as though it\u2019s handling a request even while we use a\nPython shell. See  Context Locals . \n from flask import Flask, url_for\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return 'index'\n\n@app.route('/login')\ndef login():\n    return 'login'\n\n@app.route('/user/<username>')\ndef profile(username):\n    return '{}\\'s profile'.format(username)\n\nwith app.test_request_context():\n    print(url_for('index'))\n    print(url_for('login'))\n    print(url_for('login', next='/'))\n    print(url_for('profile', username='John Doe'))\n\n/\n/login\n/login?next=/\n/user/John%20Doe\n \n \n \n \n HTTP Methods \u00b6 \n Web applications use different HTTP methods when accessing URLs. You should\nfamiliarize yourself with the HTTP methods as you work with Flask. By default,\na route only answers to  GET  requests. You can use the  methods  argument\nof the  route()  decorator to handle different HTTP methods. \n from   flask   import   request \n\n @app . route ( '/login' ,   methods = [ 'GET' ,   'POST' ]) \n def   login (): \n     if   request . method   ==   'POST' : \n         return   do_the_login () \n     else : \n         return   show_the_login_form () \n \n \n If  GET  is present, Flask automatically adds support for the  HEAD  method\nand handles  HEAD  requests according to the  HTTP RFC . Likewise,\n OPTIONS  is automatically implemented for you. \n \n \n \n Static Files \u00b6 \n Dynamic web applications also need static files.  That\u2019s usually where\nthe CSS and JavaScript files are coming from.  Ideally your web server is\nconfigured to serve them for you, but during development Flask can do that\nas well.  Just create a folder called  static  in your package or next to\nyour module and it will be available at  /static  on the application. \n To generate URLs for static files, use the special  'static'  endpoint name: \n url_for ( 'static' ,   filename = 'style.css' ) \n \n \n The file has to be stored on the filesystem as  static/style.css . \n \n \n Rendering Templates \u00b6 \n Generating HTML from within Python is not fun, and actually pretty\ncumbersome because you have to do the HTML escaping on your own to keep\nthe application secure.  Because of that Flask configures the  Jinja2  template engine for you automatically. \n To render a template you can use the  render_template() \nmethod.  All you have to do is provide the name of the template and the\nvariables you want to pass to the template engine as keyword arguments.\nHere\u2019s a simple example of how to render a template: \n from   flask   import   render_template \n\n @app . route ( '/hello/' ) \n @app . route ( '/hello/<name>' ) \n def   hello ( name = None ): \n     return   render_template ( 'hello.html' ,   name = name ) \n \n \n Flask will look for templates in the  templates  folder.  So if your\napplication is a module, this folder is next to that module, if it\u2019s a\npackage it\u2019s actually inside your package: \n Case 1 : a module: \n / application . py \n / templates \n     / hello . html \n \n \n Case 2 : a package: \n / application \n     / __init__ . py \n     / templates \n         / hello . html \n \n \n For templates you can use the full power of Jinja2 templates.  Head over\nto the official  Jinja2 Template Documentation  for more information. \n Here is an example template: \n <!doctype html> \n < title > Hello from Flask </ title > \n {%   if   name   %} \n   < h1 > Hello  {{   name   }} ! </ h1 > \n {%   else   %} \n   < h1 > Hello, World! </ h1 > \n {%   endif   %} \n \n \n Inside templates you also have access to the  request ,\n session  and  g   [1]  objects\nas well as the  get_flashed_messages()  function. \n Templates are especially useful if inheritance is used.  If you want to\nknow how that works, head over to the  Template Inheritance  pattern\ndocumentation.  Basically template inheritance makes it possible to keep\ncertain elements on each page (like header, navigation and footer). \n Automatic escaping is enabled, so if  name  contains HTML it will be escaped\nautomatically.  If you can trust a variable and you know that it will be\nsafe HTML (for example because it came from a module that converts wiki\nmarkup to HTML) you can mark it as safe by using the\n Markup  class or by using the  |safe  filter in the\ntemplate.  Head over to the Jinja 2 documentation for more examples. \n Here is a basic introduction to how the  Markup  class works: \n >>>  from   flask   import   Markup \n >>>  Markup ( '<strong>Hello  %s !</strong>' )   %   '<blink>hacker</blink>' \n Markup(u'<strong>Hello &lt;blink&gt;hacker&lt;/blink&gt;!</strong>') \n >>>  Markup . escape ( '<blink>hacker</blink>' ) \n Markup(u'&lt;blink&gt;hacker&lt;/blink&gt;') \n >>>  Markup ( '<em>Marked up</em> &raquo; HTML' ) . striptags () \n u'Marked up \\xbb HTML' \n \n \n \n Changelog \n Changed in version 0.5:  Autoescaping is no longer enabled for all templates.  The following\nextensions for templates trigger autoescaping:  .html ,  .htm ,\n .xml ,  .xhtml .  Templates loaded from a string will have\nautoescaping disabled. \n \n \n \n \n [1] Unsure what that  g  object is? It\u2019s something in which\nyou can store information for your own needs, check the documentation of\nthat object ( g ) and the  Using SQLite 3 with Flask  for more\ninformation. \n \n \n \n \n Accessing Request Data \u00b6 \n For web applications it\u2019s crucial to react to the data a client sends to\nthe server.  In Flask this information is provided by the global\n request  object.  If you have some experience with Python\nyou might be wondering how that object can be global and how Flask\nmanages to still be threadsafe.  The answer is context locals: \n \n Context Locals \u00b6 \n \n Insider Information \n If you want to understand how that works and how you can implement\ntests with context locals, read this section, otherwise just skip it. \n \n Certain objects in Flask are global objects, but not of the usual kind.\nThese objects are actually proxies to objects that are local to a specific\ncontext.  What a mouthful.  But that is actually quite easy to understand. \n Imagine the context being the handling thread.  A request comes in and the\nweb server decides to spawn a new thread (or something else, the\nunderlying object is capable of dealing with concurrency systems other\nthan threads).  When Flask starts its internal request handling it\nfigures out that the current thread is the active context and binds the\ncurrent application and the WSGI environments to that context (thread).\nIt does that in an intelligent way so that one application can invoke another\napplication without breaking. \n So what does this mean to you?  Basically you can completely ignore that\nthis is the case unless you are doing something like unit testing.  You\nwill notice that code which depends on a request object will suddenly break\nbecause there is no request object.  The solution is creating a request\nobject yourself and binding it to the context.  The easiest solution for\nunit testing is to use the  test_request_context() \ncontext manager.  In combination with the  with  statement it will bind a\ntest request so that you can interact with it.  Here is an example: \n from   flask   import   request \n\n with   app . test_request_context ( '/hello' ,   method = 'POST' ): \n     # now you can do something with the request until the \n     # end of the with block, such as basic assertions: \n     assert   request . path   ==   '/hello' \n     assert   request . method   ==   'POST' \n \n \n The other possibility is passing a whole WSGI environment to the\n request_context()  method: \n from   flask   import   request \n\n with   app . request_context ( environ ): \n     assert   request . method   ==   'POST' \n \n \n \n \n The Request Object \u00b6 \n The request object is documented in the API section and we will not cover\nit here in detail (see  Request ). Here is a broad overview of\nsome of the most common operations.  First of all you have to import it from\nthe  flask  module: \n from   flask   import   request \n \n \n The current request method is available by using the\n method  attribute.  To access form data (data\ntransmitted in a  POST  or  PUT  request) you can use the\n form  attribute.  Here is a full example of the two\nattributes mentioned above: \n @app . route ( '/login' ,   methods = [ 'POST' ,   'GET' ]) \n def   login (): \n     error   =   None \n     if   request . method   ==   'POST' : \n         if   valid_login ( request . form [ 'username' ], \n                        request . form [ 'password' ]): \n             return   log_the_user_in ( request . form [ 'username' ]) \n         else : \n             error   =   'Invalid username/password' \n     # the code below is executed if the request method \n     # was GET or the credentials were invalid \n     return   render_template ( 'login.html' ,   error = error ) \n \n \n What happens if the key does not exist in the  form  attribute?  In that\ncase a special  KeyError  is raised.  You can catch it like a\nstandard  KeyError  but if you don\u2019t do that, a HTTP 400 Bad Request\nerror page is shown instead.  So for many situations you don\u2019t have to\ndeal with that problem. \n To access parameters submitted in the URL ( ?key=value ) you can use the\n args  attribute: \n searchword   =   request . args . get ( 'key' ,   '' ) \n \n \n We recommend accessing URL parameters with  get  or by catching the\n KeyError  because users might change the URL and presenting them a 400\nbad request page in that case is not user friendly. \n For a full list of methods and attributes of the request object, head over\nto the  Request  documentation. \n \n \n File Uploads \u00b6 \n You can handle uploaded files with Flask easily.  Just make sure not to\nforget to set the  enctype=\"multipart/form-data\"  attribute on your HTML\nform, otherwise the browser will not transmit your files at all. \n Uploaded files are stored in memory or at a temporary location on the\nfilesystem.  You can access those files by looking at the\n files  attribute on the request object.  Each\nuploaded file is stored in that dictionary.  It behaves just like a\nstandard Python  file  object, but it also has a\n save()  method that allows you to store that\nfile on the filesystem of the server.  Here is a simple example showing how\nthat works: \n from   flask   import   request \n\n @app . route ( '/upload' ,   methods = [ 'GET' ,   'POST' ]) \n def   upload_file (): \n     if   request . method   ==   'POST' : \n         f   =   request . files [ 'the_file' ] \n         f . save ( '/var/www/uploads/uploaded_file.txt' ) \n     ... \n \n \n If you want to know how the file was named on the client before it was\nuploaded to your application, you can access the\n filename  attribute.  However please keep in\nmind that this value can be forged so never ever trust that value.  If you\nwant to use the filename of the client to store the file on the server,\npass it through the  secure_filename()  function that\nWerkzeug provides for you: \n from   flask   import   request \n from   werkzeug.utils   import   secure_filename \n\n @app . route ( '/upload' ,   methods = [ 'GET' ,   'POST' ]) \n def   upload_file (): \n     if   request . method   ==   'POST' : \n         f   =   request . files [ 'the_file' ] \n         f . save ( '/var/www/uploads/'   +   secure_filename ( f . filename )) \n     ... \n \n \n For some better examples, checkout the  Uploading Files  pattern. \n \n \n Cookies \u00b6 \n To access cookies you can use the  cookies \nattribute.  To set cookies you can use the\n set_cookie  method of response objects.  The\n cookies  attribute of request objects is a\ndictionary with all the cookies the client transmits.  If you want to use\nsessions, do not use the cookies directly but instead use the\n Sessions  in Flask that add some security on top of cookies for you. \n Reading cookies: \n from   flask   import   request \n\n @app . route ( '/' ) \n def   index (): \n     username   =   request . cookies . get ( 'username' ) \n     # use cookies.get(key) instead of cookies[key] to not get a \n     # KeyError if the cookie is missing. \n \n \n Storing cookies: \n from   flask   import   make_response \n\n @app . route ( '/' ) \n def   index (): \n     resp   =   make_response ( render_template ( ... )) \n     resp . set_cookie ( 'username' ,   'the username' ) \n     return   resp \n \n \n Note that cookies are set on response objects.  Since you normally\njust return strings from the view functions Flask will convert them into\nresponse objects for you.  If you explicitly want to do that you can use\nthe  make_response()  function and then modify it. \n Sometimes you might want to set a cookie at a point where the response\nobject does not exist yet.  This is possible by utilizing the\n Deferred Request Callbacks  pattern. \n For this also see  About Responses . \n \n \n \n Redirects and Errors \u00b6 \n To redirect a user to another endpoint, use the  redirect() \nfunction; to abort a request early with an error code, use the\n abort()  function: \n from   flask   import   abort ,   redirect ,   url_for \n\n @app . route ( '/' ) \n def   index (): \n     return   redirect ( url_for ( 'login' )) \n\n @app . route ( '/login' ) \n def   login (): \n     abort ( 401 ) \n     this_is_never_executed () \n \n \n This is a rather pointless example because a user will be redirected from\nthe index to a page they cannot access (401 means access denied) but it\nshows how that works. \n By default a black and white error page is shown for each error code.  If\nyou want to customize the error page, you can use the\n errorhandler()  decorator: \n from   flask   import   render_template \n\n @app . errorhandler ( 404 ) \n def   page_not_found ( error ): \n     return   render_template ( 'page_not_found.html' ),   404 \n \n \n Note the  404  after the  render_template()  call.  This\ntells Flask that the status code of that page should be 404 which means\nnot found.  By default 200 is assumed which translates to: all went well. \n See  Error handlers  for more details. \n \n \n About Responses \u00b6 \n The return value from a view function is automatically converted into a\nresponse object for you.  If the return value is a string it\u2019s converted\ninto a response object with the string as response body, a  200   OK \nstatus code and a  text/html  mimetype.  The logic that Flask applies to\nconverting return values into response objects is as follows: \n \n If a response object of the correct type is returned it\u2019s directly\nreturned from the view. \n If it\u2019s a string, a response object is created with that data and the\ndefault parameters. \n If a tuple is returned the items in the tuple can provide extra\ninformation.  Such tuples have to be in the form  (response,   status, \n headers)  or  (response,   headers)  where at least one item has\nto be in the tuple.  The  status  value will override the status code\nand  headers  can be a list or dictionary of additional header values. \n If none of that works, Flask will assume the return value is a\nvalid WSGI application and convert that into a response object. \n \n If you want to get hold of the resulting response object inside the view\nyou can use the  make_response()  function. \n Imagine you have a view like this: \n @app . errorhandler ( 404 ) \n def   not_found ( error ): \n     return   render_template ( 'error.html' ),   404 \n \n \n You just need to wrap the return expression with\n make_response()  and get the response object to modify it, then\nreturn it: \n @app . errorhandler ( 404 ) \n def   not_found ( error ): \n     resp   =   make_response ( render_template ( 'error.html' ),   404 ) \n     resp . headers [ 'X-Something' ]   =   'A value' \n     return   resp \n \n \n \n \n Sessions \u00b6 \n In addition to the request object there is also a second object called\n session  which allows you to store information specific to a\nuser from one request to the next.  This is implemented on top of cookies\nfor you and signs the cookies cryptographically.  What this means is that\nthe user could look at the contents of your cookie but not modify it,\nunless they know the secret key used for signing. \n In order to use sessions you have to set a secret key.  Here is how\nsessions work: \n from   flask   import   Flask ,   session ,   redirect ,   url_for ,   escape ,   request \n\n app   =   Flask ( __name__ ) \n\n # Set the secret key to some random bytes. Keep this really secret! \n app . secret_key   =   b '_5#y2L\"F4Q8z \\n\\xec ]/' \n\n @app . route ( '/' ) \n def   index (): \n     if   'username'   in   session : \n         return   'Logged in as  %s '   %   escape ( session [ 'username' ]) \n     return   'You are not logged in' \n\n @app . route ( '/login' ,   methods = [ 'GET' ,   'POST' ]) \n def   login (): \n     if   request . method   ==   'POST' : \n         session [ 'username' ]   =   request . form [ 'username' ] \n         return   redirect ( url_for ( 'index' )) \n     return   ''' \n         <form method=\"post\"> \n             <p><input type=text name=username> \n             <p><input type=submit value=Login> \n         </form> \n     ''' \n\n @app . route ( '/logout' ) \n def   logout (): \n     # remove the username from the session if it's there \n     session . pop ( 'username' ,   None ) \n     return   redirect ( url_for ( 'index' )) \n \n \n The  escape()  mentioned here does escaping for you if you are\nnot using the template engine (as in this example). \n \n How to generate good secret keys \n A secret key should be as random as possible. Your operating system has\nways to generate pretty random data based on a cryptographic random\ngenerator. Use the following command to quickly generate a value for\n Flask.secret_key  (or  SECRET_KEY ): \n $ python -c 'import os; print(os.urandom(16))'\nb'_5#y2L\"F4Q8z\\n\\xec]/'\n \n \n \n A note on cookie-based sessions: Flask will take the values you put into the\nsession object and serialize them into a cookie.  If you are finding some\nvalues do not persist across requests, cookies are indeed enabled, and you are\nnot getting a clear error message, check the size of the cookie in your page\nresponses compared to the size supported by web browsers. \n Besides the default client-side based sessions, if you want to handle\nsessions on the server-side instead, there are several\nFlask extensions that support this. \n \n \n Message Flashing \u00b6 \n Good applications and user interfaces are all about feedback.  If the user\ndoes not get enough feedback they will probably end up hating the\napplication.  Flask provides a really simple way to give feedback to a\nuser with the flashing system.  The flashing system basically makes it\npossible to record a message at the end of a request and access it on the next\n(and only the next) request.  This is usually combined with a layout\ntemplate to expose the message. \n To flash a message use the  flash()  method, to get hold of the\nmessages you can use  get_flashed_messages()  which is also\navailable in the templates.  Check out the  Message Flashing \nfor a full example. \n \n \n Logging \u00b6 \n \n Changelog \n New in version 0.3. \n \n Sometimes you might be in a situation where you deal with data that\nshould be correct, but actually is not.  For example you may have some client-side\ncode that sends an HTTP request to the server but it\u2019s obviously\nmalformed.  This might be caused by a user tampering with the data, or the\nclient code failing.  Most of the time it\u2019s okay to reply with  400   Bad \n Request  in that situation, but sometimes that won\u2019t do and the code has\nto continue working. \n You may still want to log that something fishy happened.  This is where\nloggers come in handy.  As of Flask 0.3 a logger is preconfigured for you\nto use. \n Here are some example log calls: \n app . logger . debug ( 'A value for debugging' ) \n app . logger . warning ( 'A warning occurred ( %d  apples)' ,   42 ) \n app . logger . error ( 'An error occurred' ) \n \n \n The attached  logger  is a standard logging\n Logger , so head over to the official  logging\ndocumentation  for more\ninformation. \n Read more on  Application Errors . \n \n \n Hooking in WSGI Middlewares \u00b6 \n If you want to add a WSGI middleware to your application you can wrap the\ninternal WSGI application.  For example if you want to use one of the\nmiddlewares from the Werkzeug package to work around bugs in lighttpd, you\ncan do it like this: \n from   werkzeug.contrib.fixers   import   LighttpdCGIRootFix \n app . wsgi_app   =   LighttpdCGIRootFix ( app . wsgi_app ) \n \n \n \n \n Using Flask Extensions \u00b6 \n Extensions are packages that help you accomplish common tasks. For\nexample, Flask-SQLAlchemy provides SQLAlchemy support that makes it simple\nand easy to use with Flask. \n For more on Flask extensions, have a look at  Extensions . \n \n \n Deploying to a Web Server \u00b6 \n Ready to deploy your new Flask app? Go to  Deployment Options . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Quickstart \n A Minimal Application \n What to do if the Server does not Start \n Old Version of Flask \n Invalid Import Name \n \n \n Debug Mode \n Routing \n Variable Rules \n Unique URLs / Redirection Behavior \n URL Building \n HTTP Methods \n \n \n Static Files \n Rendering Templates \n Accessing Request Data \n Context Locals \n The Request Object \n File Uploads \n Cookies \n \n \n Redirects and Errors \n About Responses \n Sessions \n Message Flashing \n Logging \n Hooking in WSGI Middlewares \n Using Flask Extensions \n Deploying to a Web Server \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Installation \n           Next:  Tutorial \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/foreword/", "text": "\n   \n     \n     \n   \n     Foreword \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Foreword \u00b6 \n Read this before you get started with Flask.  This hopefully answers some\nquestions about the purpose and goals of the project, and when you\nshould or should not be using it. \n \n What does \u201cmicro\u201d mean? \u00b6 \n \u201cMicro\u201d does not mean that your whole web application has to fit into a single\nPython file (although it certainly can), nor does it mean that Flask is lacking\nin functionality. The \u201cmicro\u201d in microframework means Flask aims to keep the\ncore simple but extensible. Flask won\u2019t make many decisions for you, such as\nwhat database to use. Those decisions that it does make, such as what\ntemplating engine to use, are easy to change.  Everything else is up to you, so\nthat Flask can be everything you need and nothing you don\u2019t. \n By default, Flask does not include a database abstraction layer, form\nvalidation or anything else where different libraries already exist that can\nhandle that. Instead, Flask supports extensions to add such functionality to\nyour application as if it was implemented in Flask itself. Numerous extensions\nprovide database integration, form validation, upload handling, various open\nauthentication technologies, and more. Flask may be \u201cmicro\u201d, but it\u2019s ready for\nproduction use on a variety of needs. \n \n \n Configuration and Conventions \u00b6 \n Flask has many configuration values, with sensible defaults, and a few\nconventions when getting started.  By convention, templates and static files are\nstored in subdirectories within the application\u2019s Python source tree, with the\nnames  templates  and  static  respectively. While this can be changed, you\nusually don\u2019t have to, especially when getting started. \n \n \n Growing with Flask \u00b6 \n Once you have Flask up and running, you\u2019ll find a variety of extensions\navailable in the community to integrate your project for production. The Flask\ncore team reviews extensions and ensures approved extensions do not break with\nfuture releases. \n As your codebase grows, you are free to make the design decisions appropriate\nfor your project.  Flask will continue to provide a very simple glue layer to\nthe best that Python has to offer.  You can implement advanced patterns in\nSQLAlchemy or another database tool, introduce non-relational data persistence\nas appropriate, and take advantage of framework-agnostic tools built for WSGI,\nthe Python web interface. \n Flask includes many hooks to customize its behavior. Should you need more\ncustomization, the Flask class is built for subclassing. If you are interested\nin that, check out the  Becoming Big  chapter.  If you are curious about\nthe Flask design principles, head over to the section about  Design Decisions in Flask . \n Continue to  Installation , the  Quickstart , or the\n Foreword for Experienced Programmers . \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Foreword \n What does \u201cmicro\u201d mean? \n Configuration and Conventions \n Growing with Flask \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Welcome to Flask \n           Next:  Foreword for Experienced Programmers \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/testing/", "text": "\n   \n     \n     \n   \n     Testing Flask Applications \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Testing Flask Applications \u00b6 \n \n Something that is untested is broken. \n The origin of this quote is unknown and while it is not entirely correct, it\nis also not far from the truth.  Untested applications make it hard to\nimprove existing code and developers of untested applications tend to\nbecome pretty paranoid.  If an application has automated tests, you can\nsafely make changes and instantly know if anything breaks. \n Flask provides a way to test your application by exposing the Werkzeug\ntest  Client  and handling the context locals for you.\nYou can then use that with your favourite testing solution. \n In this documentation we will use the  pytest  package as the base\nframework for our tests. You can install it with  pip , like so: \n pip   install   pytest \n \n \n \n The Application \u00b6 \n First, we need an application to test; we will use the application from\nthe  Tutorial .  If you don\u2019t have that application yet, get the\nsource code from  the examples . \n \n \n The Testing Skeleton \u00b6 \n We begin by adding a tests directory under the application root.  Then\ncreate a Python file to store our tests ( test_flaskr.py ). When we\nformat the filename like  test_*.py , it will be auto-discoverable by\npytest. \n Next, we create a  pytest fixture  called\n client()  that configures\nthe application for testing and initializes a new database.: \n import   os \n import   tempfile \n\n import   pytest \n\n from   flaskr   import   flaskr \n\n\n @pytest . fixture \n def   client (): \n     db_fd ,   flaskr . app . config [ 'DATABASE' ]   =   tempfile . mkstemp () \n     flaskr . app . config [ 'TESTING' ]   =   True \n     client   =   flaskr . app . test_client () \n\n     with   flaskr . app . app_context (): \n         flaskr . init_db () \n\n     yield   client \n\n     os . close ( db_fd ) \n     os . unlink ( flaskr . app . config [ 'DATABASE' ]) \n \n \n This client fixture will be called by each individual test.  It gives us a\nsimple interface to the application, where we can trigger test requests to the\napplication.  The client will also keep track of cookies for us. \n During setup, the  TESTING  config flag is activated.  What\nthis does is disable error catching during request handling, so that\nyou get better error reports when performing test requests against the\napplication. \n Because SQLite3 is filesystem-based, we can easily use the  tempfile  module\nto create a temporary database and initialize it.  The\n mkstemp()  function does two things for us: it returns a\nlow-level file handle and a random file name, the latter we use as\ndatabase name.  We just have to keep the  db_fd  around so that we can use\nthe  os.close()  function to close the file. \n To delete the database after the test, the fixture closes the file and removes\nit from the filesystem. \n If we now run the test suite, we should see the following output: \n $ pytest\n\n================ test session starts ================\nrootdir: ./flask/examples/flaskr, inifile: setup.cfg\ncollected 0 items\n\n=========== no tests ran in 0.07 seconds ============\n \n \n Even though it did not run any actual tests, we already know that our  flaskr \napplication is syntactically valid, otherwise the import would have died\nwith an exception. \n \n \n The First Test \u00b6 \n Now it\u2019s time to start testing the functionality of the application.\nLet\u2019s check that the application shows \u201cNo entries here so far\u201d if we\naccess the root of the application ( / ).  To do this, we add a new\ntest function to  test_flaskr.py , like this: \n def   test_empty_db ( client ): \n     \"\"\"Start with a blank database.\"\"\" \n\n     rv   =   client . get ( '/' ) \n     assert   b 'No entries here so far'   in   rv . data \n \n \n Notice that our test functions begin with the word  test ; this allows\n pytest  to automatically identify the function as a test to run. \n By using  client.get  we can send an HTTP  GET  request to the application with\nthe given path.  The return value will be a  response_class  object.\nWe can now use the  data  attribute to inspect\nthe return value (as string) from the application.  In this case, we ensure that\n 'No   entries   here   so   far'  is part of the output. \n Run it again and you should see one passing test: \n $ pytest -v\n\n================ test session starts ================\nrootdir: ./flask/examples/flaskr, inifile: setup.cfg\ncollected 1 items\n\ntests/test_flaskr.py::test_empty_db PASSED\n\n============= 1 passed in 0.10 seconds ==============\n \n \n \n \n Logging In and Out \u00b6 \n The majority of the functionality of our application is only available for\nthe administrative user, so we need a way to log our test client in and out\nof the application.  To do this, we fire some requests to the login and logout\npages with the required form data (username and password).  And because the\nlogin and logout pages redirect, we tell the client to  follow_redirects . \n Add the following two functions to your  test_flaskr.py  file: \n def   login ( client ,   username ,   password ): \n     return   client . post ( '/login' ,   data = dict ( \n         username = username , \n         password = password \n     ),   follow_redirects = True ) \n\n\n def   logout ( client ): \n     return   client . get ( '/logout' ,   follow_redirects = True ) \n \n \n Now we can easily test that logging in and out works and that it fails with\ninvalid credentials.  Add this new test function: \n def   test_login_logout ( client ): \n     \"\"\"Make sure login and logout works.\"\"\" \n\n     rv   =   login ( client ,   flaskr . app . config [ 'USERNAME' ],   flaskr . app . config [ 'PASSWORD' ]) \n     assert   b 'You were logged in'   in   rv . data \n\n     rv   =   logout ( client ) \n     assert   b 'You were logged out'   in   rv . data \n\n     rv   =   login ( client ,   flaskr . app . config [ 'USERNAME' ]   +   'x' ,   flaskr . app . config [ 'PASSWORD' ]) \n     assert   b 'Invalid username'   in   rv . data \n\n     rv   =   login ( client ,   flaskr . app . config [ 'USERNAME' ],   flaskr . app . config [ 'PASSWORD' ]   +   'x' ) \n     assert   b 'Invalid password'   in   rv . data \n \n \n \n \n Test Adding Messages \u00b6 \n We should also test that adding messages works.  Add a new test function\nlike this: \n def   test_messages ( client ): \n     \"\"\"Test that messages work.\"\"\" \n\n     login ( client ,   flaskr . app . config [ 'USERNAME' ],   flaskr . app . config [ 'PASSWORD' ]) \n     rv   =   client . post ( '/add' ,   data = dict ( \n         title = '<Hello>' , \n         text = '<strong>HTML</strong> allowed here' \n     ),   follow_redirects = True ) \n     assert   b 'No entries here so far'   not   in   rv . data \n     assert   b '&lt;Hello&gt;'   in   rv . data \n     assert   b '<strong>HTML</strong> allowed here'   in   rv . data \n \n \n Here we check that HTML is allowed in the text but not in the title,\nwhich is the intended behavior. \n Running that should now give us three passing tests: \n $ pytest -v\n\n================ test session starts ================\nrootdir: ./flask/examples/flaskr, inifile: setup.cfg\ncollected 3 items\n\ntests/test_flaskr.py::test_empty_db PASSED\ntests/test_flaskr.py::test_login_logout PASSED\ntests/test_flaskr.py::test_messages PASSED\n\n============= 3 passed in 0.23 seconds ==============\n \n \n \n \n Other Testing Tricks \u00b6 \n Besides using the test client as shown above, there is also the\n test_request_context()  method that can be used\nin combination with the  with  statement to activate a request context\ntemporarily.  With this you can access the  request ,\n g  and  session  objects like in view\nfunctions.  Here is a full example that demonstrates this approach: \n import   flask \n\n app   =   flask . Flask ( __name__ ) \n\n with   app . test_request_context ( '/?name=Peter' ): \n     assert   flask . request . path   ==   '/' \n     assert   flask . request . args [ 'name' ]   ==   'Peter' \n \n \n All the other objects that are context bound can be used in the same\nway. \n If you want to test your application with different configurations and\nthere does not seem to be a good way to do that, consider switching to\napplication factories (see  Application Factories ). \n Note however that if you are using a test request context, the\n before_request()  and  after_request() \nfunctions are not called automatically.  However\n teardown_request()  functions are indeed executed when\nthe test request context leaves the  with  block.  If you do want the\n before_request()  functions to be called as well, you\nneed to call  preprocess_request()  yourself: \n app   =   flask . Flask ( __name__ ) \n\n with   app . test_request_context ( '/?name=Peter' ): \n     app . preprocess_request () \n     ... \n \n \n This can be necessary to open database connections or something similar\ndepending on how your application was designed. \n If you want to call the  after_request()  functions you\nneed to call into  process_response()  which however\nrequires that you pass it a response object: \n app   =   flask . Flask ( __name__ ) \n\n with   app . test_request_context ( '/?name=Peter' ): \n     resp   =   Response ( '...' ) \n     resp   =   app . process_response ( resp ) \n     ... \n \n \n This in general is less useful because at that point you can directly\nstart using the test client. \n \n \n Faking Resources and Context \u00b6 \n \n Changelog \n New in version 0.10. \n \n A very common pattern is to store user authorization information and\ndatabase connections on the application context or the  flask.g \nobject.  The general pattern for this is to put the object on there on\nfirst usage and then to remove it on a teardown.  Imagine for instance\nthis code to get the current user: \n def   get_user (): \n     user   =   getattr ( g ,   'user' ,   None ) \n     if   user   is   None : \n         user   =   fetch_current_user_from_database () \n         g . user   =   user \n     return   user \n \n \n For a test it would be nice to override this user from the outside without\nhaving to change some code.  This can be accomplished with\nhooking the  flask.appcontext_pushed  signal: \n from   contextlib   import   contextmanager \n from   flask   import   appcontext_pushed ,   g \n\n @contextmanager \n def   user_set ( app ,   user ): \n     def   handler ( sender ,   ** kwargs ): \n         g . user   =   user \n     with   appcontext_pushed . connected_to ( handler ,   app ): \n         yield \n \n \n And then to use it: \n from   flask   import   json ,   jsonify \n\n @app . route ( '/users/me' ) \n def   users_me (): \n     return   jsonify ( username = g . user . username ) \n\n with   user_set ( app ,   my_user ): \n     with   app . test_client ()   as   c : \n         resp   =   c . get ( '/users/me' ) \n         data   =   json . loads ( resp . data ) \n         self . assert_equal ( data [ 'username' ],   my_user . username ) \n \n \n \n \n Keeping the Context Around \u00b6 \n \n Changelog \n New in version 0.4. \n \n Sometimes it is helpful to trigger a regular request but still keep the\ncontext around for a little longer so that additional introspection can\nhappen.  With Flask 0.4 this is possible by using the\n test_client()  with a  with  block: \n app   =   flask . Flask ( __name__ ) \n\n with   app . test_client ()   as   c : \n     rv   =   c . get ( '/?tequila=42' ) \n     assert   request . args [ 'tequila' ]   ==   '42' \n \n \n If you were to use just the  test_client()  without\nthe  with  block, the  assert  would fail with an error because  request \nis no longer available (because you are trying to use it outside of the actual request). \n \n \n Accessing and Modifying Sessions \u00b6 \n \n Changelog \n New in version 0.8. \n \n Sometimes it can be very helpful to access or modify the sessions from the\ntest client.  Generally there are two ways for this.  If you just want to\nensure that a session has certain keys set to certain values you can just\nkeep the context around and access  flask.session : \n with   app . test_client ()   as   c : \n     rv   =   c . get ( '/' ) \n     assert   flask . session [ 'foo' ]   ==   42 \n \n \n This however does not make it possible to also modify the session or to\naccess the session before a request was fired.  Starting with Flask 0.8 we\nprovide a so called \u201csession transaction\u201d which simulates the appropriate\ncalls to open a session in the context of the test client and to modify\nit.  At the end of the transaction the session is stored.  This works\nindependently of the session backend used: \n with   app . test_client ()   as   c : \n     with   c . session_transaction ()   as   sess : \n         sess [ 'a_key' ]   =   'a value' \n\n     # once this is reached the session was stored \n \n \n Note that in this case you have to use the  sess  object instead of the\n flask.session  proxy.  The object however itself will provide the\nsame interface. \n \n \n Testing JSON APIs \u00b6 \n \n New in version 1.0. \n \n \n Changelog Flask has great support for JSON, and is a popular choice for building JSON\nAPIs. Making requests with JSON data and examining JSON data in responses is\nvery convenient: \n from   flask   import   request ,   jsonify \n\n @app . route ( '/api/auth' ) \n def   auth (): \n     json_data   =   request . get_json () \n     email   =   json_data [ 'email' ] \n     password   =   json_data [ 'password' ] \n     return   jsonify ( token = generate_token ( email ,   password )) \n\n with   app . test_client ()   as   c : \n     rv   =   c . post ( '/api/auth' ,   json = { \n         'username' :   'flask' ,   'password' :   'secret' \n     }) \n     json_data   =   rv . get_json () \n     assert   verify_token ( email ,   json_data [ 'token' ]) \n \n \n Passing the  json  argument in the test client methods sets the request data\nto the JSON-serialized object and sets the content type to\n application/json . You can get the JSON data from the request or response\nwith  get_json . \n \n \n Testing CLI Commands \u00b6 \n Click comes with  utilities for testing  your CLI commands. A\n CliRunner  runs commands in isolation and\ncaptures the output in a  Result  object. \n Flask provides  test_cli_runner()  to create a\n FlaskCliRunner  that passes the Flask app to the\nCLI automatically. Use its  invoke() \nmethod to call commands in the same way they would be called from the\ncommand line. \n import   click \n\n @app . cli . command ( 'hello' ) \n @click . option ( '--name' ,   default = 'World' ) \n def   hello_command ( name ) \n     click . echo ( f 'Hello,  {name} !' ) \n\n def   test_hello (): \n     runner   =   app . test_cli_runner () \n\n     # invoke the command directly \n     result   =   runner . invoke ( hello_command ,   [ '--name' ,   'Flask' ]) \n     assert   'Hello, Flask'   in   result . output \n\n     # or by name \n     result   =   runner . invoke ( args = [ 'hello' ]) \n     assert   'World'   in   result . output \n \n \n In the example above, invoking the command by name is useful because it\nverifies that the command was correctly registered with the app. \n If you want to test how your command parses parameters, without running\nthe command, use its  make_context()  method.\nThis is useful for testing complex validation rules and custom types. \n def   upper ( ctx ,   param ,   value ): \n     if   value   is   not   None : \n         return   value . upper () \n\n @app . cli . command ( 'hello' ) \n @click . option ( '--name' ,   default = 'World' ,   callback = upper ) \n def   hello_command ( name ) \n     click . echo ( f 'Hello,  {name} !' ) \n\n def   test_hello_params (): \n     context   =   hello_command . make_context ( 'hello' ,   [ '--name' ,   'flask' ]) \n     assert   context . params [ 'name' ]   ==   'FLASK' \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Testing Flask Applications \n The Application \n The Testing Skeleton \n The First Test \n Logging In and Out \n Test Adding Messages \n Other Testing Tricks \n Faking Resources and Context \n Keeping the Context Around \n Accessing and Modifying Sessions \n Testing JSON APIs \n Testing CLI Commands \n \n \n \n Navigation \n \n   Overview \n     \n           Previous:  Templates \n           Next:  Application Errors \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/py-modindex/", "text": "\n   \n     \n     \n   \n     Python Module Index \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n\n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../'; \n   \n\n\n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         Flask 1.0.2 documentation  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n\n    Python Module Index \n\n    \n    f \n    \n\n    \n      \u00a0 \n      \n        f \n      \n        \n        \n        flask \n        \n      \n        \n        \u00a0\u00a0\u00a0\n        flask.json \n        \n      \n        \n        \u00a0\u00a0\u00a0\n        flask.json.tag \n        \n    \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             Navigation \n \n   Overview \n    \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"},
{"url": "http://flask.pocoo.org/docs/1.0/patterns/caching/", "text": "\n   \n     \n     \n   \n     Caching \u2014 Flask 1.0.2 documentation \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n   DOCUMENTATION_OPTIONS.URL_ROOT = '../../'; \n   \n   \n     \n       Navigation \n       \n         \n           index \n         \n           modules  | \n         \n           next  | \n         \n           previous  | \n         Flask 1.0.2 documentation  \u00bb \n           Patterns for Flask  \u00bb  \n       \n       \n\n     \n       \n         \n           \n            \n   \n Caching \u00b6 \n When your application runs slow, throw some caches in.  Well, at least\nit\u2019s the easiest way to speed up things.  What does a cache do?  Say you\nhave a function that takes some time to complete but the results would\nstill be good enough if they were 5 minutes old.  So then the idea is that\nyou actually put the result of that calculation into a cache for some\ntime. \n Flask itself does not provide caching for you, but Werkzeug, one of the\nlibraries it is based on, has some very basic cache support.  It supports\nmultiple cache backends, normally you want to use a memcached server. \n \n Setting up a Cache \u00b6 \n You create a cache object once and keep it around, similar to how\n Flask  objects are created.  If you are using the\ndevelopment server you can create a\n SimpleCache  object, that one is a simple\ncache that keeps the item stored in the memory of the Python interpreter: \n from   werkzeug.contrib.cache   import   SimpleCache \n cache   =   SimpleCache () \n \n \n If you want to use memcached, make sure to have one of the memcache modules\nsupported (you get them from  PyPI ) and a\nmemcached server running somewhere.  This is how you connect to such an\nmemcached server then: \n from   werkzeug.contrib.cache   import   MemcachedCache \n cache   =   MemcachedCache ([ '127.0.0.1:11211' ]) \n \n \n If you are using App Engine, you can connect to the App Engine memcache\nserver easily: \n from   werkzeug.contrib.cache   import   GAEMemcachedCache \n cache   =   GAEMemcachedCache () \n \n \n \n \n Using a Cache \u00b6 \n Now how can one use such a cache?  There are two very important\noperations:  get()  and\n set() .  This is how to use them: \n To get an item from the cache call\n get()  with a string as key name.\nIf something is in the cache, it is returned.  Otherwise that function\nwill return  None : \n rv   =   cache . get ( 'my-item' ) \n \n \n To add items to the cache, use the  set() \nmethod instead.  The first argument is the key and the second the value\nthat should be set.  Also a timeout can be provided after which the cache\nwill automatically remove item. \n Here a full example how this looks like normally: \n def   get_my_item (): \n     rv   =   cache . get ( 'my-item' ) \n     if   rv   is   None : \n         rv   =   calculate_value () \n         cache . set ( 'my-item' ,   rv ,   timeout = 5   *   60 ) \n     return   rv \n \n \n \n \n\n\n           \n         \n       \n   \n       \n         \n             \n               \n             \n   Contents \n   \n Caching \n Setting up a Cache \n Using a Cache \n \n \n \n Navigation \n \n   Overview \n     \n       Patterns for Flask \n         \n           Previous:  Uploading Files \n           Next:  View Decorators \n       \n     \n   \n \n   Versions \n   \n    \n       Development \n    \n    \n       (unstable) \n    \n  \n    \n       Flask 1.0 \n    \n    \n       (stable) \n    \n  \n    \n       Flask 0.12 \n    \n    \n   \n\n   \n     \n   \n\n \n   Quick search \n     \n     \n       \n       \n       \n       \n     \n     \n \n $('#searchbox').show(0); \n         \n       \n       \n     \n     \n        \u00a9 Copyright 2010 Pallets Team.\n      Created using  Sphinx  1.7.4.\n     \n   \n"}
]